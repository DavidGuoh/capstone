
accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ac  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080038a4  080038a4  000048a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038bc  080038bc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080038bc  080038bc  000048bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038c4  080038c4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c4  080038c4  000048c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c8  080038c8  000048c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080038d8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080038d8  00005110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a874  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2e  00000000  00000000  0000f8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  000113e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bb  00000000  00000000  00011df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261ca  00000000  00000000  000125b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc4c  00000000  00000000  0003877d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb923  00000000  00000000  000453c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130cec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000294c  00000000  00000000  00130d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013367c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800388c 	.word	0x0800388c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800388c 	.word	0x0800388c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	@ 0x3f
 800053c:	d901      	bls.n	8000542 <writeRegister+0x1a>
		address = 63;
 800053e:	233f      	movs	r3, #63	@ 0x3f
 8000540:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000548:	b2db      	uxtb	r3, r3
 800054a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2120      	movs	r1, #32
 8000550:	480b      	ldr	r0, [pc, #44]	@ (8000580 <writeRegister+0x58>)
 8000552:	f001 f81b 	bl	800158c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000556:	1df9      	adds	r1, r7, #7
 8000558:	230a      	movs	r3, #10
 800055a:	2201      	movs	r2, #1
 800055c:	4809      	ldr	r0, [pc, #36]	@ (8000584 <writeRegister+0x5c>)
 800055e:	f002 fa96 	bl	8002a8e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8000562:	1db9      	adds	r1, r7, #6
 8000564:	230a      	movs	r3, #10
 8000566:	2201      	movs	r2, #1
 8000568:	4806      	ldr	r0, [pc, #24]	@ (8000584 <writeRegister+0x5c>)
 800056a:	f002 fa90 	bl	8002a8e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2120      	movs	r1, #32
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <writeRegister+0x58>)
 8000574:	f001 f80a 	bl	800158c <HAL_GPIO_WritePin>
	

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020400 	.word	0x40020400
 8000584:	20000088 	.word	0x20000088

08000588 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b3f      	cmp	r3, #63	@ 0x3f
 800059c:	d901      	bls.n	80005a2 <readRegister+0x1a>
		address = 63;
 800059e:	233f      	movs	r3, #63	@ 0x3f
 80005a0:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d905      	bls.n	80005b4 <readRegister+0x2c>
		address |= 0x40;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e004      	b.n	80005be <readRegister+0x36>
		else	
		address &= ~(0x40);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2120      	movs	r1, #32
 80005cc:	480c      	ldr	r0, [pc, #48]	@ (8000600 <readRegister+0x78>)
 80005ce:	f000 ffdd 	bl	800158c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005d2:	1df9      	adds	r1, r7, #7
 80005d4:	230a      	movs	r3, #10
 80005d6:	2201      	movs	r2, #1
 80005d8:	480a      	ldr	r0, [pc, #40]	@ (8000604 <readRegister+0x7c>)
 80005da:	f002 fa58 	bl	8002a8e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	230a      	movs	r3, #10
 80005e4:	6839      	ldr	r1, [r7, #0]
 80005e6:	4807      	ldr	r0, [pc, #28]	@ (8000604 <readRegister+0x7c>)
 80005e8:	f002 fbc6 	bl	8002d78 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2120      	movs	r1, #32
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <readRegister+0x78>)
 80005f2:	f000 ffcb 	bl	800158c <HAL_GPIO_WritePin>
	
	
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400
 8000604:	20000088 	.word	0x20000088

08000608 <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
static void adxlBW(ADXL_InitTypeDef * adxl)
		{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	4619      	mov	r1, r3
 8000618:	202c      	movs	r0, #44	@ 0x2c
 800061a:	f7ff ff85 	bl	8000528 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d11a      	bne.n	800065c <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	78db      	ldrb	r3, [r3, #3]
 8000632:	2b06      	cmp	r3, #6
 8000634:	d807      	bhi.n	8000646 <adxlBW+0x3e>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	78db      	ldrb	r3, [r3, #3]
 800063a:	2b0c      	cmp	r3, #12
 800063c:	d903      	bls.n	8000646 <adxlBW+0x3e>
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	3307      	adds	r3, #7
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e004      	b.n	8000650 <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	4413      	add	r3, r2
 800064e:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	4619      	mov	r1, r3
 8000654:	202c      	movs	r0, #44	@ 0x2c
 8000656:	f7ff ff67 	bl	8000528 <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 800065a:	e015      	b.n	8000688 <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	78db      	ldrb	r3, [r3, #3]
 8000660:	2b05      	cmp	r3, #5
 8000662:	d807      	bhi.n	8000674 <adxlBW+0x6c>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d903      	bls.n	8000674 <adxlBW+0x6c>
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3306      	adds	r3, #6
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	e004      	b.n	800067e <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	78da      	ldrb	r2, [r3, #3]
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	4413      	add	r3, r2
 800067c:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	4619      	mov	r1, r3
 8000682:	202c      	movs	r0, #44	@ 0x2c
 8000684:	f7ff ff50 	bl	8000528 <writeRegister>
		}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4619      	mov	r1, r3
 80006a0:	2031      	movs	r0, #49	@ 0x31
 80006a2:	f7ff ff41 	bl	8000528 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	019b      	lsls	r3, r3, #6
 80006ac:	b25a      	sxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	015b      	lsls	r3, r3, #5
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25a      	sxtb	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	795b      	ldrb	r3, [r3, #5]
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791a      	ldrb	r2, [r3, #4]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	4413      	add	r3, r2
 80006dc:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	4619      	mov	r1, r3
 80006e2:	2031      	movs	r0, #49	@ 0x31
 80006e4:	f7ff ff20 	bl	8000528 <writeRegister>
			}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2120      	movs	r1, #32
 80006fc:	484b      	ldr	r0, [pc, #300]	@ (800082c <ADXL_Init+0x13c>)
 80006fe:	f000 ff45 	bl	800158c <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 8000702:	2005      	movs	r0, #5
 8000704:	f000 fc8c 	bl	8001020 <HAL_Delay>
	uint8_t testval = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID,&testval,1);
 800070c:	f107 030f 	add.w	r3, r7, #15
 8000710:	2201      	movs	r2, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ff37 	bl	8000588 <readRegister>
	if (testval != 0xE5) return ADXL_ERR;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2be5      	cmp	r3, #229	@ 0xe5
 800071e:	d001      	beq.n	8000724 <ADXL_Init+0x34>
 8000720:	2301      	movs	r3, #1
 8000722:	e07f      	b.n	8000824 <ADXL_Init+0x134>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff6f 	bl	8000608 <adxlBW>
	adxlFormat(adxl);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ffb0 	bl	8000690 <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d13f      	bne.n	80007b8 <ADXL_Init+0xc8>
			{
			switch (adxl->Range) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d846      	bhi.n	80007ce <ADXL_Init+0xde>
 8000740:	a201      	add	r2, pc, #4	@ (adr r2, 8000748 <ADXL_Init+0x58>)
 8000742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000746:	bf00      	nop
 8000748:	08000759 	.word	0x08000759
 800074c:	08000771 	.word	0x08000771
 8000750:	08000789 	.word	0x08000789
 8000754:	080007a1 	.word	0x080007a1
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 8000758:	4b35      	ldr	r3, [pc, #212]	@ (8000830 <ADXL_Init+0x140>)
 800075a:	4a36      	ldr	r2, [pc, #216]	@ (8000834 <ADXL_Init+0x144>)
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	4b34      	ldr	r3, [pc, #208]	@ (8000830 <ADXL_Init+0x140>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a35      	ldr	r2, [pc, #212]	@ (8000838 <ADXL_Init+0x148>)
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <ADXL_Init+0x148>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a34      	ldr	r2, [pc, #208]	@ (800083c <ADXL_Init+0x14c>)
 800076c:	6013      	str	r3, [r2, #0]
								break;
 800076e:	e02e      	b.n	80007ce <ADXL_Init+0xde>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 8000770:	4b2f      	ldr	r3, [pc, #188]	@ (8000830 <ADXL_Init+0x140>)
 8000772:	4a33      	ldr	r2, [pc, #204]	@ (8000840 <ADXL_Init+0x150>)
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4b2e      	ldr	r3, [pc, #184]	@ (8000830 <ADXL_Init+0x140>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a2f      	ldr	r2, [pc, #188]	@ (8000838 <ADXL_Init+0x148>)
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <ADXL_Init+0x148>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a2e      	ldr	r2, [pc, #184]	@ (800083c <ADXL_Init+0x14c>)
 8000784:	6013      	str	r3, [r2, #0]
								break;
 8000786:	e022      	b.n	80007ce <ADXL_Init+0xde>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8000788:	4b29      	ldr	r3, [pc, #164]	@ (8000830 <ADXL_Init+0x140>)
 800078a:	4a2e      	ldr	r2, [pc, #184]	@ (8000844 <ADXL_Init+0x154>)
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <ADXL_Init+0x140>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a29      	ldr	r2, [pc, #164]	@ (8000838 <ADXL_Init+0x148>)
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <ADXL_Init+0x148>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a28      	ldr	r2, [pc, #160]	@ (800083c <ADXL_Init+0x14c>)
 800079c:	6013      	str	r3, [r2, #0]
								break;
 800079e:	e016      	b.n	80007ce <ADXL_Init+0xde>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 80007a0:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <ADXL_Init+0x140>)
 80007a2:	4a29      	ldr	r2, [pc, #164]	@ (8000848 <ADXL_Init+0x158>)
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <ADXL_Init+0x140>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <ADXL_Init+0x148>)
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <ADXL_Init+0x148>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a22      	ldr	r2, [pc, #136]	@ (800083c <ADXL_Init+0x14c>)
 80007b4:	6013      	str	r3, [r2, #0]
								break;
 80007b6:	e00a      	b.n	80007ce <ADXL_Init+0xde>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <ADXL_Init+0x140>)
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <ADXL_Init+0x144>)
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <ADXL_Init+0x140>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000838 <ADXL_Init+0x148>)
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <ADXL_Init+0x148>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <ADXL_Init+0x14c>)
 80007cc:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80007ce:	f107 030e 	add.w	r3, r7, #14
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	202d      	movs	r0, #45	@ 0x2d
 80007d8:	f7ff fed6 	bl	8000588 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	79db      	ldrb	r3, [r3, #7]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d105      	bne.n	80007f0 <ADXL_Init+0x100>
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73bb      	strb	r3, [r7, #14]
 80007ee:	e004      	b.n	80007fa <ADXL_Init+0x10a>
 80007f0:	7bbb      	ldrb	r3, [r7, #14]
 80007f2:	f023 0310 	bic.w	r3, r3, #16
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	73bb      	strb	r3, [r7, #14]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7a1b      	ldrb	r3, [r3, #8]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d105      	bne.n	800080e <ADXL_Init+0x11e>
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73bb      	strb	r3, [r7, #14]
 800080c:	e004      	b.n	8000818 <ADXL_Init+0x128>
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	f023 0320 	bic.w	r3, r3, #32
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73bb      	strb	r3, [r7, #14]
			writeRegister(POWER_CTL,reg);
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	4619      	mov	r1, r3
 800081c:	202d      	movs	r0, #45	@ 0x2d
 800081e:	f7ff fe83 	bl	8000528 <writeRegister>
			
	return ADXL_OK;
 8000822:	2300      	movs	r3, #0
	
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40020400 	.word	0x40020400
 8000830:	20000030 	.word	0x20000030
 8000834:	3b808081 	.word	0x3b808081
 8000838:	2000002c 	.word	0x2000002c
 800083c:	20000028 	.word	0x20000028
 8000840:	3c010204 	.word	0x3c010204
 8000844:	3c820821 	.word	0x3c820821
 8000848:	3d042108 	.word	0x3d042108

0800084c <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
	{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};	
 8000858:	4a3a      	ldr	r2, [pc, #232]	@ (8000944 <ADXL_getAccel+0xf8>)
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000862:	6018      	str	r0, [r3, #0]
 8000864:	3304      	adds	r3, #4
 8000866:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2206      	movs	r2, #6
 800086e:	4619      	mov	r1, r3
 8000870:	2032      	movs	r0, #50	@ 0x32
 8000872:	f7ff fe89 	bl	8000588 <readRegister>
	
	
	if (outputType == OUTPUT_SIGNED)
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d11f      	bne.n	80008bc <ADXL_getAccel+0x70>
		{
		int16_t * acc = Data;	
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	613b      	str	r3, [r7, #16]
	  // Two's Complement
	  acc[0] = (int16_t) ((data[1]*256+data[0]));
 8000880:	7a7b      	ldrb	r3, [r7, #9]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	7a3a      	ldrb	r2, [r7, #8]
 8000888:	4413      	add	r3, r2
 800088a:	b29b      	uxth	r3, r3
 800088c:	b21a      	sxth	r2, r3
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	801a      	strh	r2, [r3, #0]
	  acc[1] = (int16_t) ((data[3]*256+data[2]));
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	7aba      	ldrb	r2, [r7, #10]
 800089a:	4413      	add	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	3302      	adds	r3, #2
 80008a2:	b212      	sxth	r2, r2
 80008a4:	801a      	strh	r2, [r3, #0]
	  acc[2] = (int16_t) ((data[5]*256+data[4]));
 80008a6:	7b7b      	ldrb	r3, [r7, #13]
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	7b3a      	ldrb	r2, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	3304      	adds	r3, #4
 80008b6:	b212      	sxth	r2, r2
 80008b8:	801a      	strh	r2, [r3, #0]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
						
						}
	}
 80008ba:	e03f      	b.n	800093c <ADXL_getAccel+0xf0>
	else if (outputType == OUTPUT_FLOAT)
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d13c      	bne.n	800093c <ADXL_getAccel+0xf0>
						float * fdata = Data;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	617b      	str	r3, [r7, #20]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 80008c6:	7a7b      	ldrb	r3, [r7, #9]
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	7a3a      	ldrb	r2, [r7, #8]
 80008ce:	4413      	add	r3, r2
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	ee07 3a90 	vmov	s15, r3
 80008d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <ADXL_getAccel+0xfc>)
 80008de:	edd3 7a00 	vldr	s15, [r3]
 80008e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	edc3 7a00 	vstr	s15, [r3]
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	7aba      	ldrb	r2, [r7, #10]
 80008f4:	4413      	add	r3, r2
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	ee07 3a90 	vmov	s15, r3
 80008fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <ADXL_getAccel+0x100>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3304      	adds	r3, #4
 800090c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000910:	edc3 7a00 	vstr	s15, [r3]
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 8000914:	7b7b      	ldrb	r3, [r7, #13]
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	b29b      	uxth	r3, r3
 800091a:	7b3a      	ldrb	r2, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	b21b      	sxth	r3, r3
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <ADXL_getAccel+0x104>)
 800092c:	edd3 7a00 	vldr	s15, [r3]
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3308      	adds	r3, #8
 8000934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000938:	edc3 7a00 	vstr	s15, [r3]
	}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	080038a4 	.word	0x080038a4
 8000948:	20000028 	.word	0x20000028
 800094c:	2000002c 	.word	0x2000002c
 8000950:	20000030 	.word	0x20000030

08000954 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 800095e:	f107 030f 	add.w	r3, r7, #15
 8000962:	2201      	movs	r2, #1
 8000964:	4619      	mov	r1, r3
 8000966:	202d      	movs	r0, #45	@ 0x2d
 8000968:	f7ff fe0e 	bl	8000588 <readRegister>
			switch (s) {
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <ADXL_Measure+0x24>
 8000972:	2b01      	cmp	r3, #1
 8000974:	d010      	beq.n	8000998 <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 8000976:	e01a      	b.n	80009ae <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	f023 0304 	bic.w	r3, r3, #4
 800097e:	b2db      	uxtb	r3, r3
 8000980:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	b2db      	uxtb	r3, r3
 800098a:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	4619      	mov	r1, r3
 8000990:	202d      	movs	r0, #45	@ 0x2d
 8000992:	f7ff fdc9 	bl	8000528 <writeRegister>
				break;
 8000996:	e00a      	b.n	80009ae <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	f023 0308 	bic.w	r3, r3, #8
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	4619      	mov	r1, r3
 80009a6:	202d      	movs	r0, #45	@ 0x2d
 80009a8:	f7ff fdbe 	bl	8000528 <writeRegister>
				break;				
 80009ac:	bf00      	nop
		}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fad3 	bl	8000f66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f87e 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 f956 	bl	8000c74 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009c8:	f000 f8d6 	bl	8000b78 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009cc:	f000 f914 	bl	8000bf8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ADXL.SPIMode = SPIMODE_4WIRE;
 80009d0:	4b35      	ldr	r3, [pc, #212]	@ (8000aa8 <main+0xf0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
  ADXL.Rate = BWRATE_800;
 80009d6:	4b34      	ldr	r3, [pc, #208]	@ (8000aa8 <main+0xf0>)
 80009d8:	220d      	movs	r2, #13
 80009da:	70da      	strb	r2, [r3, #3]
  ADXL.Range = RANGE_2G;
 80009dc:	4b32      	ldr	r3, [pc, #200]	@ (8000aa8 <main+0xf0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	711a      	strb	r2, [r3, #4]
  ADXL.Resolution = RESOLUTION_FULL;
 80009e2:	4b31      	ldr	r3, [pc, #196]	@ (8000aa8 <main+0xf0>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	715a      	strb	r2, [r3, #5]

  if (ADXL_Init(&ADXL)!= ADXL_OK){
 80009e8:	482f      	ldr	r0, [pc, #188]	@ (8000aa8 <main+0xf0>)
 80009ea:	f7ff fe81 	bl	80006f0 <ADXL_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d007      	beq.n	8000a04 <main+0x4c>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009fa:	482c      	ldr	r0, [pc, #176]	@ (8000aac <main+0xf4>)
 80009fc:	f000 fdc6 	bl	800158c <HAL_GPIO_WritePin>
	  Error_Handler();
 8000a00:	f000 f978 	bl	8000cf4 <Error_Handler>
  }

  ADXL_Measure(ON);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff ffa5 	bl	8000954 <ADXL_Measure>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  ADXL_getAccel(accelData, OUTPUT_SIGNED);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4828      	ldr	r0, [pc, #160]	@ (8000ab0 <main+0xf8>)
 8000a0e:	f7ff ff1d 	bl	800084c <ADXL_getAccel>

	  xOut_g = accelData[0]/255.0*9.8;
 8000a12:	4b27      	ldr	r3, [pc, #156]	@ (8000ab0 <main+0xf8>)
 8000a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a18:	ee07 3a90 	vmov	s15, r3
 8000a1c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a20:	ed9f 5b1d 	vldr	d5, [pc, #116]	@ 8000a98 <main+0xe0>
 8000a24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a28:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8000aa0 <main+0xe8>
 8000a2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a34:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <main+0xfc>)
 8000a36:	edc3 7a00 	vstr	s15, [r3]
	  yOut_g = accelData[1]/255.0*9.8;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <main+0xf8>)
 8000a3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a48:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 8000a98 <main+0xe0>
 8000a4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a50:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000aa0 <main+0xe8>
 8000a54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <main+0x100>)
 8000a5e:	edc3 7a00 	vstr	s15, [r3]
	  zOut_g = accelData[2]/255.0*9.8;
 8000a62:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <main+0xf8>)
 8000a64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a70:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8000a98 <main+0xe0>
 8000a74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a78:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000aa0 <main+0xe8>
 8000a7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a84:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <main+0x104>)
 8000a86:	edc3 7a00 	vstr	s15, [r3]
//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(50);
 8000a8a:	2032      	movs	r0, #50	@ 0x32
 8000a8c:	f000 fac8 	bl	8001020 <HAL_Delay>
	  ADXL_getAccel(accelData, OUTPUT_SIGNED);
 8000a90:	bf00      	nop
 8000a92:	e7ba      	b.n	8000a0a <main+0x52>
 8000a94:	f3af 8000 	nop.w
 8000a98:	00000000 	.word	0x00000000
 8000a9c:	406fe000 	.word	0x406fe000
 8000aa0:	9999999a 	.word	0x9999999a
 8000aa4:	40239999 	.word	0x40239999
 8000aa8:	200000ec 	.word	0x200000ec
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	200000f8 	.word	0x200000f8
 8000ab4:	20000100 	.word	0x20000100
 8000ab8:	20000104 	.word	0x20000104
 8000abc:	20000108 	.word	0x20000108

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b094      	sub	sp, #80	@ 0x50
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2234      	movs	r2, #52	@ 0x34
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 feb0 	bl	8003834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <SystemClock_Config+0xb0>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	4a21      	ldr	r2, [pc, #132]	@ (8000b70 <SystemClock_Config+0xb0>)
 8000aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <SystemClock_Config+0xb0>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <SystemClock_Config+0xb4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b04:	4a1b      	ldr	r2, [pc, #108]	@ (8000b74 <SystemClock_Config+0xb4>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <SystemClock_Config+0xb4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b20:	2310      	movs	r3, #16
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fe7b 	bl	8001828 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b38:	f000 f8dc 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 f914 	bl	8001d84 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b62:	f000 f8c7 	bl	8000cf4 <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	@ 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000

08000b78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf0 <MX_I2C1_Init+0x78>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b84:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf4 <MX_I2C1_Init+0x7c>)
 8000b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb2:	480e      	ldr	r0, [pc, #56]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000bb4:	f000 fd04 	bl	80015c0 <HAL_I2C_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bbe:	f000 f899 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4809      	ldr	r0, [pc, #36]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000bc6:	f000 fd97 	bl	80016f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bd0:	f000 f890 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000bd8:	f000 fdd9 	bl	800178e <HAL_I2CEx_ConfigDigitalFilter>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f000 f887 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000034 	.word	0x20000034
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	00303d5b 	.word	0x00303d5b

08000bf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <MX_SPI1_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c10:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c2e:	2210      	movs	r2, #16
 8000c30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c46:	2207      	movs	r2, #7
 8000c48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_SPI1_Init+0x74>)
 8000c58:	f001 fe6e 	bl	8002938 <HAL_SPI_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 f847 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000088 	.word	0x20000088
 8000c70:	40013000 	.word	0x40013000

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <MX_GPIO_Init+0x78>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <MX_GPIO_Init+0x78>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <MX_GPIO_Init+0x78>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_GPIO_Init+0x78>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a11      	ldr	r2, [pc, #68]	@ (8000cec <MX_GPIO_Init+0x78>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_GPIO_Init+0x78>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 8000cc0:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <MX_GPIO_Init+0x7c>)
 8000cc2:	f000 fc63 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI1_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin;
 8000cc6:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_GPIO_Init+0x7c>)
 8000ce0:	f000 faa8 	bl	8001234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <Error_Handler+0x8>

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0ae      	sub	sp, #184	@ 0xb8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2290      	movs	r2, #144	@ 0x90
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fd63 	bl	8003834 <memset>
  if(hi2c->Instance==I2C1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a22      	ldr	r2, [pc, #136]	@ (8000dfc <HAL_I2C_MspInit+0xb4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d13c      	bne.n	8000df2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d7c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 f9ae 	bl	80020e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d92:	f7ff ffaf 	bl	8000cf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <HAL_I2C_MspInit+0xb8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a19      	ldr	r2, [pc, #100]	@ (8000e00 <HAL_I2C_MspInit+0xb8>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <HAL_I2C_MspInit+0xb8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db6:	2312      	movs	r3, #18
 8000db8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480b      	ldr	r0, [pc, #44]	@ (8000e04 <HAL_I2C_MspInit+0xbc>)
 8000dd6:	f000 fa2d 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_I2C_MspInit+0xb8>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <HAL_I2C_MspInit+0xb8>)
 8000de0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_I2C_MspInit+0xb8>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000df2:	bf00      	nop
 8000df4:	37b8      	adds	r7, #184	@ 0xb8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400

08000e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <HAL_SPI_MspInit+0x7c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d127      	bne.n	8000e7a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2a:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	4a16      	ldr	r2, [pc, #88]	@ (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e5a:	23e0      	movs	r3, #224	@ 0xe0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <HAL_SPI_MspInit+0x84>)
 8000e76:	f000 f9dd 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	@ 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f000 f87b 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f18:	f7ff ffea 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f002 fc7f 	bl	8003844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fd37 	bl	80009b8 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f58:	080038cc 	.word	0x080038cc
  ldr r2, =_sbss
 8000f5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f60:	20000110 	.word	0x20000110

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>

08000f66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f92e 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f70:	200f      	movs	r0, #15
 8000f72:	f000 f805 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f76:	f7ff fec3 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f93b 	bl	800121a <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fbc:	f000 f911 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	@ (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	2000010c 	.word	0x2000010c

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000010c 	.word	0x2000010c

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <__NVIC_SetPriorityGrouping+0x40>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	4313      	orrs	r3, r2
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	05fa0000 	.word	0x05fa0000

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	@ (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	@ (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	@ 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff47 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff5c 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb0 	bl	8001188 <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e175      	b.n	8001540 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8164 	bne.w	800153a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d005      	beq.n	800128a <HAL_GPIO_Init+0x56>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d130      	bne.n	80012ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d017      	beq.n	8001328 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80be 	beq.w	800153a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b66      	ldr	r3, [pc, #408]	@ (8001558 <HAL_GPIO_Init+0x324>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	4a65      	ldr	r2, [pc, #404]	@ (8001558 <HAL_GPIO_Init+0x324>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ca:	4b63      	ldr	r3, [pc, #396]	@ (8001558 <HAL_GPIO_Init+0x324>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013d6:	4a61      	ldr	r2, [pc, #388]	@ (800155c <HAL_GPIO_Init+0x328>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a58      	ldr	r2, [pc, #352]	@ (8001560 <HAL_GPIO_Init+0x32c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d037      	beq.n	8001472 <HAL_GPIO_Init+0x23e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a57      	ldr	r2, [pc, #348]	@ (8001564 <HAL_GPIO_Init+0x330>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d031      	beq.n	800146e <HAL_GPIO_Init+0x23a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a56      	ldr	r2, [pc, #344]	@ (8001568 <HAL_GPIO_Init+0x334>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02b      	beq.n	800146a <HAL_GPIO_Init+0x236>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a55      	ldr	r2, [pc, #340]	@ (800156c <HAL_GPIO_Init+0x338>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d025      	beq.n	8001466 <HAL_GPIO_Init+0x232>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a54      	ldr	r2, [pc, #336]	@ (8001570 <HAL_GPIO_Init+0x33c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01f      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a53      	ldr	r2, [pc, #332]	@ (8001574 <HAL_GPIO_Init+0x340>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0x22a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a52      	ldr	r2, [pc, #328]	@ (8001578 <HAL_GPIO_Init+0x344>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0x226>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a51      	ldr	r2, [pc, #324]	@ (800157c <HAL_GPIO_Init+0x348>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00d      	beq.n	8001456 <HAL_GPIO_Init+0x222>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a50      	ldr	r2, [pc, #320]	@ (8001580 <HAL_GPIO_Init+0x34c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x21e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4f      	ldr	r2, [pc, #316]	@ (8001584 <HAL_GPIO_Init+0x350>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d101      	bne.n	800144e <HAL_GPIO_Init+0x21a>
 800144a:	2309      	movs	r3, #9
 800144c:	e012      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800144e:	230a      	movs	r3, #10
 8001450:	e010      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001452:	2308      	movs	r3, #8
 8001454:	e00e      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001456:	2307      	movs	r3, #7
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145a:	2306      	movs	r3, #6
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	@ (800155c <HAL_GPIO_Init+0x328>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b3d      	ldr	r3, [pc, #244]	@ (8001588 <HAL_GPIO_Init+0x354>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a34      	ldr	r2, [pc, #208]	@ (8001588 <HAL_GPIO_Init+0x354>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b32      	ldr	r3, [pc, #200]	@ (8001588 <HAL_GPIO_Init+0x354>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a29      	ldr	r2, [pc, #164]	@ (8001588 <HAL_GPIO_Init+0x354>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_GPIO_Init+0x354>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1f      	ldr	r2, [pc, #124]	@ (8001588 <HAL_GPIO_Init+0x354>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <HAL_GPIO_Init+0x354>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <HAL_GPIO_Init+0x354>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae86 	bls.w	8001254 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	@ 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40021400 	.word	0x40021400
 8001578:	40021800 	.word	0x40021800
 800157c:	40021c00 	.word	0x40021c00
 8001580:	40022000 	.word	0x40022000
 8001584:	40022400 	.word	0x40022400
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e08b      	b.n	80016ea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fbae 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2224      	movs	r2, #36	@ 0x24
 80015f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001610:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001620:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	e006      	b.n	8001648 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001646:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d108      	bne.n	8001662 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	e007      	b.n	8001672 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001670:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_I2C_Init+0x134>)
 800167e:	430b      	orrs	r3, r1
 8001680:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001690:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691a      	ldr	r2, [r3, #16]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69d9      	ldr	r1, [r3, #28]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1a      	ldr	r2, [r3, #32]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	02008000 	.word	0x02008000

080016f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b20      	cmp	r3, #32
 800170c:	d138      	bne.n	8001780 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001718:	2302      	movs	r3, #2
 800171a:	e032      	b.n	8001782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2224      	movs	r2, #36	@ 0x24
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800174a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	e000      	b.n	8001782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001780:	2302      	movs	r3, #2
  }
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d139      	bne.n	8001818 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e033      	b.n	800181a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2224      	movs	r2, #36	@ 0x24
 80017be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2220      	movs	r2, #32
 8001808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e29b      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8087 	beq.w	800195a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800184c:	4b96      	ldr	r3, [pc, #600]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b04      	cmp	r3, #4
 8001856:	d00c      	beq.n	8001872 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001858:	4b93      	ldr	r3, [pc, #588]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d112      	bne.n	800188a <HAL_RCC_OscConfig+0x62>
 8001864:	4b90      	ldr	r3, [pc, #576]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001870:	d10b      	bne.n	800188a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001872:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d06c      	beq.n	8001958 <HAL_RCC_OscConfig+0x130>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d168      	bne.n	8001958 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e275      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x7a>
 8001894:	4b84      	ldr	r3, [pc, #528]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a83      	ldr	r2, [pc, #524]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800189a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e02e      	b.n	8001900 <HAL_RCC_OscConfig+0xd8>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x9c>
 80018aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7e      	ldr	r2, [pc, #504]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a7b      	ldr	r2, [pc, #492]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xd8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0xc0>
 80018ce:	4b76      	ldr	r3, [pc, #472]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b73      	ldr	r3, [pc, #460]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a72      	ldr	r2, [pc, #456]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xd8>
 80018e8:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fb7e 	bl	8001008 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fb7a 	bl	8001008 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	@ 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e229      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b61      	ldr	r3, [pc, #388]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xe8>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fb6a 	bl	8001008 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fb66 	bl	8001008 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	@ 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e215      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b57      	ldr	r3, [pc, #348]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x110>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d069      	beq.n	8001a3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	4b50      	ldr	r3, [pc, #320]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001972:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x190>
 800197e:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x17a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1e9      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b41      	ldr	r3, [pc, #260]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	493d      	ldr	r1, [pc, #244]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	e040      	b.n	8001a3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d023      	beq.n	8001a08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b39      	ldr	r3, [pc, #228]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a38      	ldr	r2, [pc, #224]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb1c 	bl	8001008 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fb18 	bl	8001008 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1c7      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4929      	ldr	r1, [pc, #164]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
 8001a06:	e018      	b.n	8001a3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a26      	ldr	r2, [pc, #152]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff faf8 	bl	8001008 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7ff faf4 	bl	8001008 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1a3      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d038      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d019      	beq.n	8001a82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4e:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a52:	4a15      	ldr	r2, [pc, #84]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fad5 	bl	8001008 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff fad1 	bl	8001008 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e180      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x23a>
 8001a80:	e01a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a86:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fabb 	bl	8001008 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fab7 	bl	8001008 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d903      	bls.n	8001aac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e166      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
 8001aa8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b92      	ldr	r3, [pc, #584]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a4 	beq.w	8001c0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac6:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10d      	bne.n	8001aee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b89      	ldr	r3, [pc, #548]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	4a88      	ldr	r2, [pc, #544]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ade:	4b86      	ldr	r3, [pc, #536]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aee:	4b83      	ldr	r3, [pc, #524]	@ (8001cfc <HAL_RCC_OscConfig+0x4d4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001afa:	4b80      	ldr	r3, [pc, #512]	@ (8001cfc <HAL_RCC_OscConfig+0x4d4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7f      	ldr	r2, [pc, #508]	@ (8001cfc <HAL_RCC_OscConfig+0x4d4>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fa7f 	bl	8001008 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7ff fa7b 	bl	8001008 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b64      	cmp	r3, #100	@ 0x64
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e12a      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b20:	4b76      	ldr	r3, [pc, #472]	@ (8001cfc <HAL_RCC_OscConfig+0x4d4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x31a>
 8001b34:	4b70      	ldr	r3, [pc, #448]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b38:	4a6f      	ldr	r2, [pc, #444]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b40:	e02d      	b.n	8001b9e <HAL_RCC_OscConfig+0x376>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x33c>
 8001b4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4e:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b56:	4b68      	ldr	r3, [pc, #416]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4a67      	ldr	r2, [pc, #412]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b62:	e01c      	b.n	8001b9e <HAL_RCC_OscConfig+0x376>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d10c      	bne.n	8001b86 <HAL_RCC_OscConfig+0x35e>
 8001b6c:	4b62      	ldr	r3, [pc, #392]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b70:	4a61      	ldr	r2, [pc, #388]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b78:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7c:	4a5e      	ldr	r2, [pc, #376]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b84:	e00b      	b.n	8001b9e <HAL_RCC_OscConfig+0x376>
 8001b86:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b92:	4b59      	ldr	r3, [pc, #356]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b96:	4a58      	ldr	r2, [pc, #352]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d015      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fa2f 	bl	8001008 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fa2b 	bl	8001008 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0d8      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ee      	beq.n	8001bae <HAL_RCC_OscConfig+0x386>
 8001bd0:	e014      	b.n	8001bfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fa19 	bl	8001008 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff fa15 	bl	8001008 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0c2      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	4b41      	ldr	r3, [pc, #260]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ee      	bne.n	8001bda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d105      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c02:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	4a3c      	ldr	r2, [pc, #240]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80ae 	beq.w	8001d74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c18:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d06d      	beq.n	8001d00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d14b      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2c:	4b32      	ldr	r3, [pc, #200]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a31      	ldr	r2, [pc, #196]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001c32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f9e6 	bl	8001008 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f9e2 	bl	8001008 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e091      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	4b29      	ldr	r3, [pc, #164]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	019b      	lsls	r3, r3, #6
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	3b01      	subs	r3, #1
 8001c78:	041b      	lsls	r3, r3, #16
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	061b      	lsls	r3, r3, #24
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	071b      	lsls	r3, r3, #28
 8001c8a:	491b      	ldr	r1, [pc, #108]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a18      	ldr	r2, [pc, #96]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f9b4 	bl	8001008 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff f9b0 	bl	8001008 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e05f      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
 8001cc2:	e057      	b.n	8001d74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f99a 	bl	8001008 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff f996 	bl	8001008 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e045      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	4b03      	ldr	r3, [pc, #12]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4b0>
 8001cf6:	e03d      	b.n	8001d74 <HAL_RCC_OscConfig+0x54c>
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_RCC_OscConfig+0x558>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d030      	beq.n	8001d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d129      	bne.n	8001d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d122      	bne.n	8001d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d119      	bne.n	8001d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10f      	bne.n	8001d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d0      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b67      	ldr	r3, [pc, #412]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 020f 	bic.w	r2, r3, #15
 8001db2:	4965      	ldr	r1, [pc, #404]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001dea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a52      	ldr	r2, [pc, #328]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d040      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d115      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b41      	ldr	r3, [pc, #260]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e073      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06b      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b39      	ldr	r3, [pc, #228]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4936      	ldr	r1, [pc, #216]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e78:	f7ff f8c6 	bl	8001008 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7ff f8c2 	bl	8001008 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e053      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d210      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 020f 	bic.w	r2, r3, #15
 8001ebe:	4922      	ldr	r1, [pc, #136]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	490a      	ldr	r1, [pc, #40]	@ (8001f50 <HAL_RCC_ClockConfig+0x1cc>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1d0>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_RCC_ClockConfig+0x1d4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f822 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	080038ac 	.word	0x080038ac
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b090      	sub	sp, #64	@ 0x40
 8001f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f74:	4b59      	ldr	r3, [pc, #356]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d00d      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x40>
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	f200 80a1 	bhi.w	80020c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x34>
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d003      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f8e:	e09b      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b53      	ldr	r3, [pc, #332]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f94:	e09b      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f96:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f9a:	e098      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fa4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d028      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	2200      	movs	r2, #0
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4b47      	ldr	r3, [pc, #284]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fc8:	fb03 f201 	mul.w	r2, r3, r1
 8001fcc:	2300      	movs	r3, #0
 8001fce:	fb00 f303 	mul.w	r3, r0, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a43      	ldr	r2, [pc, #268]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fd6:	fba0 1202 	umull	r1, r2, r0, r2
 8001fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fdc:	460a      	mov	r2, r1
 8001fde:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fe2:	4413      	add	r3, r2
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	61fa      	str	r2, [r7, #28]
 8001fee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ff6:	f7fe f91f 	bl	8000238 <__aeabi_uldivmod>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4613      	mov	r3, r2
 8002000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002002:	e053      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002004:	4b35      	ldr	r3, [pc, #212]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	2200      	movs	r2, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	617a      	str	r2, [r7, #20]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002016:	f04f 0b00 	mov.w	fp, #0
 800201a:	4652      	mov	r2, sl
 800201c:	465b      	mov	r3, fp
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	0159      	lsls	r1, r3, #5
 8002028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202c:	0150      	lsls	r0, r2, #5
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ebb2 080a 	subs.w	r8, r2, sl
 8002036:	eb63 090b 	sbc.w	r9, r3, fp
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002046:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800204a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800204e:	ebb2 0408 	subs.w	r4, r2, r8
 8002052:	eb63 0509 	sbc.w	r5, r3, r9
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	00eb      	lsls	r3, r5, #3
 8002060:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002064:	00e2      	lsls	r2, r4, #3
 8002066:	4614      	mov	r4, r2
 8002068:	461d      	mov	r5, r3
 800206a:	eb14 030a 	adds.w	r3, r4, sl
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	eb45 030b 	adc.w	r3, r5, fp
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002082:	4629      	mov	r1, r5
 8002084:	028b      	lsls	r3, r1, #10
 8002086:	4621      	mov	r1, r4
 8002088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800208c:	4621      	mov	r1, r4
 800208e:	028a      	lsls	r2, r1, #10
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002096:	2200      	movs	r2, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	60fa      	str	r2, [r7, #12]
 800209c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020a0:	f7fe f8ca 	bl	8000238 <__aeabi_uldivmod>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4613      	mov	r3, r2
 80020aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x180>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80020bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020c6:	e002      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80020ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3740      	adds	r7, #64	@ 0x40
 80020d4:	46bd      	mov	sp, r7
 80020d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	017d7840 	.word	0x017d7840

080020e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d012      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002110:	4b69      	ldr	r3, [pc, #420]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a68      	ldr	r2, [pc, #416]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002116:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800211a:	6093      	str	r3, [r2, #8]
 800211c:	4b66      	ldr	r3, [pc, #408]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002124:	4964      	ldr	r1, [pc, #400]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d017      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002142:	4b5d      	ldr	r3, [pc, #372]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002148:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	4959      	ldr	r1, [pc, #356]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002160:	d101      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800216e:	2301      	movs	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d017      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800217e:	4b4e      	ldr	r3, [pc, #312]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002184:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	494a      	ldr	r1, [pc, #296]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800219c:	d101      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 808b 	beq.w	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b3a      	ldr	r3, [pc, #232]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	4a39      	ldr	r2, [pc, #228]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d8:	4b37      	ldr	r3, [pc, #220]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021e4:	4b35      	ldr	r3, [pc, #212]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a34      	ldr	r2, [pc, #208]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f0:	f7fe ff0a 	bl	8001008 <HAL_GetTick>
 80021f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe ff06 	bl	8001008 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e38f      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800220a:	4b2c      	ldr	r3, [pc, #176]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002216:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800221e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d035      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d02e      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002234:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800223c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800223e:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002242:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800224a:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	4a1a      	ldr	r2, [pc, #104]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002254:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002256:	4a18      	ldr	r2, [pc, #96]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d114      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fece 	bl	8001008 <HAL_GetTick>
 800226c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe feca 	bl	8001008 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e351      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0ee      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800229a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800229e:	d111      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022ae:	400b      	ands	r3, r1
 80022b0:	4901      	ldr	r1, [pc, #4]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40007000 	.word	0x40007000
 80022c0:	0ffffcff 	.word	0x0ffffcff
 80022c4:	4bac      	ldr	r3, [pc, #688]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4aab      	ldr	r2, [pc, #684]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80022ce:	6093      	str	r3, [r2, #8]
 80022d0:	4ba9      	ldr	r3, [pc, #676]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	49a6      	ldr	r1, [pc, #664]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022ee:	4ba2      	ldr	r3, [pc, #648]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f4:	4aa0      	ldr	r2, [pc, #640]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022fe:	4b9e      	ldr	r3, [pc, #632]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002300:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002308:	499b      	ldr	r1, [pc, #620]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800231c:	4b96      	ldr	r3, [pc, #600]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002322:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800232a:	4993      	ldr	r1, [pc, #588]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800233e:	4b8e      	ldr	r3, [pc, #568]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800234c:	498a      	ldr	r1, [pc, #552]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002360:	4b85      	ldr	r3, [pc, #532]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002366:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800236e:	4982      	ldr	r1, [pc, #520]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002382:	4b7d      	ldr	r3, [pc, #500]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002388:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	4979      	ldr	r1, [pc, #484]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a4:	4b74      	ldr	r3, [pc, #464]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4971      	ldr	r1, [pc, #452]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023cc:	f023 020c 	bic.w	r2, r3, #12
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d4:	4968      	ldr	r1, [pc, #416]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e8:	4b63      	ldr	r3, [pc, #396]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f6:	4960      	ldr	r1, [pc, #384]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800240a:	4b5b      	ldr	r3, [pc, #364]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002410:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002418:	4957      	ldr	r1, [pc, #348]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800242c:	4b52      	ldr	r3, [pc, #328]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002432:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	494f      	ldr	r1, [pc, #316]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800244e:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002454:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	4946      	ldr	r1, [pc, #280]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002470:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002476:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247e:	493e      	ldr	r1, [pc, #248]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002492:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002498:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a0:	4935      	ldr	r1, [pc, #212]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024b4:	4b30      	ldr	r3, [pc, #192]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024c2:	492d      	ldr	r1, [pc, #180]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d011      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024d6:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024dc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024e4:	4924      	ldr	r1, [pc, #144]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024f4:	d101      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002506:	2301      	movs	r3, #1
 8002508:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002516:	4b18      	ldr	r3, [pc, #96]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002524:	4914      	ldr	r1, [pc, #80]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002538:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002548:	490b      	ldr	r1, [pc, #44]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00f      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800256c:	4902      	ldr	r1, [pc, #8]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002574:	e002      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002588:	4b8a      	ldr	r3, [pc, #552]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800258e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002598:	4986      	ldr	r1, [pc, #536]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00b      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025ac:	4b81      	ldr	r3, [pc, #516]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025bc:	497d      	ldr	r1, [pc, #500]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d006      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80d6 	beq.w	8002784 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025d8:	4b76      	ldr	r3, [pc, #472]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a75      	ldr	r2, [pc, #468]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e4:	f7fe fd10 	bl	8001008 <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025ec:	f7fe fd0c 	bl	8001008 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e195      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025fe:	4b6d      	ldr	r3, [pc, #436]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d021      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11d      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800261e:	4b65      	ldr	r3, [pc, #404]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800262c:	4b61      	ldr	r3, [pc, #388]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002632:	0e1b      	lsrs	r3, r3, #24
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	019a      	lsls	r2, r3, #6
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	041b      	lsls	r3, r3, #16
 8002644:	431a      	orrs	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	071b      	lsls	r3, r3, #28
 8002652:	4958      	ldr	r1, [pc, #352]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02e      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002684:	d129      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002686:	4b4b      	ldr	r3, [pc, #300]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002694:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800269a:	0f1b      	lsrs	r3, r3, #28
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	019a      	lsls	r2, r3, #6
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	071b      	lsls	r3, r3, #28
 80026ba:	493e      	ldr	r1, [pc, #248]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026c2:	4b3c      	ldr	r3, [pc, #240]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c8:	f023 021f 	bic.w	r2, r3, #31
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	3b01      	subs	r3, #1
 80026d2:	4938      	ldr	r1, [pc, #224]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01d      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ec:	0e1b      	lsrs	r3, r3, #24
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026fa:	0f1b      	lsrs	r3, r3, #28
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	019a      	lsls	r2, r3, #6
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	041b      	lsls	r3, r3, #16
 800270e:	431a      	orrs	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	071b      	lsls	r3, r3, #28
 800271a:	4926      	ldr	r1, [pc, #152]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d011      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	019a      	lsls	r2, r3, #6
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	071b      	lsls	r3, r3, #28
 800274a:	491a      	ldr	r1, [pc, #104]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002752:	4b18      	ldr	r3, [pc, #96]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002758:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800275c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275e:	f7fe fc53 	bl	8001008 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002766:	f7fe fc4f 	bl	8001008 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b64      	cmp	r3, #100	@ 0x64
 8002772:	d901      	bls.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0d8      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002778:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b01      	cmp	r3, #1
 8002788:	f040 80ce 	bne.w	8002928 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800278c:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a08      	ldr	r2, [pc, #32]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe fc36 	bl	8001008 <HAL_GetTick>
 800279c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800279e:	e00b      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027a0:	f7fe fc32 	bl	8001008 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	@ 0x64
 80027ac:	d904      	bls.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0bb      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027c4:	d0ec      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02e      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d12a      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027ee:	4b51      	ldr	r3, [pc, #324]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002802:	0f1b      	lsrs	r3, r3, #28
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	019a      	lsls	r2, r3, #6
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	071b      	lsls	r3, r3, #28
 8002822:	4944      	ldr	r1, [pc, #272]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800282a:	4b42      	ldr	r3, [pc, #264]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800282c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002830:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	493d      	ldr	r1, [pc, #244]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d022      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002858:	d11d      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800285a:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002860:	0e1b      	lsrs	r3, r3, #24
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002868:	4b32      	ldr	r3, [pc, #200]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286e:	0f1b      	lsrs	r3, r3, #28
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	019a      	lsls	r2, r3, #6
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	041b      	lsls	r3, r3, #16
 8002882:	431a      	orrs	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	431a      	orrs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	071b      	lsls	r3, r3, #28
 800288e:	4929      	ldr	r1, [pc, #164]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d028      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028a2:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a8:	0e1b      	lsrs	r3, r3, #24
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028b0:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	019a      	lsls	r2, r3, #6
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	431a      	orrs	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	071b      	lsls	r3, r3, #28
 80028d6:	4917      	ldr	r1, [pc, #92]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028de:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	4911      	ldr	r1, [pc, #68]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002900:	f7fe fb82 	bl	8001008 <HAL_GetTick>
 8002904:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002908:	f7fe fb7e 	bl	8001008 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e007      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002926:	d1ef      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e09d      	b.n	8002a86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	d108      	bne.n	8002964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800295a:	d009      	beq.n	8002970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
 8002962:	e005      	b.n	8002970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fa3c 	bl	8000e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029b0:	d902      	bls.n	80029b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e002      	b.n	80029be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029c6:	d007      	beq.n	80029d8 <HAL_SPI_Init+0xa0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029d0:	d002      	beq.n	80029d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1a:	ea42 0103 	orr.w	r1, r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	0c1b      	lsrs	r3, r3, #16
 8002a34:	f003 0204 	and.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a54:	ea42 0103 	orr.w	r1, r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b088      	sub	sp, #32
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_SPI_Transmit+0x22>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e15f      	b.n	8002d70 <HAL_SPI_Transmit+0x2e2>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ab8:	f7fe faa6 	bl	8001008 <HAL_GetTick>
 8002abc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d002      	beq.n	8002ad4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ad2:	e148      	b.n	8002d66 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_SPI_Transmit+0x52>
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ae4:	e13f      	b.n	8002d66 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b30:	d10f      	bne.n	8002b52 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d007      	beq.n	8002b70 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b78:	d94f      	bls.n	8002c1a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_SPI_Transmit+0xfa>
 8002b82:	8afb      	ldrh	r3, [r7, #22]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d142      	bne.n	8002c0e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	1c9a      	adds	r2, r3, #2
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bac:	e02f      	b.n	8002c0e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d112      	bne.n	8002be2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	881a      	ldrh	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bcc:	1c9a      	adds	r2, r3, #2
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002be0:	e015      	b.n	8002c0e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be2:	f7fe fa11 	bl	8001008 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d803      	bhi.n	8002bfa <HAL_SPI_Transmit+0x16c>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf8:	d102      	bne.n	8002c00 <HAL_SPI_Transmit+0x172>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002c0c:	e0ab      	b.n	8002d66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ca      	bne.n	8002bae <HAL_SPI_Transmit+0x120>
 8002c18:	e080      	b.n	8002d1c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_SPI_Transmit+0x19a>
 8002c22:	8afb      	ldrh	r3, [r7, #22]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d174      	bne.n	8002d12 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d912      	bls.n	8002c58 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	881a      	ldrh	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	1c9a      	adds	r2, r3, #2
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b02      	subs	r3, #2
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c56:	e05c      	b.n	8002d12 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	7812      	ldrb	r2, [r2, #0]
 8002c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c7e:	e048      	b.n	8002d12 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d12b      	bne.n	8002ce6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d912      	bls.n	8002cbe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	881a      	ldrh	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	1c9a      	adds	r2, r3, #2
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b02      	subs	r3, #2
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cbc:	e029      	b.n	8002d12 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ce4:	e015      	b.n	8002d12 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ce6:	f7fe f98f 	bl	8001008 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d803      	bhi.n	8002cfe <HAL_SPI_Transmit+0x270>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cfc:	d102      	bne.n	8002d04 <HAL_SPI_Transmit+0x276>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002d10:	e029      	b.n	8002d66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1b1      	bne.n	8002c80 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	6839      	ldr	r1, [r7, #0]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fd1d 	bl	8003760 <SPI_EndRxTxTransaction>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e003      	b.n	8002d66 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d002      	beq.n	8002d9e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d9c:	e11a      	b.n	8002fd4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002da6:	d112      	bne.n	8002dce <HAL_SPI_Receive+0x56>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10e      	bne.n	8002dce <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2204      	movs	r2, #4
 8002db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f90e 	bl	8002fe6 <HAL_SPI_TransmitReceive>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	e107      	b.n	8002fde <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_SPI_Receive+0x64>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e100      	b.n	8002fde <HAL_SPI_Receive+0x266>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de4:	f7fe f910 	bl	8001008 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_Receive+0x7e>
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dfa:	e0eb      	b.n	8002fd4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e46:	d908      	bls.n	8002e5a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	e007      	b.n	8002e6a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e68:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e72:	d10f      	bne.n	8002e94 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e92:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ea0:	d007      	beq.n	8002eb2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002eba:	d86f      	bhi.n	8002f9c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ebc:	e034      	b.n	8002f28 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d117      	bne.n	8002efc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f103 020c 	add.w	r2, r3, #12
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002efa:	e015      	b.n	8002f28 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002efc:	f7fe f884 	bl	8001008 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d803      	bhi.n	8002f14 <HAL_SPI_Receive+0x19c>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f12:	d102      	bne.n	8002f1a <HAL_SPI_Receive+0x1a2>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f26:	e055      	b.n	8002fd4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1c4      	bne.n	8002ebe <HAL_SPI_Receive+0x146>
 8002f34:	e038      	b.n	8002fa8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d115      	bne.n	8002f70 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002f6e:	e015      	b.n	8002f9c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f70:	f7fe f84a 	bl	8001008 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d803      	bhi.n	8002f88 <HAL_SPI_Receive+0x210>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_Receive+0x216>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f9a:	e01b      	b.n	8002fd4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1c6      	bne.n	8002f36 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	6839      	ldr	r1, [r7, #0]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fb5b 	bl	8003668 <SPI_EndRxTransaction>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
 8002fca:	e003      	b.n	8002fd4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b08a      	sub	sp, #40	@ 0x28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_SPI_TransmitReceive+0x26>
 8003008:	2302      	movs	r3, #2
 800300a:	e20a      	b.n	8003422 <HAL_SPI_TransmitReceive+0x43c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003014:	f7fd fff8 	bl	8001008 <HAL_GetTick>
 8003018:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003020:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003030:	7efb      	ldrb	r3, [r7, #27]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d00e      	beq.n	8003054 <HAL_SPI_TransmitReceive+0x6e>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800303c:	d106      	bne.n	800304c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <HAL_SPI_TransmitReceive+0x66>
 8003046:	7efb      	ldrb	r3, [r7, #27]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d003      	beq.n	8003054 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003052:	e1e0      	b.n	8003416 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_SPI_TransmitReceive+0x80>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_SPI_TransmitReceive+0x80>
 8003060:	887b      	ldrh	r3, [r7, #2]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800306c:	e1d3      	b.n	8003416 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b04      	cmp	r3, #4
 8003078:	d003      	beq.n	8003082 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2205      	movs	r2, #5
 800307e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	887a      	ldrh	r2, [r7, #2]
 8003092:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	887a      	ldrh	r2, [r7, #2]
 800309a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	887a      	ldrh	r2, [r7, #2]
 80030ae:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030c4:	d802      	bhi.n	80030cc <HAL_SPI_TransmitReceive+0xe6>
 80030c6:	8a3b      	ldrh	r3, [r7, #16]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d908      	bls.n	80030de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	e007      	b.n	80030ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	2b40      	cmp	r3, #64	@ 0x40
 80030fa:	d007      	beq.n	800310c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003114:	f240 8081 	bls.w	800321a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_SPI_TransmitReceive+0x140>
 8003120:	8a7b      	ldrh	r3, [r7, #18]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d16d      	bne.n	8003202 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800314a:	e05a      	b.n	8003202 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d11b      	bne.n	8003192 <HAL_SPI_TransmitReceive+0x1ac>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d016      	beq.n	8003192 <HAL_SPI_TransmitReceive+0x1ac>
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	2b01      	cmp	r3, #1
 8003168:	d113      	bne.n	8003192 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316e:	881a      	ldrh	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317a:	1c9a      	adds	r2, r3, #2
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d11c      	bne.n	80031da <HAL_SPI_TransmitReceive+0x1f4>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d016      	beq.n	80031da <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	b292      	uxth	r2, r2
 80031b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	1c9a      	adds	r2, r3, #2
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031d6:	2301      	movs	r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031da:	f7fd ff15 	bl	8001008 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d80b      	bhi.n	8003202 <HAL_SPI_TransmitReceive+0x21c>
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031f0:	d007      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003200:	e109      	b.n	8003416 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d19f      	bne.n	800314c <HAL_SPI_TransmitReceive+0x166>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d199      	bne.n	800314c <HAL_SPI_TransmitReceive+0x166>
 8003218:	e0e3      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_SPI_TransmitReceive+0x244>
 8003222:	8a7b      	ldrh	r3, [r7, #18]
 8003224:	2b01      	cmp	r3, #1
 8003226:	f040 80cf 	bne.w	80033c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d912      	bls.n	800325a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	881a      	ldrh	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003244:	1c9a      	adds	r2, r3, #2
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b02      	subs	r3, #2
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003258:	e0b6      	b.n	80033c8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	330c      	adds	r3, #12
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003280:	e0a2      	b.n	80033c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b02      	cmp	r3, #2
 800328e:	d134      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x314>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d02f      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x314>
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	2b01      	cmp	r3, #1
 800329e:	d12c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d912      	bls.n	80032d0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ae:	881a      	ldrh	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ba:	1c9a      	adds	r2, r3, #2
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b02      	subs	r3, #2
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032ce:	e012      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d148      	bne.n	800339a <HAL_SPI_TransmitReceive+0x3b4>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d042      	beq.n	800339a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d923      	bls.n	8003368 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	b292      	uxth	r2, r2
 800332c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	1c9a      	adds	r2, r3, #2
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b02      	subs	r3, #2
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d81f      	bhi.n	8003396 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	e016      	b.n	8003396 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f103 020c 	add.w	r2, r3, #12
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003396:	2301      	movs	r3, #1
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800339a:	f7fd fe35 	bl	8001008 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d803      	bhi.n	80033b2 <HAL_SPI_TransmitReceive+0x3cc>
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x3d2>
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80033c6:	e026      	b.n	8003416 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f47f af57 	bne.w	8003282 <HAL_SPI_TransmitReceive+0x29c>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f47f af50 	bne.w	8003282 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f9ba 	bl	8003760 <SPI_EndRxTxTransaction>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340c:	e003      	b.n	8003416 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800341e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003422:	4618      	mov	r0, r3
 8003424:	3728      	adds	r7, #40	@ 0x28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800343c:	f7fd fde4 	bl	8001008 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	4413      	add	r3, r2
 800344a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800344c:	f7fd fddc 	bl	8001008 <HAL_GetTick>
 8003450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003452:	4b39      	ldr	r3, [pc, #228]	@ (8003538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	015b      	lsls	r3, r3, #5
 8003458:	0d1b      	lsrs	r3, r3, #20
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	fb02 f303 	mul.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003462:	e054      	b.n	800350e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800346a:	d050      	beq.n	800350e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800346c:	f7fd fdcc 	bl	8001008 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	429a      	cmp	r2, r3
 800347a:	d902      	bls.n	8003482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d13d      	bne.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349a:	d111      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a4:	d004      	beq.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ae:	d107      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c8:	d10f      	bne.n	80034ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e017      	b.n	800352e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	3b01      	subs	r3, #1
 800350c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	429a      	cmp	r2, r3
 800352a:	d19b      	bne.n	8003464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000000 	.word	0x20000000

0800353c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	@ 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800354e:	f7fd fd5b 	bl	8001008 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	4413      	add	r3, r2
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800355e:	f7fd fd53 	bl	8001008 <HAL_GetTick>
 8003562:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800356c:	4b3d      	ldr	r3, [pc, #244]	@ (8003664 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00da      	lsls	r2, r3, #3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	0d1b      	lsrs	r3, r3, #20
 800357c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003584:	e060      	b.n	8003648 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800358c:	d107      	bne.n	800359e <SPI_WaitFifoStateUntilTimeout+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800359c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a4:	d050      	beq.n	8003648 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035a6:	f7fd fd2f 	bl	8001008 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d902      	bls.n	80035bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d13d      	bne.n	8003638 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035d4:	d111      	bne.n	80035fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035de:	d004      	beq.n	80035ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e8:	d107      	bne.n	80035fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003602:	d10f      	bne.n	8003624 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003622:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e010      	b.n	800365a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	3b01      	subs	r3, #1
 8003646:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d196      	bne.n	8003586 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3728      	adds	r7, #40	@ 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000000 	.word	0x20000000

08003668 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800367c:	d111      	bne.n	80036a2 <SPI_EndRxTransaction+0x3a>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003686:	d004      	beq.n	8003692 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003690:	d107      	bne.n	80036a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036aa:	d112      	bne.n	80036d2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	2180      	movs	r1, #128	@ 0x80
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff feb8 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d021      	beq.n	8003706 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e03d      	b.n	800374e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036d2:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <SPI_EndRxTransaction+0xf0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a21      	ldr	r2, [pc, #132]	@ (800375c <SPI_EndRxTransaction+0xf4>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	0d5b      	lsrs	r3, r3, #21
 80036de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fe:	2b80      	cmp	r3, #128	@ 0x80
 8003700:	d0f2      	beq.n	80036e8 <SPI_EndRxTransaction+0x80>
 8003702:	e000      	b.n	8003706 <SPI_EndRxTransaction+0x9e>
        break;
 8003704:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800370e:	d11d      	bne.n	800374c <SPI_EndRxTransaction+0xe4>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003718:	d004      	beq.n	8003724 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003722:	d113      	bne.n	800374c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff ff03 	bl	800353c <SPI_WaitFifoStateUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e000      	b.n	800374e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000
 800375c:	165e9f81 	.word	0x165e9f81

08003760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7ff fedf 	bl	800353c <SPI_WaitFifoStateUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e046      	b.n	8003822 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003794:	4b25      	ldr	r3, [pc, #148]	@ (800382c <SPI_EndRxTxTransaction+0xcc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a25      	ldr	r2, [pc, #148]	@ (8003830 <SPI_EndRxTxTransaction+0xd0>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0d5b      	lsrs	r3, r3, #21
 80037a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037a4:	fb02 f303 	mul.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037b2:	d112      	bne.n	80037da <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2200      	movs	r2, #0
 80037bc:	2180      	movs	r1, #128	@ 0x80
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff fe34 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e023      	b.n	8003822 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f0:	2b80      	cmp	r3, #128	@ 0x80
 80037f2:	d0f2      	beq.n	80037da <SPI_EndRxTxTransaction+0x7a>
 80037f4:	e000      	b.n	80037f8 <SPI_EndRxTxTransaction+0x98>
        break;
 80037f6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2200      	movs	r2, #0
 8003800:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff fe99 	bl	800353c <SPI_WaitFifoStateUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e000      	b.n	8003822 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000000 	.word	0x20000000
 8003830:	165e9f81 	.word	0x165e9f81

08003834 <memset>:
 8003834:	4402      	add	r2, r0
 8003836:	4603      	mov	r3, r0
 8003838:	4293      	cmp	r3, r2
 800383a:	d100      	bne.n	800383e <memset+0xa>
 800383c:	4770      	bx	lr
 800383e:	f803 1b01 	strb.w	r1, [r3], #1
 8003842:	e7f9      	b.n	8003838 <memset+0x4>

08003844 <__libc_init_array>:
 8003844:	b570      	push	{r4, r5, r6, lr}
 8003846:	4d0d      	ldr	r5, [pc, #52]	@ (800387c <__libc_init_array+0x38>)
 8003848:	4c0d      	ldr	r4, [pc, #52]	@ (8003880 <__libc_init_array+0x3c>)
 800384a:	1b64      	subs	r4, r4, r5
 800384c:	10a4      	asrs	r4, r4, #2
 800384e:	2600      	movs	r6, #0
 8003850:	42a6      	cmp	r6, r4
 8003852:	d109      	bne.n	8003868 <__libc_init_array+0x24>
 8003854:	4d0b      	ldr	r5, [pc, #44]	@ (8003884 <__libc_init_array+0x40>)
 8003856:	4c0c      	ldr	r4, [pc, #48]	@ (8003888 <__libc_init_array+0x44>)
 8003858:	f000 f818 	bl	800388c <_init>
 800385c:	1b64      	subs	r4, r4, r5
 800385e:	10a4      	asrs	r4, r4, #2
 8003860:	2600      	movs	r6, #0
 8003862:	42a6      	cmp	r6, r4
 8003864:	d105      	bne.n	8003872 <__libc_init_array+0x2e>
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	f855 3b04 	ldr.w	r3, [r5], #4
 800386c:	4798      	blx	r3
 800386e:	3601      	adds	r6, #1
 8003870:	e7ee      	b.n	8003850 <__libc_init_array+0xc>
 8003872:	f855 3b04 	ldr.w	r3, [r5], #4
 8003876:	4798      	blx	r3
 8003878:	3601      	adds	r6, #1
 800387a:	e7f2      	b.n	8003862 <__libc_init_array+0x1e>
 800387c:	080038c4 	.word	0x080038c4
 8003880:	080038c4 	.word	0x080038c4
 8003884:	080038c4 	.word	0x080038c4
 8003888:	080038c8 	.word	0x080038c8

0800388c <_init>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr

08003898 <_fini>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	bf00      	nop
 800389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389e:	bc08      	pop	{r3}
 80038a0:	469e      	mov	lr, r3
 80038a2:	4770      	bx	lr
