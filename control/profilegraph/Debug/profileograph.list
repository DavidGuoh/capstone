
profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f4  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080052ec  080052ec  000062ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005304  08005304  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005304  08005304  00006304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800530c  0800530c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800530c  0800530c  0000630c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005310  08005310  00006310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005314  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08005320  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08005320  0000717c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f20a  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002146  00000000  00000000  00016244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00018390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b71  00000000  00000000  00019250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bac  00000000  00000000  00019dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010652  00000000  00000000  0004196d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc7c1  00000000  00000000  00051fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f0c  00000000  00000000  0014e7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001526d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080052d4 	.word	0x080052d4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080052d4 	.word	0x080052d4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	@ 0x3f
 800053c:	d901      	bls.n	8000542 <writeRegister+0x1a>
		address = 63;
 800053e:	233f      	movs	r3, #63	@ 0x3f
 8000540:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000548:	b2db      	uxtb	r3, r3
 800054a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2120      	movs	r1, #32
 8000550:	480b      	ldr	r0, [pc, #44]	@ (8000580 <writeRegister+0x58>)
 8000552:	f002 f95b 	bl	800280c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000556:	1df9      	adds	r1, r7, #7
 8000558:	230a      	movs	r3, #10
 800055a:	2201      	movs	r2, #1
 800055c:	4809      	ldr	r0, [pc, #36]	@ (8000584 <writeRegister+0x5c>)
 800055e:	f002 fe7a 	bl	8003256 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8000562:	1db9      	adds	r1, r7, #6
 8000564:	230a      	movs	r3, #10
 8000566:	2201      	movs	r2, #1
 8000568:	4806      	ldr	r0, [pc, #24]	@ (8000584 <writeRegister+0x5c>)
 800056a:	f002 fe74 	bl	8003256 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2120      	movs	r1, #32
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <writeRegister+0x58>)
 8000574:	f002 f94a 	bl	800280c <HAL_GPIO_WritePin>
	

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020400 	.word	0x40020400
 8000584:	200000a4 	.word	0x200000a4

08000588 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b3f      	cmp	r3, #63	@ 0x3f
 800059c:	d901      	bls.n	80005a2 <readRegister+0x1a>
		address = 63;
 800059e:	233f      	movs	r3, #63	@ 0x3f
 80005a0:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d905      	bls.n	80005b4 <readRegister+0x2c>
		address |= 0x40;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e004      	b.n	80005be <readRegister+0x36>
		else	
		address &= ~(0x40);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2120      	movs	r1, #32
 80005cc:	480c      	ldr	r0, [pc, #48]	@ (8000600 <readRegister+0x78>)
 80005ce:	f002 f91d 	bl	800280c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005d2:	1df9      	adds	r1, r7, #7
 80005d4:	230a      	movs	r3, #10
 80005d6:	2201      	movs	r2, #1
 80005d8:	480a      	ldr	r0, [pc, #40]	@ (8000604 <readRegister+0x7c>)
 80005da:	f002 fe3c 	bl	8003256 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	230a      	movs	r3, #10
 80005e4:	6839      	ldr	r1, [r7, #0]
 80005e6:	4807      	ldr	r0, [pc, #28]	@ (8000604 <readRegister+0x7c>)
 80005e8:	f002 ffaa 	bl	8003540 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2120      	movs	r1, #32
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <readRegister+0x78>)
 80005f2:	f002 f90b 	bl	800280c <HAL_GPIO_WritePin>
	
	
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400
 8000604:	200000a4 	.word	0x200000a4

08000608 <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
static void adxlBW(ADXL_InitTypeDef * adxl)
		{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	4619      	mov	r1, r3
 8000618:	202c      	movs	r0, #44	@ 0x2c
 800061a:	f7ff ff85 	bl	8000528 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d11a      	bne.n	800065c <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	78db      	ldrb	r3, [r3, #3]
 8000632:	2b06      	cmp	r3, #6
 8000634:	d807      	bhi.n	8000646 <adxlBW+0x3e>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	78db      	ldrb	r3, [r3, #3]
 800063a:	2b0c      	cmp	r3, #12
 800063c:	d903      	bls.n	8000646 <adxlBW+0x3e>
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	3307      	adds	r3, #7
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e004      	b.n	8000650 <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	4413      	add	r3, r2
 800064e:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	4619      	mov	r1, r3
 8000654:	202c      	movs	r0, #44	@ 0x2c
 8000656:	f7ff ff67 	bl	8000528 <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 800065a:	e015      	b.n	8000688 <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	78db      	ldrb	r3, [r3, #3]
 8000660:	2b05      	cmp	r3, #5
 8000662:	d807      	bhi.n	8000674 <adxlBW+0x6c>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d903      	bls.n	8000674 <adxlBW+0x6c>
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3306      	adds	r3, #6
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	e004      	b.n	800067e <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	78da      	ldrb	r2, [r3, #3]
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	4413      	add	r3, r2
 800067c:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	4619      	mov	r1, r3
 8000682:	202c      	movs	r0, #44	@ 0x2c
 8000684:	f7ff ff50 	bl	8000528 <writeRegister>
		}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4619      	mov	r1, r3
 80006a0:	2031      	movs	r0, #49	@ 0x31
 80006a2:	f7ff ff41 	bl	8000528 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	019b      	lsls	r3, r3, #6
 80006ac:	b25a      	sxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	015b      	lsls	r3, r3, #5
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25a      	sxtb	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	795b      	ldrb	r3, [r3, #5]
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791a      	ldrb	r2, [r3, #4]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	4413      	add	r3, r2
 80006dc:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	4619      	mov	r1, r3
 80006e2:	2031      	movs	r0, #49	@ 0x31
 80006e4:	f7ff ff20 	bl	8000528 <writeRegister>
			}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2120      	movs	r1, #32
 80006fc:	484b      	ldr	r0, [pc, #300]	@ (800082c <ADXL_Init+0x13c>)
 80006fe:	f002 f885 	bl	800280c <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 8000702:	2005      	movs	r0, #5
 8000704:	f000 fe3e 	bl	8001384 <HAL_Delay>
	uint8_t testval = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID,&testval,1);
 800070c:	f107 030f 	add.w	r3, r7, #15
 8000710:	2201      	movs	r2, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ff37 	bl	8000588 <readRegister>
	if (testval != 0xE5) return ADXL_ERR;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2be5      	cmp	r3, #229	@ 0xe5
 800071e:	d001      	beq.n	8000724 <ADXL_Init+0x34>
 8000720:	2301      	movs	r3, #1
 8000722:	e07f      	b.n	8000824 <ADXL_Init+0x134>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff6f 	bl	8000608 <adxlBW>
	adxlFormat(adxl);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ffb0 	bl	8000690 <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d13f      	bne.n	80007b8 <ADXL_Init+0xc8>
			{
			switch (adxl->Range) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d846      	bhi.n	80007ce <ADXL_Init+0xde>
 8000740:	a201      	add	r2, pc, #4	@ (adr r2, 8000748 <ADXL_Init+0x58>)
 8000742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000746:	bf00      	nop
 8000748:	08000759 	.word	0x08000759
 800074c:	08000771 	.word	0x08000771
 8000750:	08000789 	.word	0x08000789
 8000754:	080007a1 	.word	0x080007a1
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 8000758:	4b35      	ldr	r3, [pc, #212]	@ (8000830 <ADXL_Init+0x140>)
 800075a:	4a36      	ldr	r2, [pc, #216]	@ (8000834 <ADXL_Init+0x144>)
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	4b34      	ldr	r3, [pc, #208]	@ (8000830 <ADXL_Init+0x140>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a35      	ldr	r2, [pc, #212]	@ (8000838 <ADXL_Init+0x148>)
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <ADXL_Init+0x148>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a34      	ldr	r2, [pc, #208]	@ (800083c <ADXL_Init+0x14c>)
 800076c:	6013      	str	r3, [r2, #0]
								break;
 800076e:	e02e      	b.n	80007ce <ADXL_Init+0xde>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 8000770:	4b2f      	ldr	r3, [pc, #188]	@ (8000830 <ADXL_Init+0x140>)
 8000772:	4a33      	ldr	r2, [pc, #204]	@ (8000840 <ADXL_Init+0x150>)
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4b2e      	ldr	r3, [pc, #184]	@ (8000830 <ADXL_Init+0x140>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a2f      	ldr	r2, [pc, #188]	@ (8000838 <ADXL_Init+0x148>)
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <ADXL_Init+0x148>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a2e      	ldr	r2, [pc, #184]	@ (800083c <ADXL_Init+0x14c>)
 8000784:	6013      	str	r3, [r2, #0]
								break;
 8000786:	e022      	b.n	80007ce <ADXL_Init+0xde>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8000788:	4b29      	ldr	r3, [pc, #164]	@ (8000830 <ADXL_Init+0x140>)
 800078a:	4a2e      	ldr	r2, [pc, #184]	@ (8000844 <ADXL_Init+0x154>)
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <ADXL_Init+0x140>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a29      	ldr	r2, [pc, #164]	@ (8000838 <ADXL_Init+0x148>)
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <ADXL_Init+0x148>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a28      	ldr	r2, [pc, #160]	@ (800083c <ADXL_Init+0x14c>)
 800079c:	6013      	str	r3, [r2, #0]
								break;
 800079e:	e016      	b.n	80007ce <ADXL_Init+0xde>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 80007a0:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <ADXL_Init+0x140>)
 80007a2:	4a29      	ldr	r2, [pc, #164]	@ (8000848 <ADXL_Init+0x158>)
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <ADXL_Init+0x140>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <ADXL_Init+0x148>)
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <ADXL_Init+0x148>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a22      	ldr	r2, [pc, #136]	@ (800083c <ADXL_Init+0x14c>)
 80007b4:	6013      	str	r3, [r2, #0]
								break;
 80007b6:	e00a      	b.n	80007ce <ADXL_Init+0xde>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <ADXL_Init+0x140>)
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <ADXL_Init+0x144>)
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <ADXL_Init+0x140>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000838 <ADXL_Init+0x148>)
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <ADXL_Init+0x148>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <ADXL_Init+0x14c>)
 80007cc:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80007ce:	f107 030e 	add.w	r3, r7, #14
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	202d      	movs	r0, #45	@ 0x2d
 80007d8:	f7ff fed6 	bl	8000588 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	79db      	ldrb	r3, [r3, #7]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d105      	bne.n	80007f0 <ADXL_Init+0x100>
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73bb      	strb	r3, [r7, #14]
 80007ee:	e004      	b.n	80007fa <ADXL_Init+0x10a>
 80007f0:	7bbb      	ldrb	r3, [r7, #14]
 80007f2:	f023 0310 	bic.w	r3, r3, #16
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	73bb      	strb	r3, [r7, #14]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7a1b      	ldrb	r3, [r3, #8]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d105      	bne.n	800080e <ADXL_Init+0x11e>
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73bb      	strb	r3, [r7, #14]
 800080c:	e004      	b.n	8000818 <ADXL_Init+0x128>
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	f023 0320 	bic.w	r3, r3, #32
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73bb      	strb	r3, [r7, #14]
			writeRegister(POWER_CTL,reg);
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	4619      	mov	r1, r3
 800081c:	202d      	movs	r0, #45	@ 0x2d
 800081e:	f7ff fe83 	bl	8000528 <writeRegister>
			
	return ADXL_OK;
 8000822:	2300      	movs	r3, #0
	
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40020400 	.word	0x40020400
 8000830:	20000030 	.word	0x20000030
 8000834:	3b808081 	.word	0x3b808081
 8000838:	2000002c 	.word	0x2000002c
 800083c:	20000028 	.word	0x20000028
 8000840:	3c010204 	.word	0x3c010204
 8000844:	3c820821 	.word	0x3c820821
 8000848:	3d042108 	.word	0x3d042108

0800084c <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
	{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};	
 8000858:	4a3a      	ldr	r2, [pc, #232]	@ (8000944 <ADXL_getAccel+0xf8>)
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000862:	6018      	str	r0, [r3, #0]
 8000864:	3304      	adds	r3, #4
 8000866:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2206      	movs	r2, #6
 800086e:	4619      	mov	r1, r3
 8000870:	2032      	movs	r0, #50	@ 0x32
 8000872:	f7ff fe89 	bl	8000588 <readRegister>
	
	
	if (outputType == OUTPUT_SIGNED)
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d11f      	bne.n	80008bc <ADXL_getAccel+0x70>
		{
		int16_t * acc = Data;	
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	613b      	str	r3, [r7, #16]
	  // Two's Complement
	  acc[0] = (int16_t) ((data[1]*256+data[0]));
 8000880:	7a7b      	ldrb	r3, [r7, #9]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	7a3a      	ldrb	r2, [r7, #8]
 8000888:	4413      	add	r3, r2
 800088a:	b29b      	uxth	r3, r3
 800088c:	b21a      	sxth	r2, r3
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	801a      	strh	r2, [r3, #0]
	  acc[1] = (int16_t) ((data[3]*256+data[2]));
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	7aba      	ldrb	r2, [r7, #10]
 800089a:	4413      	add	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	3302      	adds	r3, #2
 80008a2:	b212      	sxth	r2, r2
 80008a4:	801a      	strh	r2, [r3, #0]
	  acc[2] = (int16_t) ((data[5]*256+data[4]));
 80008a6:	7b7b      	ldrb	r3, [r7, #13]
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	7b3a      	ldrb	r2, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	3304      	adds	r3, #4
 80008b6:	b212      	sxth	r2, r2
 80008b8:	801a      	strh	r2, [r3, #0]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
						
						}
	}
 80008ba:	e03f      	b.n	800093c <ADXL_getAccel+0xf0>
	else if (outputType == OUTPUT_FLOAT)
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d13c      	bne.n	800093c <ADXL_getAccel+0xf0>
						float * fdata = Data;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	617b      	str	r3, [r7, #20]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 80008c6:	7a7b      	ldrb	r3, [r7, #9]
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	7a3a      	ldrb	r2, [r7, #8]
 80008ce:	4413      	add	r3, r2
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	ee07 3a90 	vmov	s15, r3
 80008d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <ADXL_getAccel+0xfc>)
 80008de:	edd3 7a00 	vldr	s15, [r3]
 80008e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	edc3 7a00 	vstr	s15, [r3]
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	7aba      	ldrb	r2, [r7, #10]
 80008f4:	4413      	add	r3, r2
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	ee07 3a90 	vmov	s15, r3
 80008fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <ADXL_getAccel+0x100>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3304      	adds	r3, #4
 800090c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000910:	edc3 7a00 	vstr	s15, [r3]
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 8000914:	7b7b      	ldrb	r3, [r7, #13]
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	b29b      	uxth	r3, r3
 800091a:	7b3a      	ldrb	r2, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	b21b      	sxth	r3, r3
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <ADXL_getAccel+0x104>)
 800092c:	edd3 7a00 	vldr	s15, [r3]
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3308      	adds	r3, #8
 8000934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000938:	edc3 7a00 	vstr	s15, [r3]
	}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	080052ec 	.word	0x080052ec
 8000948:	20000028 	.word	0x20000028
 800094c:	2000002c 	.word	0x2000002c
 8000950:	20000030 	.word	0x20000030

08000954 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 800095e:	f107 030f 	add.w	r3, r7, #15
 8000962:	2201      	movs	r2, #1
 8000964:	4619      	mov	r1, r3
 8000966:	202d      	movs	r0, #45	@ 0x2d
 8000968:	f7ff fe0e 	bl	8000588 <readRegister>
			switch (s) {
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <ADXL_Measure+0x24>
 8000972:	2b01      	cmp	r3, #1
 8000974:	d010      	beq.n	8000998 <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 8000976:	e01a      	b.n	80009ae <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	f023 0304 	bic.w	r3, r3, #4
 800097e:	b2db      	uxtb	r3, r3
 8000980:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	b2db      	uxtb	r3, r3
 800098a:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	4619      	mov	r1, r3
 8000990:	202d      	movs	r0, #45	@ 0x2d
 8000992:	f7ff fdc9 	bl	8000528 <writeRegister>
				break;
 8000996:	e00a      	b.n	80009ae <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	f023 0308 	bic.w	r3, r3, #8
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	4619      	mov	r1, r3
 80009a6:	202d      	movs	r0, #45	@ 0x2d
 80009a8:	f7ff fdbe 	bl	8000528 <writeRegister>
				break;				
 80009ac:	bf00      	nop
		}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <Knob_Rotation_Percent>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float Knob_Rotation_Percent(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;

	HAL_ADC_Start(&hadc1);
 80009be:	480f      	ldr	r0, [pc, #60]	@ (80009fc <Knob_Rotation_Percent+0x44>)
 80009c0:	f000 fd48 	bl	8001454 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 80009c4:	210a      	movs	r1, #10
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <Knob_Rotation_Percent+0x44>)
 80009c8:	f000 fe46 	bl	8001658 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 80009cc:	480b      	ldr	r0, [pc, #44]	@ (80009fc <Knob_Rotation_Percent+0x44>)
 80009ce:	f000 fece 	bl	800176e <HAL_ADC_GetValue>
 80009d2:	4603      	mov	r3, r0
 80009d4:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 80009d6:	4809      	ldr	r0, [pc, #36]	@ (80009fc <Knob_Rotation_Percent+0x44>)
 80009d8:	f000 fe0a 	bl	80015f0 <HAL_ADC_Stop>
	return (float)ADC_VAL/4095; //returns ADC percentage ranges from 0-1
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009e6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000a00 <Knob_Rotation_Percent+0x48>
 80009ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80009ee:	eef0 7a66 	vmov.f32	s15, s13
}
 80009f2:	eeb0 0a67 	vmov.f32	s0, s15
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000034 	.word	0x20000034
 8000a00:	457ff000 	.word	0x457ff000
 8000a04:	00000000 	.word	0x00000000

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0e:	f000 fc5c 	bl	80012ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f895 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f000 fa2d 	bl	8000e74 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a1a:	f000 f975 	bl	8000d08 <MX_SPI1_Init>
  MX_CAN1_Init();
 8000a1e:	f000 f93d 	bl	8000c9c <MX_CAN1_Init>
  MX_TIM2_Init();
 8000a22:	f000 f9af 	bl	8000d84 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000a26:	f000 f8e7 	bl	8000bf8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ADXL.SPIMode = SPIMODE_4WIRE;
 8000a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b20 <main+0x118>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
  ADXL.Rate = BWRATE_800;
 8000a30:	4b3b      	ldr	r3, [pc, #236]	@ (8000b20 <main+0x118>)
 8000a32:	220d      	movs	r2, #13
 8000a34:	70da      	strb	r2, [r3, #3]
  ADXL.Range = RANGE_2G;
 8000a36:	4b3a      	ldr	r3, [pc, #232]	@ (8000b20 <main+0x118>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
  ADXL.Resolution = RESOLUTION_FULL;
 8000a3c:	4b38      	ldr	r3, [pc, #224]	@ (8000b20 <main+0x118>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	715a      	strb	r2, [r3, #5]

//  if (ADXL_Init(&ADXL)!= ADXL_OK){
//	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
//	  Error_Handler();
//  }
  ADXL_Init(&ADXL);
 8000a42:	4837      	ldr	r0, [pc, #220]	@ (8000b20 <main+0x118>)
 8000a44:	f7ff fe54 	bl	80006f0 <ADXL_Init>
  ADXL_Measure(ON);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff ff83 	bl	8000954 <ADXL_Measure>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4834      	ldr	r0, [pc, #208]	@ (8000b24 <main+0x11c>)
 8000a52:	f003 fb8b 	bl	800416c <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  knobRotation_P = Knob_Rotation_Percent()*100;
 8000a56:	f7ff ffaf 	bl	80009b8 <Knob_Rotation_Percent>
 8000a5a:	eef0 7a40 	vmov.f32	s15, s0
 8000a5e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000b28 <main+0x120>
 8000a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a6a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a6e:	793b      	ldrb	r3, [r7, #4]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <main+0x124>)
 8000a74:	701a      	strb	r2, [r3, #0]
//			  HAL_Delay(5);
//		  }
//		  dirction = 0;
//	  }

	  htim2.Instance->CCR1 = knobRotation_P + 25;
 8000a76:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <main+0x124>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	f103 0219 	add.w	r2, r3, #25
 8000a7e:	4b29      	ldr	r3, [pc, #164]	@ (8000b24 <main+0x11c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	635a      	str	r2, [r3, #52]	@ 0x34


	  ADXL_getAccel(accelData, OUTPUT_SIGNED);
 8000a84:	2101      	movs	r1, #1
 8000a86:	482a      	ldr	r0, [pc, #168]	@ (8000b30 <main+0x128>)
 8000a88:	f7ff fee0 	bl	800084c <ADXL_getAccel>

	  xOut_g = accelData[0]/255.0*9.8;
 8000a8c:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <main+0x128>)
 8000a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a92:	ee07 3a90 	vmov	s15, r3
 8000a96:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a9a:	ed9f 5b1d 	vldr	d5, [pc, #116]	@ 8000b10 <main+0x108>
 8000a9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000aa2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8000b18 <main+0x110>
 8000aa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000aaa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aae:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <main+0x12c>)
 8000ab0:	edc3 7a00 	vstr	s15, [r3]
	  yOut_g = accelData[1]/255.0*9.8;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <main+0x128>)
 8000ab6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aba:	ee07 3a90 	vmov	s15, r3
 8000abe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ac2:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 8000b10 <main+0x108>
 8000ac6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000aca:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000b18 <main+0x110>
 8000ace:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ad2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ad6:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <main+0x130>)
 8000ad8:	edc3 7a00 	vstr	s15, [r3]
	  zOut_g = accelData[2]/255.0*9.8;
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <main+0x128>)
 8000ade:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000aea:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8000b10 <main+0x108>
 8000aee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000af2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000b18 <main+0x110>
 8000af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000afa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <main+0x134>)
 8000b00:	edc3 7a00 	vstr	s15, [r3]
//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(50);
 8000b04:	2032      	movs	r0, #50	@ 0x32
 8000b06:	f000 fc3d 	bl	8001384 <HAL_Delay>
	  knobRotation_P = Knob_Rotation_Percent()*100;
 8000b0a:	bf00      	nop
 8000b0c:	e7a3      	b.n	8000a56 <main+0x4e>
 8000b0e:	bf00      	nop
 8000b10:	00000000 	.word	0x00000000
 8000b14:	406fe000 	.word	0x406fe000
 8000b18:	9999999a 	.word	0x9999999a
 8000b1c:	40239999 	.word	0x40239999
 8000b20:	20000154 	.word	0x20000154
 8000b24:	20000108 	.word	0x20000108
 8000b28:	42c80000 	.word	0x42c80000
 8000b2c:	20000174 	.word	0x20000174
 8000b30:	20000160 	.word	0x20000160
 8000b34:	20000168 	.word	0x20000168
 8000b38:	2000016c 	.word	0x2000016c
 8000b3c:	20000170 	.word	0x20000170

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	@ 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2234      	movs	r2, #52	@ 0x34
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 fb94 	bl	800527c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <SystemClock_Config+0xb0>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <SystemClock_Config+0xb0>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <SystemClock_Config+0xb0>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <SystemClock_Config+0xb4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b84:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf4 <SystemClock_Config+0xb4>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <SystemClock_Config+0xb4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fe47 	bl	8002840 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000bb8:	f000 f9b4 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f8e0 	bl	8002d9c <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000be2:	f000 f99f 	bl	8000f24 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	@ 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c0c:	4a21      	ldr	r2, [pc, #132]	@ (8000c94 <MX_ADC1_Init+0x9c>)
 8000c0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c28:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c38:	4a17      	ldr	r2, [pc, #92]	@ (8000c98 <MX_ADC1_Init+0xa0>)
 8000c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c56:	480e      	ldr	r0, [pc, #56]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c58:	f000 fbb8 	bl	80013cc <HAL_ADC_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 f95f 	bl	8000f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c66:	230a      	movs	r3, #10
 8000c68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	@ (8000c90 <MX_ADC1_Init+0x98>)
 8000c78:	f000 fd86 	bl	8001788 <HAL_ADC_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c82:	f000 f94f 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000034 	.word	0x20000034
 8000c94:	40012000 	.word	0x40012000
 8000c98:	0f000001 	.word	0x0f000001

08000c9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000ca2:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <MX_CAN1_Init+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000cba:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000cbe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000cc2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000cc6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_CAN1_Init+0x64>)
 8000cee:	f000 ff9b 	bl	8001c28 <HAL_CAN_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cf8:	f000 f914 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000007c 	.word	0x2000007c
 8000d04:	40006400 	.word	0x40006400

08000d08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d80 <MX_SPI1_Init+0x78>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d22:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d3e:	2210      	movs	r2, #16
 8000d40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d56:	2207      	movs	r2, #7
 8000d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d68:	f002 f9ca 	bl	8003100 <HAL_SPI_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d72:	f000 f8d7 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000a4 	.word	0x200000a4
 8000d80:	40013000 	.word	0x40013000

08000d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	@ 0x38
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000db8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000dc0:	f240 123f 	movw	r2, #319	@ 0x13f
 8000dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000dce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b26      	ldr	r3, [pc, #152]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000de0:	4823      	ldr	r0, [pc, #140]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000de2:	f003 f90b 	bl	8003ffc <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000dec:	f000 f89a 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481c      	ldr	r0, [pc, #112]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000dfe:	f003 fccb 	bl	8004798 <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000e08:	f000 f88c 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e0c:	4818      	ldr	r0, [pc, #96]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000e0e:	f003 f94c 	bl	80040aa <HAL_TIM_PWM_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e18:	f000 f884 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4811      	ldr	r0, [pc, #68]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000e2c:	f004 f97a 	bl	8005124 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e36:	f000 f875 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3a:	2360      	movs	r3, #96	@ 0x60
 8000e3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000e52:	f003 fb8d 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e5c:	f000 f862 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e60:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <MX_TIM2_Init+0xec>)
 8000e62:	f000 f97d 	bl	8001160 <HAL_TIM_MspPostInit>

}
 8000e66:	bf00      	nop
 8000e68:	3738      	adds	r7, #56	@ 0x38
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000108 	.word	0x20000108

08000e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a23      	ldr	r2, [pc, #140]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a11      	ldr	r2, [pc, #68]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 8000ef0:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <MX_GPIO_Init+0xac>)
 8000ef2:	f001 fc8b 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI1_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin;
 8000ef6:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <MX_GPIO_Init+0xac>)
 8000f10:	f001 fad0 	bl	80024b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	@ 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020400 	.word	0x40020400

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a15      	ldr	r2, [pc, #84]	@ (8000fec <HAL_ADC_MspInit+0x74>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d123      	bne.n	8000fe2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_ADC_MspInit+0x78>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <HAL_ADC_MspInit+0x78>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa6:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_ADC_MspInit+0x78>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_ADC_MspInit+0x78>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <HAL_ADC_MspInit+0x78>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_ADC_MspInit+0x78>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <HAL_ADC_MspInit+0x7c>)
 8000fde:	f001 fa69 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	@ 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1b      	ldr	r2, [pc, #108]	@ (8001084 <HAL_CAN_MspInit+0x8c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12f      	bne.n	800107a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_CAN_MspInit+0x90>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	4a1a      	ldr	r2, [pc, #104]	@ (8001088 <HAL_CAN_MspInit+0x90>)
 8001020:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001024:	6413      	str	r3, [r2, #64]	@ 0x40
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_CAN_MspInit+0x90>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_CAN_MspInit+0x90>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <HAL_CAN_MspInit+0x90>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_CAN_MspInit+0x90>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800104a:	2303      	movs	r3, #3
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800105a:	2309      	movs	r3, #9
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <HAL_CAN_MspInit+0x94>)
 8001066:	f001 fa25 	bl	80024b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2014      	movs	r0, #20
 8001070:	f001 f9e9 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001074:	2014      	movs	r0, #20
 8001076:	f001 fa02 	bl	800247e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	@ 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40006400 	.word	0x40006400
 8001088:	40023800 	.word	0x40023800
 800108c:	40020c00 	.word	0x40020c00

08001090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a17      	ldr	r2, [pc, #92]	@ (800110c <HAL_SPI_MspInit+0x7c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d127      	bne.n	8001102 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	4a16      	ldr	r2, [pc, #88]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_SPI_MspInit+0x80>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010e2:	23e0      	movs	r3, #224	@ 0xe0
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f2:	2305      	movs	r3, #5
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <HAL_SPI_MspInit+0x84>)
 80010fe:	f001 f9d9 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40013000 	.word	0x40013000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001128:	d113      	bne.n	8001152 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <HAL_TIM_Base_MspInit+0x44>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <HAL_TIM_Base_MspInit+0x44>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HAL_TIM_Base_MspInit+0x44>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201c      	movs	r0, #28
 8001148:	f001 f97d 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800114c:	201c      	movs	r0, #28
 800114e:	f001 f996 	bl	800247e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001180:	d11b      	bne.n	80011ba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_TIM_MspPostInit+0x64>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a0f      	ldr	r2, [pc, #60]	@ (80011c4 <HAL_TIM_MspPostInit+0x64>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_TIM_MspPostInit+0x64>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800119a:	2301      	movs	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_TIM_MspPostInit+0x68>)
 80011b6:	f001 f97d 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <NMI_Handler+0x4>

080011d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <MemManage_Handler+0x4>

080011e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001222:	f000 f88f 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <CAN1_RX0_IRQHandler+0x10>)
 8001232:	f000 fdf4 	bl	8001e1e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000007c 	.word	0x2000007c

08001240 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <TIM2_IRQHandler+0x10>)
 8001246:	f003 f88b 	bl	8004360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000108 	.word	0x20000108

08001254 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	@ (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800127c:	f7ff ffea 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	@ (80012b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	@ (80012c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f003 fff1 	bl	800528c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fbad 	bl	8000a08 <main>
  bx  lr    
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012bc:	08005314 	.word	0x08005314
  ldr r2, =_sbss
 80012c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012c4:	2000017c 	.word	0x2000017c

080012c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>

080012ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ce:	2003      	movs	r0, #3
 80012d0:	f001 f8ae 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d4:	200f      	movs	r0, #15
 80012d6:	f000 f805 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012da:	f7ff fe29 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f8c9 	bl	800249a <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f001 f891 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	@ (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	20000008 	.word	0x20000008
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008
 8001368:	20000178 	.word	0x20000178

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000178 	.word	0x20000178

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008

080013cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e031      	b.n	8001446 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fdc4 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <HAL_ADC_Init+0x84>)
 8001410:	4013      	ands	r3, r2
 8001412:	f043 0202 	orr.w	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fb0a 	bl	8001a34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f023 0303 	bic.w	r3, r3, #3
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	@ 0x40
 8001436:	e001      	b.n	800143c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	ffffeefd 	.word	0xffffeefd

08001454 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_ADC_Start+0x1a>
 800146a:	2302      	movs	r3, #2
 800146c:	e0ad      	b.n	80015ca <HAL_ADC_Start+0x176>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d018      	beq.n	80014b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001494:	4b50      	ldr	r3, [pc, #320]	@ (80015d8 <HAL_ADC_Start+0x184>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a50      	ldr	r2, [pc, #320]	@ (80015dc <HAL_ADC_Start+0x188>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9a      	lsrs	r2, r3, #18
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d175      	bne.n	80015b0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014c8:	4b45      	ldr	r3, [pc, #276]	@ (80015e0 <HAL_ADC_Start+0x18c>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014fe:	d106      	bne.n	800150e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	f023 0206 	bic.w	r2, r3, #6
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	645a      	str	r2, [r3, #68]	@ 0x44
 800150c:	e002      	b.n	8001514 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001524:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001526:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <HAL_ADC_Start+0x190>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d143      	bne.n	80015c8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e03a      	b.n	80015c8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a24      	ldr	r2, [pc, #144]	@ (80015e8 <HAL_ADC_Start+0x194>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d10e      	bne.n	800157a <HAL_ADC_Start+0x126>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d107      	bne.n	800157a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001578:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <HAL_ADC_Start+0x190>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d120      	bne.n	80015c8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <HAL_ADC_Start+0x198>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d11b      	bne.n	80015c8 <HAL_ADC_Start+0x174>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d114      	bne.n	80015c8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	e00b      	b.n	80015c8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	f043 0210 	orr.w	r2, r3, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	fffff8fe 	.word	0xfffff8fe
 80015e4:	40012300 	.word	0x40012300
 80015e8:	40012000 	.word	0x40012000
 80015ec:	40012200 	.word	0x40012200

080015f0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_ADC_Stop+0x16>
 8001602:	2302      	movs	r3, #2
 8001604:	e01f      	b.n	8001646 <HAL_ADC_Stop+0x56>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d107      	bne.n	800163c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <HAL_ADC_Stop+0x64>)
 8001632:	4013      	ands	r3, r2
 8001634:	f043 0201 	orr.w	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	ffffeefe 	.word	0xffffeefe

08001658 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001674:	d113      	bne.n	800169e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001684:	d10b      	bne.n	800169e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f043 0220 	orr.w	r2, r3, #32
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e063      	b.n	8001766 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800169e:	f7ff fe65 	bl	800136c <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016a4:	e021      	b.n	80016ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d01d      	beq.n	80016ea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <HAL_ADC_PollForConversion+0x6c>
 80016b4:	f7ff fe5a 	bl	800136c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d212      	bcs.n	80016ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d00b      	beq.n	80016ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f043 0204 	orr.w	r2, r3, #4
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e03d      	b.n	8001766 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d1d6      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0212 	mvn.w	r2, #18
 8001700:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d123      	bne.n	8001764 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001720:	2b00      	cmp	r3, #0
 8001722:	d11f      	bne.n	8001764 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800173c:	2b00      	cmp	r3, #0
 800173e:	d111      	bne.n	8001764 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d105      	bne.n	8001764 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1c>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e136      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x28a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d93a      	bls.n	800182a <HAL_ADC_ConfigChannel+0xa2>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017bc:	d035      	beq.n	800182a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68d9      	ldr	r1, [r3, #12]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	3b1e      	subs	r3, #30
 80017d4:	2207      	movs	r2, #7
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	400a      	ands	r2, r1
 80017e2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a8d      	ldr	r2, [pc, #564]	@ (8001a20 <HAL_ADC_ConfigChannel+0x298>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10a      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68d9      	ldr	r1, [r3, #12]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	061a      	lsls	r2, r3, #24
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001802:	e035      	b.n	8001870 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68d9      	ldr	r1, [r3, #12]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	4618      	mov	r0, r3
 8001816:	4603      	mov	r3, r0
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4403      	add	r3, r0
 800181c:	3b1e      	subs	r3, #30
 800181e:	409a      	lsls	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001828:	e022      	b.n	8001870 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6919      	ldr	r1, [r3, #16]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	2207      	movs	r2, #7
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43da      	mvns	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	400a      	ands	r2, r1
 800184c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6919      	ldr	r1, [r3, #16]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	4603      	mov	r3, r0
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4403      	add	r3, r0
 8001866:	409a      	lsls	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b06      	cmp	r3, #6
 8001876:	d824      	bhi.n	80018c2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3b05      	subs	r3, #5
 800188a:	221f      	movs	r2, #31
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43da      	mvns	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	400a      	ands	r2, r1
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	3b05      	subs	r3, #5
 80018b4:	fa00 f203 	lsl.w	r2, r0, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	635a      	str	r2, [r3, #52]	@ 0x34
 80018c0:	e04c      	b.n	800195c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d824      	bhi.n	8001914 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3b23      	subs	r3, #35	@ 0x23
 80018dc:	221f      	movs	r2, #31
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	400a      	ands	r2, r1
 80018ea:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	3b23      	subs	r3, #35	@ 0x23
 8001906:	fa00 f203 	lsl.w	r2, r0, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	631a      	str	r2, [r3, #48]	@ 0x30
 8001912:	e023      	b.n	800195c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3b41      	subs	r3, #65	@ 0x41
 8001926:	221f      	movs	r2, #31
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43da      	mvns	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	400a      	ands	r2, r1
 8001934:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	3b41      	subs	r3, #65	@ 0x41
 8001950:	fa00 f203 	lsl.w	r2, r0, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a30      	ldr	r2, [pc, #192]	@ (8001a24 <HAL_ADC_ConfigChannel+0x29c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10a      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1f4>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800196e:	d105      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001970:	4b2d      	ldr	r3, [pc, #180]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a2c      	ldr	r2, [pc, #176]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 8001976:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800197a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a28      	ldr	r2, [pc, #160]	@ (8001a24 <HAL_ADC_ConfigChannel+0x29c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10f      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x21e>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b12      	cmp	r3, #18
 800198c:	d10b      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800198e:	4b26      	ldr	r3, [pc, #152]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a25      	ldr	r2, [pc, #148]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 8001994:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001998:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800199a:	4b23      	ldr	r3, [pc, #140]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4a22      	ldr	r2, [pc, #136]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80019a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <HAL_ADC_ConfigChannel+0x29c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d12b      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x280>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a20 <HAL_ADC_ConfigChannel+0x298>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d003      	beq.n	80019c2 <HAL_ADC_ConfigChannel+0x23a>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b11      	cmp	r3, #17
 80019c0:	d122      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a18      	ldr	r2, [pc, #96]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80019c8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80019cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019ce:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a15      	ldr	r2, [pc, #84]	@ (8001a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a10      	ldr	r2, [pc, #64]	@ (8001a20 <HAL_ADC_ConfigChannel+0x298>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d111      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_ADC_ConfigChannel+0x2a4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <HAL_ADC_ConfigChannel+0x2a8>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0c9a      	lsrs	r2, r3, #18
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019fa:	e002      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f9      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	10000012 	.word	0x10000012
 8001a24:	40012000 	.word	0x40012000
 8001a28:	40012300 	.word	0x40012300
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	431bde83 	.word	0x431bde83

08001a34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a3c:	4b78      	ldr	r3, [pc, #480]	@ (8001c20 <ADC_Init+0x1ec>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a77      	ldr	r2, [pc, #476]	@ (8001c20 <ADC_Init+0x1ec>)
 8001a42:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001a46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a48:	4b75      	ldr	r3, [pc, #468]	@ (8001c20 <ADC_Init+0x1ec>)
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4973      	ldr	r1, [pc, #460]	@ (8001c20 <ADC_Init+0x1ec>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	021a      	lsls	r2, r3, #8
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6899      	ldr	r1, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac2:	4a58      	ldr	r2, [pc, #352]	@ (8001c24 <ADC_Init+0x1f0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d022      	beq.n	8001b0e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6899      	ldr	r1, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6899      	ldr	r1, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	e00f      	b.n	8001b2e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0202 	bic.w	r2, r2, #2
 8001b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6899      	ldr	r1, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	005a      	lsls	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01b      	beq.n	8001b94 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	3b01      	subs	r3, #1
 8001b88:	035a      	lsls	r2, r3, #13
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	e007      	b.n	8001ba4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	051a      	lsls	r2, r3, #20
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001be6:	025a      	lsls	r2, r3, #9
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	029a      	lsls	r2, r3, #10
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	609a      	str	r2, [r3, #8]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40012300 	.word	0x40012300
 8001c24:	0f000001 	.word	0x0f000001

08001c28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0ed      	b.n	8001e16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff f9d6 	bl	8000ff8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c5c:	f7ff fb86 	bl	800136c <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c62:	e012      	b.n	8001c8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c64:	f7ff fb82 	bl	800136c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b0a      	cmp	r3, #10
 8001c70:	d90b      	bls.n	8001c8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2205      	movs	r2, #5
 8001c82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0c5      	b.n	8001e16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0e5      	beq.n	8001c64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0202 	bic.w	r2, r2, #2
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca8:	f7ff fb60 	bl	800136c <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cae:	e012      	b.n	8001cd6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb0:	f7ff fb5c 	bl	800136c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b0a      	cmp	r3, #10
 8001cbc:	d90b      	bls.n	8001cd6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2205      	movs	r2, #5
 8001cce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e09f      	b.n	8001e16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e5      	bne.n	8001cb0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7e1b      	ldrb	r3, [r3, #24]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d108      	bne.n	8001cfe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e007      	b.n	8001d0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7e5b      	ldrb	r3, [r3, #25]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d108      	bne.n	8001d28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e007      	b.n	8001d38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7e9b      	ldrb	r3, [r3, #26]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d108      	bne.n	8001d52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e007      	b.n	8001d62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0220 	bic.w	r2, r2, #32
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7edb      	ldrb	r3, [r3, #27]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d108      	bne.n	8001d7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0210 	bic.w	r2, r2, #16
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e007      	b.n	8001d8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0210 	orr.w	r2, r2, #16
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7f1b      	ldrb	r3, [r3, #28]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d108      	bne.n	8001da6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0208 	orr.w	r2, r2, #8
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e007      	b.n	8001db6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0208 	bic.w	r2, r2, #8
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7f5b      	ldrb	r3, [r3, #29]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d108      	bne.n	8001dd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0204 	orr.w	r2, r2, #4
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e007      	b.n	8001de0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0204 	bic.w	r2, r2, #4
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	ea42 0103 	orr.w	r1, r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b08a      	sub	sp, #40	@ 0x28
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d07c      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d023      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f983 	bl	800218c <HAL_CAN_TxMailbox0CompleteCallback>
 8001e86:	e016      	b.n	8001eb6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e9a:	e00c      	b.n	8001eb6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eae:	e002      	b.n	8001eb6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f989 	bl	80021c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d024      	beq.n	8001f0a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f963 	bl	80021a0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001eda:	e016      	b.n	8001f0a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eee:	e00c      	b.n	8001f0a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f02:	e002      	b.n	8001f0a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f969 	bl	80021dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d024      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f943 	bl	80021b4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f2e:	e016      	b.n	8001f5e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f42:	e00c      	b.n	8001f5e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f56:	e002      	b.n	8001f5e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f949 	bl	80021f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2210      	movs	r2, #16
 8001f80:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00b      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f93a 	bl	8002218 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f921 	bl	8002204 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00c      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00b      	beq.n	8002008 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2208      	movs	r2, #8
 8002000:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f91c 	bl	8002240 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f903 	bl	800222c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00b      	beq.n	8002048 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2210      	movs	r2, #16
 8002040:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f906 	bl	8002254 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f8ff 	bl	8002268 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d07b      	beq.n	800216c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d072      	beq.n	8002164 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d043      	beq.n	8002164 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03e      	beq.n	8002164 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ec:	2b60      	cmp	r3, #96	@ 0x60
 80020ee:	d02b      	beq.n	8002148 <HAL_CAN_IRQHandler+0x32a>
 80020f0:	2b60      	cmp	r3, #96	@ 0x60
 80020f2:	d82e      	bhi.n	8002152 <HAL_CAN_IRQHandler+0x334>
 80020f4:	2b50      	cmp	r3, #80	@ 0x50
 80020f6:	d022      	beq.n	800213e <HAL_CAN_IRQHandler+0x320>
 80020f8:	2b50      	cmp	r3, #80	@ 0x50
 80020fa:	d82a      	bhi.n	8002152 <HAL_CAN_IRQHandler+0x334>
 80020fc:	2b40      	cmp	r3, #64	@ 0x40
 80020fe:	d019      	beq.n	8002134 <HAL_CAN_IRQHandler+0x316>
 8002100:	2b40      	cmp	r3, #64	@ 0x40
 8002102:	d826      	bhi.n	8002152 <HAL_CAN_IRQHandler+0x334>
 8002104:	2b30      	cmp	r3, #48	@ 0x30
 8002106:	d010      	beq.n	800212a <HAL_CAN_IRQHandler+0x30c>
 8002108:	2b30      	cmp	r3, #48	@ 0x30
 800210a:	d822      	bhi.n	8002152 <HAL_CAN_IRQHandler+0x334>
 800210c:	2b10      	cmp	r3, #16
 800210e:	d002      	beq.n	8002116 <HAL_CAN_IRQHandler+0x2f8>
 8002110:	2b20      	cmp	r3, #32
 8002112:	d005      	beq.n	8002120 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002114:	e01d      	b.n	8002152 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800211e:	e019      	b.n	8002154 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	f043 0310 	orr.w	r3, r3, #16
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002128:	e014      	b.n	8002154 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f043 0320 	orr.w	r3, r3, #32
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002132:	e00f      	b.n	8002154 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800213c:	e00a      	b.n	8002154 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002146:	e005      	b.n	8002154 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002150:	e000      	b.n	8002154 <HAL_CAN_IRQHandler+0x336>
            break;
 8002152:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002162:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2204      	movs	r2, #4
 800216a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f87c 	bl	800227c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002184:	bf00      	nop
 8002186:	3728      	adds	r7, #40	@ 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x40>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x40>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00
 80022d4:	05fa0000 	.word	0x05fa0000

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4907      	ldr	r1, [pc, #28]	@ (800232c <__NVIC_EnableIRQ+0x38>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	@ (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	@ (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	@ 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	@ 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff8e 	bl	8002330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	@ (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff29 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff3e 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff8e 	bl	8002384 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5d 	bl	8002330 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff31 	bl	80022f4 <__NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffa2 	bl	80023ec <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e175      	b.n	80027c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f040 8164 	bne.w	80027ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_GPIO_Init+0x56>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d130      	bne.n	800256c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0201 	and.w	r2, r3, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b03      	cmp	r3, #3
 8002576:	d017      	beq.n	80025a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80be 	beq.w	80027ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	4b66      	ldr	r3, [pc, #408]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	4a65      	ldr	r2, [pc, #404]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002648:	6453      	str	r3, [r2, #68]	@ 0x44
 800264a:	4b63      	ldr	r3, [pc, #396]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002656:	4a61      	ldr	r2, [pc, #388]	@ (80027dc <HAL_GPIO_Init+0x328>)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	@ (80027e0 <HAL_GPIO_Init+0x32c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d037      	beq.n	80026f2 <HAL_GPIO_Init+0x23e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a57      	ldr	r2, [pc, #348]	@ (80027e4 <HAL_GPIO_Init+0x330>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d031      	beq.n	80026ee <HAL_GPIO_Init+0x23a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a56      	ldr	r2, [pc, #344]	@ (80027e8 <HAL_GPIO_Init+0x334>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02b      	beq.n	80026ea <HAL_GPIO_Init+0x236>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a55      	ldr	r2, [pc, #340]	@ (80027ec <HAL_GPIO_Init+0x338>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d025      	beq.n	80026e6 <HAL_GPIO_Init+0x232>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a54      	ldr	r2, [pc, #336]	@ (80027f0 <HAL_GPIO_Init+0x33c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <HAL_GPIO_Init+0x22e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a53      	ldr	r2, [pc, #332]	@ (80027f4 <HAL_GPIO_Init+0x340>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x22a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_GPIO_Init+0x344>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x226>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a51      	ldr	r2, [pc, #324]	@ (80027fc <HAL_GPIO_Init+0x348>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x222>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a50      	ldr	r2, [pc, #320]	@ (8002800 <HAL_GPIO_Init+0x34c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x21e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002804 <HAL_GPIO_Init+0x350>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x21a>
 80026ca:	2309      	movs	r3, #9
 80026cc:	e012      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ce:	230a      	movs	r3, #10
 80026d0:	e010      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026d2:	2308      	movs	r3, #8
 80026d4:	e00e      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026d6:	2307      	movs	r3, #7
 80026d8:	e00c      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026da:	2306      	movs	r3, #6
 80026dc:	e00a      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026de:	2305      	movs	r3, #5
 80026e0:	e008      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026f2:	2300      	movs	r3, #0
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f002 0203 	and.w	r2, r2, #3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4093      	lsls	r3, r2
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002704:	4935      	ldr	r1, [pc, #212]	@ (80027dc <HAL_GPIO_Init+0x328>)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b3d      	ldr	r3, [pc, #244]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002736:	4a34      	ldr	r2, [pc, #208]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800273c:	4b32      	ldr	r3, [pc, #200]	@ (8002808 <HAL_GPIO_Init+0x354>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002760:	4a29      	ldr	r2, [pc, #164]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002766:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278a:	4a1f      	ldr	r2, [pc, #124]	@ (8002808 <HAL_GPIO_Init+0x354>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b4:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <HAL_GPIO_Init+0x354>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	f67f ae86 	bls.w	80024d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3724      	adds	r7, #36	@ 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40021400 	.word	0x40021400
 80027f8:	40021800 	.word	0x40021800
 80027fc:	40021c00 	.word	0x40021c00
 8002800:	40022000 	.word	0x40022000
 8002804:	40022400 	.word	0x40022400
 8002808:	40013c00 	.word	0x40013c00

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
 8002818:	4613      	mov	r3, r2
 800281a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281c:	787b      	ldrb	r3, [r7, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002828:	e003      	b.n	8002832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	041a      	lsls	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	619a      	str	r2, [r3, #24]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002848:	2300      	movs	r3, #0
 800284a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e29b      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8087 	beq.w	8002972 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002864:	4b96      	ldr	r3, [pc, #600]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b04      	cmp	r3, #4
 800286e:	d00c      	beq.n	800288a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002870:	4b93      	ldr	r3, [pc, #588]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d112      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62>
 800287c:	4b90      	ldr	r3, [pc, #576]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002888:	d10b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d06c      	beq.n	8002970 <HAL_RCC_OscConfig+0x130>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d168      	bne.n	8002970 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e275      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x7a>
 80028ac:	4b84      	ldr	r3, [pc, #528]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a83      	ldr	r2, [pc, #524]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e02e      	b.n	8002918 <HAL_RCC_OscConfig+0xd8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x9c>
 80028c2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xd8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0xc0>
 80028e6:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a75      	ldr	r2, [pc, #468]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b73      	ldr	r3, [pc, #460]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a72      	ldr	r2, [pc, #456]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xd8>
 8002900:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6b      	ldr	r2, [pc, #428]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fd24 	bl	800136c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fd20 	bl	800136c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e229      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b61      	ldr	r3, [pc, #388]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xe8>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fd10 	bl	800136c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe fd0c 	bl	800136c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e215      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b57      	ldr	r3, [pc, #348]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x110>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d069      	beq.n	8002a52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800297e:	4b50      	ldr	r3, [pc, #320]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x190>
 8002996:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x17a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1e9      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	493d      	ldr	r1, [pc, #244]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e040      	b.n	8002a52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d023      	beq.n	8002a20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b39      	ldr	r3, [pc, #228]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a38      	ldr	r2, [pc, #224]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fcc2 	bl	800136c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe fcbe 	bl	800136c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1c7      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b30      	ldr	r3, [pc, #192]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4929      	ldr	r1, [pc, #164]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
 8002a1e:	e018      	b.n	8002a52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a20:	4b27      	ldr	r3, [pc, #156]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a26      	ldr	r2, [pc, #152]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fc9e 	bl	800136c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe fc9a 	bl	800136c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1a3      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d038      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d019      	beq.n	8002a9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b16      	ldr	r3, [pc, #88]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe fc7b 	bl	800136c <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fc77 	bl	800136c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e180      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x23a>
 8002a98:	e01a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9e:	4a08      	ldr	r2, [pc, #32]	@ (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fc61 	bl	800136c <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aae:	f7fe fc5d 	bl	800136c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d903      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e166      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
 8002ac0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	4b92      	ldr	r3, [pc, #584]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ee      	bne.n	8002aae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a4 	beq.w	8002c26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b8c      	ldr	r3, [pc, #560]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b89      	ldr	r3, [pc, #548]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	4a88      	ldr	r2, [pc, #544]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af6:	4b86      	ldr	r3, [pc, #536]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b06:	4b83      	ldr	r3, [pc, #524]	@ (8002d14 <HAL_RCC_OscConfig+0x4d4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d118      	bne.n	8002b44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b12:	4b80      	ldr	r3, [pc, #512]	@ (8002d14 <HAL_RCC_OscConfig+0x4d4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a7f      	ldr	r2, [pc, #508]	@ (8002d14 <HAL_RCC_OscConfig+0x4d4>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fc25 	bl	800136c <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b26:	f7fe fc21 	bl	800136c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b64      	cmp	r3, #100	@ 0x64
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e12a      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b38:	4b76      	ldr	r3, [pc, #472]	@ (8002d14 <HAL_RCC_OscConfig+0x4d4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x31a>
 8002b4c:	4b70      	ldr	r3, [pc, #448]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	4a6f      	ldr	r2, [pc, #444]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b58:	e02d      	b.n	8002bb6 <HAL_RCC_OscConfig+0x376>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x33c>
 8002b62:	4b6b      	ldr	r3, [pc, #428]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b66:	4a6a      	ldr	r2, [pc, #424]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6e:	4b68      	ldr	r3, [pc, #416]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	4a67      	ldr	r2, [pc, #412]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7a:	e01c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x376>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d10c      	bne.n	8002b9e <HAL_RCC_OscConfig+0x35e>
 8002b84:	4b62      	ldr	r3, [pc, #392]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b88:	4a61      	ldr	r2, [pc, #388]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b90:	4b5f      	ldr	r3, [pc, #380]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b94:	4a5e      	ldr	r2, [pc, #376]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b9c:	e00b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x376>
 8002b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002baa:	4b59      	ldr	r3, [pc, #356]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	4a58      	ldr	r2, [pc, #352]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d015      	beq.n	8002bea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fbd5 	bl	800136c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe fbd1 	bl	800136c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e0d8      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ee      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x386>
 8002be8:	e014      	b.n	8002c14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bea:	f7fe fbbf 	bl	800136c <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe fbbb 	bl	800136c <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e0c2      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	4b41      	ldr	r3, [pc, #260]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ee      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	4a3c      	ldr	r2, [pc, #240]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c24:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80ae 	beq.w	8002d8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c30:	4b37      	ldr	r3, [pc, #220]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d06d      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d14b      	bne.n	8002cdc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b32      	ldr	r3, [pc, #200]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a31      	ldr	r2, [pc, #196]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fb8c 	bl	800136c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fb88 	bl	800136c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e091      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	071b      	lsls	r3, r3, #28
 8002ca2:	491b      	ldr	r1, [pc, #108]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca8:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a18      	ldr	r2, [pc, #96]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fb5a 	bl	800136c <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fb56 	bl	800136c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e05f      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x47c>
 8002cda:	e057      	b.n	8002d8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fb40 	bl	800136c <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fb3c 	bl	800136c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e045      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	4b03      	ldr	r3, [pc, #12]	@ (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4b0>
 8002d0e:	e03d      	b.n	8002d8c <HAL_RCC_OscConfig+0x54c>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d18:	4b1f      	ldr	r3, [pc, #124]	@ (8002d98 <HAL_RCC_OscConfig+0x558>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d030      	beq.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d129      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d122      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d119      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	3b01      	subs	r3, #1
 8002d62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d10f      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800

08002d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d0      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b67      	ldr	r3, [pc, #412]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 020f 	bic.w	r2, r3, #15
 8002dca:	4965      	ldr	r1, [pc, #404]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a58      	ldr	r2, [pc, #352]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a52      	ldr	r2, [pc, #328]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d040      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b41      	ldr	r3, [pc, #260]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e073      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06b      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4936      	ldr	r1, [pc, #216]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe fa6c 	bl	800136c <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fa68 	bl	800136c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e053      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2d      	ldr	r3, [pc, #180]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b27      	ldr	r3, [pc, #156]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d210      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 020f 	bic.w	r2, r3, #15
 8002ed6:	4922      	ldr	r1, [pc, #136]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	@ (8002f68 <HAL_RCC_ClockConfig+0x1cc>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	@ (8002f6c <HAL_RCC_ClockConfig+0x1d0>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <HAL_RCC_ClockConfig+0x1d4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe f9c8 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	080052f4 	.word	0x080052f4
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f78:	b090      	sub	sp, #64	@ 0x40
 8002f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f80:	2300      	movs	r3, #0
 8002f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f84:	2300      	movs	r3, #0
 8002f86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8c:	4b59      	ldr	r3, [pc, #356]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	f200 80a1 	bhi.w	80030e0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x3a>
 8002fa6:	e09b      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b53      	ldr	r3, [pc, #332]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002faa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fac:	e09b      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fae:	4b53      	ldr	r3, [pc, #332]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fb2:	e098      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d028      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b4a      	ldr	r3, [pc, #296]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	623b      	str	r3, [r7, #32]
 8002fd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fe0:	fb03 f201 	mul.w	r2, r3, r1
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	fb00 f303 	mul.w	r3, r0, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	4a43      	ldr	r2, [pc, #268]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fee:	fba0 1202 	umull	r1, r2, r0, r2
 8002ff2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ffa:	4413      	add	r3, r2
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003000:	2200      	movs	r2, #0
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	61fa      	str	r2, [r7, #28]
 8003006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800300a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800300e:	f7fd f913 	bl	8000238 <__aeabi_uldivmod>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4613      	mov	r3, r2
 8003018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800301a:	e053      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301c:	4b35      	ldr	r3, [pc, #212]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	2200      	movs	r2, #0
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	617a      	str	r2, [r7, #20]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800302e:	f04f 0b00 	mov.w	fp, #0
 8003032:	4652      	mov	r2, sl
 8003034:	465b      	mov	r3, fp
 8003036:	f04f 0000 	mov.w	r0, #0
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	0159      	lsls	r1, r3, #5
 8003040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003044:	0150      	lsls	r0, r2, #5
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	ebb2 080a 	subs.w	r8, r2, sl
 800304e:	eb63 090b 	sbc.w	r9, r3, fp
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800305e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003062:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003066:	ebb2 0408 	subs.w	r4, r2, r8
 800306a:	eb63 0509 	sbc.w	r5, r3, r9
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	00eb      	lsls	r3, r5, #3
 8003078:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800307c:	00e2      	lsls	r2, r4, #3
 800307e:	4614      	mov	r4, r2
 8003080:	461d      	mov	r5, r3
 8003082:	eb14 030a 	adds.w	r3, r4, sl
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	eb45 030b 	adc.w	r3, r5, fp
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800309a:	4629      	mov	r1, r5
 800309c:	028b      	lsls	r3, r1, #10
 800309e:	4621      	mov	r1, r4
 80030a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a4:	4621      	mov	r1, r4
 80030a6:	028a      	lsls	r2, r1, #10
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ae:	2200      	movs	r2, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	60fa      	str	r2, [r7, #12]
 80030b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030b8:	f7fd f8be 	bl	8000238 <__aeabi_uldivmod>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4613      	mov	r3, r2
 80030c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030c4:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	3301      	adds	r3, #1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80030d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030de:	e002      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80030e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3740      	adds	r7, #64	@ 0x40
 80030ec:	46bd      	mov	sp, r7
 80030ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	00f42400 	.word	0x00f42400
 80030fc:	017d7840 	.word	0x017d7840

08003100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e09d      	b.n	800324e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003122:	d009      	beq.n	8003138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
 800312a:	e005      	b.n	8003138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd ff9c 	bl	8001090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800316e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003178:	d902      	bls.n	8003180 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e002      	b.n	8003186 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003184:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800318e:	d007      	beq.n	80031a0 <HAL_SPI_Init+0xa0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	ea42 0103 	orr.w	r1, r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	0c1b      	lsrs	r3, r3, #16
 80031fc:	f003 0204 	and.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800321c:	ea42 0103 	orr.w	r1, r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b088      	sub	sp, #32
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_SPI_Transmit+0x22>
 8003274:	2302      	movs	r3, #2
 8003276:	e15f      	b.n	8003538 <HAL_SPI_Transmit+0x2e2>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003280:	f7fe f874 	bl	800136c <HAL_GetTick>
 8003284:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d002      	beq.n	800329c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003296:	2302      	movs	r3, #2
 8003298:	77fb      	strb	r3, [r7, #31]
    goto error;
 800329a:	e148      	b.n	800352e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_SPI_Transmit+0x52>
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ac:	e13f      	b.n	800352e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032f8:	d10f      	bne.n	800331a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003308:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003318:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003324:	2b40      	cmp	r3, #64	@ 0x40
 8003326:	d007      	beq.n	8003338 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003340:	d94f      	bls.n	80033e2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_Transmit+0xfa>
 800334a:	8afb      	ldrh	r3, [r7, #22]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d142      	bne.n	80033d6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	881a      	ldrh	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003374:	e02f      	b.n	80033d6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d112      	bne.n	80033aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	881a      	ldrh	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033a8:	e015      	b.n	80033d6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033aa:	f7fd ffdf 	bl	800136c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d803      	bhi.n	80033c2 <HAL_SPI_Transmit+0x16c>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d102      	bne.n	80033c8 <HAL_SPI_Transmit+0x172>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80033d4:	e0ab      	b.n	800352e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ca      	bne.n	8003376 <HAL_SPI_Transmit+0x120>
 80033e0:	e080      	b.n	80034e4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_SPI_Transmit+0x19a>
 80033ea:	8afb      	ldrh	r3, [r7, #22]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d174      	bne.n	80034da <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d912      	bls.n	8003420 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340a:	1c9a      	adds	r2, r3, #2
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b02      	subs	r3, #2
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800341e:	e05c      	b.n	80034da <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	7812      	ldrb	r2, [r2, #0]
 800342c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003446:	e048      	b.n	80034da <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d12b      	bne.n	80034ae <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d912      	bls.n	8003486 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b02      	subs	r3, #2
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003484:	e029      	b.n	80034da <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	330c      	adds	r3, #12
 8003490:	7812      	ldrb	r2, [r2, #0]
 8003492:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034ac:	e015      	b.n	80034da <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ae:	f7fd ff5d 	bl	800136c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d803      	bhi.n	80034c6 <HAL_SPI_Transmit+0x270>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d102      	bne.n	80034cc <HAL_SPI_Transmit+0x276>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d106      	bne.n	80034da <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80034d8:	e029      	b.n	800352e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1b1      	bne.n	8003448 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fd1d 	bl	8003f28 <SPI_EndRxTxTransaction>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e003      	b.n	800352e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003536:	7ffb      	ldrb	r3, [r7, #31]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d002      	beq.n	8003566 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003560:	2302      	movs	r3, #2
 8003562:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003564:	e11a      	b.n	800379c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800356e:	d112      	bne.n	8003596 <HAL_SPI_Receive+0x56>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10e      	bne.n	8003596 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2204      	movs	r2, #4
 800357c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f90e 	bl	80037ae <HAL_SPI_TransmitReceive>
 8003592:	4603      	mov	r3, r0
 8003594:	e107      	b.n	80037a6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_SPI_Receive+0x64>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e100      	b.n	80037a6 <HAL_SPI_Receive+0x266>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ac:	f7fd fede 	bl	800136c <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_SPI_Receive+0x7e>
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035c2:	e0eb      	b.n	800379c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2204      	movs	r2, #4
 80035c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800360e:	d908      	bls.n	8003622 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	e007      	b.n	8003632 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003630:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800363a:	d10f      	bne.n	800365c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	d007      	beq.n	800367a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003682:	d86f      	bhi.n	8003764 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003684:	e034      	b.n	80036f0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d117      	bne.n	80036c4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f103 020c 	add.w	r2, r3, #12
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80036c2:	e015      	b.n	80036f0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c4:	f7fd fe52 	bl	800136c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d803      	bhi.n	80036dc <HAL_SPI_Receive+0x19c>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d102      	bne.n	80036e2 <HAL_SPI_Receive+0x1a2>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80036ee:	e055      	b.n	800379c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1c4      	bne.n	8003686 <HAL_SPI_Receive+0x146>
 80036fc:	e038      	b.n	8003770 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d115      	bne.n	8003738 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	b292      	uxth	r2, r2
 8003718:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	1c9a      	adds	r2, r3, #2
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003736:	e015      	b.n	8003764 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003738:	f7fd fe18 	bl	800136c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d803      	bhi.n	8003750 <HAL_SPI_Receive+0x210>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	d102      	bne.n	8003756 <HAL_SPI_Receive+0x216>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003762:	e01b      	b.n	800379c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1c6      	bne.n	80036fe <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	6839      	ldr	r1, [r7, #0]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fb5b 	bl	8003e30 <SPI_EndRxTransaction>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
 8003792:	e003      	b.n	800379c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b08a      	sub	sp, #40	@ 0x28
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037bc:	2301      	movs	r3, #1
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x26>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e20a      	b.n	8003bea <HAL_SPI_TransmitReceive+0x43c>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037dc:	f7fd fdc6 	bl	800136c <HAL_GetTick>
 80037e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037f0:	887b      	ldrh	r3, [r7, #2]
 80037f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80037f4:	887b      	ldrh	r3, [r7, #2]
 80037f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037f8:	7efb      	ldrb	r3, [r7, #27]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d00e      	beq.n	800381c <HAL_SPI_TransmitReceive+0x6e>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003804:	d106      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x66>
 800380e:	7efb      	ldrb	r3, [r7, #27]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d003      	beq.n	800381c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003814:	2302      	movs	r3, #2
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800381a:	e1e0      	b.n	8003bde <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_SPI_TransmitReceive+0x80>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_SPI_TransmitReceive+0x80>
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003834:	e1d3      	b.n	8003bde <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b04      	cmp	r3, #4
 8003840:	d003      	beq.n	800384a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2205      	movs	r2, #5
 8003846:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	887a      	ldrh	r2, [r7, #2]
 800385a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	887a      	ldrh	r2, [r7, #2]
 8003876:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800388c:	d802      	bhi.n	8003894 <HAL_SPI_TransmitReceive+0xe6>
 800388e:	8a3b      	ldrh	r3, [r7, #16]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d908      	bls.n	80038a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	e007      	b.n	80038b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c0:	2b40      	cmp	r3, #64	@ 0x40
 80038c2:	d007      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038dc:	f240 8081 	bls.w	80039e2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_SPI_TransmitReceive+0x140>
 80038e8:	8a7b      	ldrh	r3, [r7, #18]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d16d      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	881a      	ldrh	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fe:	1c9a      	adds	r2, r3, #2
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003912:	e05a      	b.n	80039ca <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d11b      	bne.n	800395a <HAL_SPI_TransmitReceive+0x1ac>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d016      	beq.n	800395a <HAL_SPI_TransmitReceive+0x1ac>
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	2b01      	cmp	r3, #1
 8003930:	d113      	bne.n	800395a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	881a      	ldrh	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d11c      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x1f4>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d016      	beq.n	80039a2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	b292      	uxth	r2, r2
 8003980:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800399e:	2301      	movs	r3, #1
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039a2:	f7fd fce3 	bl	800136c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d80b      	bhi.n	80039ca <HAL_SPI_TransmitReceive+0x21c>
 80039b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d007      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80039c8:	e109      	b.n	8003bde <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d19f      	bne.n	8003914 <HAL_SPI_TransmitReceive+0x166>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d199      	bne.n	8003914 <HAL_SPI_TransmitReceive+0x166>
 80039e0:	e0e3      	b.n	8003baa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x244>
 80039ea:	8a7b      	ldrh	r3, [r7, #18]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	f040 80cf 	bne.w	8003b90 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d912      	bls.n	8003a22 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	881a      	ldrh	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0c:	1c9a      	adds	r2, r3, #2
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b02      	subs	r3, #2
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a20:	e0b6      	b.n	8003b90 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	7812      	ldrb	r2, [r2, #0]
 8003a2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a48:	e0a2      	b.n	8003b90 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d134      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x314>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02f      	beq.n	8003ac2 <HAL_SPI_TransmitReceive+0x314>
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d12c      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d912      	bls.n	8003a98 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a76:	881a      	ldrh	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a82:	1c9a      	adds	r2, r3, #2
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b02      	subs	r3, #2
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a96:	e012      	b.n	8003abe <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	7812      	ldrb	r2, [r2, #0]
 8003aa4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d148      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x3b4>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d042      	beq.n	8003b62 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d923      	bls.n	8003b30 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	b292      	uxth	r2, r2
 8003af4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	1c9a      	adds	r2, r3, #2
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b02      	subs	r3, #2
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d81f      	bhi.n	8003b5e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	e016      	b.n	8003b5e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f103 020c 	add.w	r2, r3, #12
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	7812      	ldrb	r2, [r2, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b62:	f7fd fc03 	bl	800136c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d803      	bhi.n	8003b7a <HAL_SPI_TransmitReceive+0x3cc>
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d102      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x3d2>
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003b8e:	e026      	b.n	8003bde <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f47f af57 	bne.w	8003a4a <HAL_SPI_TransmitReceive+0x29c>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f af50 	bne.w	8003a4a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f9ba 	bl	8003f28 <SPI_EndRxTxTransaction>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd4:	e003      	b.n	8003bde <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003be6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3728      	adds	r7, #40	@ 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c04:	f7fd fbb2 	bl	800136c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c14:	f7fd fbaa 	bl	800136c <HAL_GetTick>
 8003c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	015b      	lsls	r3, r3, #5
 8003c20:	0d1b      	lsrs	r3, r3, #20
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c2a:	e054      	b.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d050      	beq.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c34:	f7fd fb9a 	bl	800136c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d902      	bls.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d13d      	bne.n	8003cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c62:	d111      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c6c:	d004      	beq.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c76:	d107      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c90:	d10f      	bne.n	8003cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e017      	b.n	8003cf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d19b      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000

08003d04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	@ 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d16:	f7fd fb29 	bl	800136c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d26:	f7fd fb21 	bl	800136c <HAL_GetTick>
 8003d2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d34:	4b3d      	ldr	r3, [pc, #244]	@ (8003e2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	00da      	lsls	r2, r3, #3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	0d1b      	lsrs	r3, r3, #20
 8003d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d4c:	e060      	b.n	8003e10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d54:	d107      	bne.n	8003d66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d050      	beq.n	8003e10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d6e:	f7fd fafd 	bl	800136c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d902      	bls.n	8003d84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d13d      	bne.n	8003e00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d9c:	d111      	bne.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da6:	d004      	beq.n	8003db2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db0:	d107      	bne.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dca:	d10f      	bne.n	8003dec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e010      	b.n	8003e22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d196      	bne.n	8003d4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3728      	adds	r7, #40	@ 0x28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000000 	.word	0x20000000

08003e30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e44:	d111      	bne.n	8003e6a <SPI_EndRxTransaction+0x3a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e4e:	d004      	beq.n	8003e5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e58:	d107      	bne.n	8003e6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e72:	d112      	bne.n	8003e9a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2180      	movs	r1, #128	@ 0x80
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff feb8 	bl	8003bf4 <SPI_WaitFlagStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d021      	beq.n	8003ece <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e03d      	b.n	8003f16 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e9a:	4b21      	ldr	r3, [pc, #132]	@ (8003f20 <SPI_EndRxTransaction+0xf0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <SPI_EndRxTransaction+0xf4>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	0d5b      	lsrs	r3, r3, #21
 8003ea6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec6:	2b80      	cmp	r3, #128	@ 0x80
 8003ec8:	d0f2      	beq.n	8003eb0 <SPI_EndRxTransaction+0x80>
 8003eca:	e000      	b.n	8003ece <SPI_EndRxTransaction+0x9e>
        break;
 8003ecc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ed6:	d11d      	bne.n	8003f14 <SPI_EndRxTransaction+0xe4>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee0:	d004      	beq.n	8003eec <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eea:	d113      	bne.n	8003f14 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff ff03 	bl	8003d04 <SPI_WaitFifoStateUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e000      	b.n	8003f16 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000000 	.word	0x20000000
 8003f24:	165e9f81 	.word	0x165e9f81

08003f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff fedf 	bl	8003d04 <SPI_WaitFifoStateUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e046      	b.n	8003fea <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <SPI_EndRxTxTransaction+0xcc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a25      	ldr	r2, [pc, #148]	@ (8003ff8 <SPI_EndRxTxTransaction+0xd0>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	0d5b      	lsrs	r3, r3, #21
 8003f68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f7a:	d112      	bne.n	8003fa2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	2180      	movs	r1, #128	@ 0x80
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f7ff fe34 	bl	8003bf4 <SPI_WaitFlagStateUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e023      	b.n	8003fea <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb8:	2b80      	cmp	r3, #128	@ 0x80
 8003fba:	d0f2      	beq.n	8003fa2 <SPI_EndRxTxTransaction+0x7a>
 8003fbc:	e000      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x98>
        break;
 8003fbe:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff fe99 	bl	8003d04 <SPI_WaitFifoStateUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e000      	b.n	8003fea <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	165e9f81 	.word	0x165e9f81

08003ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e049      	b.n	80040a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd f878 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 fca8 	bl	8004990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e049      	b.n	8004150 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f841 	bl	8004158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f000 fc51 	bl	8004990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_TIM_PWM_Start+0x24>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e03c      	b.n	800420a <HAL_TIM_PWM_Start+0x9e>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b04      	cmp	r3, #4
 8004194:	d109      	bne.n	80041aa <HAL_TIM_PWM_Start+0x3e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	e02f      	b.n	800420a <HAL_TIM_PWM_Start+0x9e>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d109      	bne.n	80041c4 <HAL_TIM_PWM_Start+0x58>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	e022      	b.n	800420a <HAL_TIM_PWM_Start+0x9e>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d109      	bne.n	80041de <HAL_TIM_PWM_Start+0x72>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	e015      	b.n	800420a <HAL_TIM_PWM_Start+0x9e>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d109      	bne.n	80041f8 <HAL_TIM_PWM_Start+0x8c>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e008      	b.n	800420a <HAL_TIM_PWM_Start+0x9e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e092      	b.n	8004338 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d104      	bne.n	8004222 <HAL_TIM_PWM_Start+0xb6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004220:	e023      	b.n	800426a <HAL_TIM_PWM_Start+0xfe>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b04      	cmp	r3, #4
 8004226:	d104      	bne.n	8004232 <HAL_TIM_PWM_Start+0xc6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004230:	e01b      	b.n	800426a <HAL_TIM_PWM_Start+0xfe>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d104      	bne.n	8004242 <HAL_TIM_PWM_Start+0xd6>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004240:	e013      	b.n	800426a <HAL_TIM_PWM_Start+0xfe>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d104      	bne.n	8004252 <HAL_TIM_PWM_Start+0xe6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004250:	e00b      	b.n	800426a <HAL_TIM_PWM_Start+0xfe>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b10      	cmp	r3, #16
 8004256:	d104      	bne.n	8004262 <HAL_TIM_PWM_Start+0xf6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004260:	e003      	b.n	800426a <HAL_TIM_PWM_Start+0xfe>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	6839      	ldr	r1, [r7, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 ff30 	bl	80050d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a30      	ldr	r2, [pc, #192]	@ (8004340 <HAL_TIM_PWM_Start+0x1d4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIM_PWM_Start+0x120>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2f      	ldr	r2, [pc, #188]	@ (8004344 <HAL_TIM_PWM_Start+0x1d8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d101      	bne.n	8004290 <HAL_TIM_PWM_Start+0x124>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_TIM_PWM_Start+0x126>
 8004290:	2300      	movs	r3, #0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d007      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a25      	ldr	r2, [pc, #148]	@ (8004340 <HAL_TIM_PWM_Start+0x1d4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d022      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x18a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b8:	d01d      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x18a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a22      	ldr	r2, [pc, #136]	@ (8004348 <HAL_TIM_PWM_Start+0x1dc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d018      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x18a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a20      	ldr	r2, [pc, #128]	@ (800434c <HAL_TIM_PWM_Start+0x1e0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x18a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004350 <HAL_TIM_PWM_Start+0x1e4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00e      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x18a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_TIM_PWM_Start+0x1d8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x18a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004354 <HAL_TIM_PWM_Start+0x1e8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x18a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a19      	ldr	r2, [pc, #100]	@ (8004358 <HAL_TIM_PWM_Start+0x1ec>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d115      	bne.n	8004322 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <HAL_TIM_PWM_Start+0x1f0>)
 80042fe:	4013      	ands	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b06      	cmp	r3, #6
 8004306:	d015      	beq.n	8004334 <HAL_TIM_PWM_Start+0x1c8>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430e:	d011      	beq.n	8004334 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004320:	e008      	b.n	8004334 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e000      	b.n	8004336 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40010000 	.word	0x40010000
 8004344:	40010400 	.word	0x40010400
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800
 8004350:	40000c00 	.word	0x40000c00
 8004354:	40014000 	.word	0x40014000
 8004358:	40001800 	.word	0x40001800
 800435c:	00010007 	.word	0x00010007

08004360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d020      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01b      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0202 	mvn.w	r2, #2
 8004394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fad2 	bl	8004954 <HAL_TIM_IC_CaptureCallback>
 80043b0:	e005      	b.n	80043be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fac4 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fad5 	bl	8004968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d020      	beq.n	8004410 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0204 	mvn.w	r2, #4
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 faac 	bl	8004954 <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa9e 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 faaf 	bl	8004968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d020      	beq.n	800445c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01b      	beq.n	800445c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0208 	mvn.w	r2, #8
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2204      	movs	r2, #4
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa86 	bl	8004954 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa78 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa89 	bl	8004968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d020      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01b      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0210 	mvn.w	r2, #16
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2208      	movs	r2, #8
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa60 	bl	8004954 <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa52 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fa63 	bl	8004968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0201 	mvn.w	r2, #1
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa30 	bl	800492c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00c      	beq.n	80044fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80044f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fead 	bl	8005254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00c      	beq.n	800451e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fea5 	bl	8005268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00c      	beq.n	8004542 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800453a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fa1d 	bl	800497c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00c      	beq.n	8004566 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f06f 0220 	mvn.w	r2, #32
 800455e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fe6d 	bl	8005240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800458a:	2302      	movs	r3, #2
 800458c:	e0ff      	b.n	800478e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b14      	cmp	r3, #20
 800459a:	f200 80f0 	bhi.w	800477e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800459e:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045f9 	.word	0x080045f9
 80045a8:	0800477f 	.word	0x0800477f
 80045ac:	0800477f 	.word	0x0800477f
 80045b0:	0800477f 	.word	0x0800477f
 80045b4:	08004639 	.word	0x08004639
 80045b8:	0800477f 	.word	0x0800477f
 80045bc:	0800477f 	.word	0x0800477f
 80045c0:	0800477f 	.word	0x0800477f
 80045c4:	0800467b 	.word	0x0800467b
 80045c8:	0800477f 	.word	0x0800477f
 80045cc:	0800477f 	.word	0x0800477f
 80045d0:	0800477f 	.word	0x0800477f
 80045d4:	080046bb 	.word	0x080046bb
 80045d8:	0800477f 	.word	0x0800477f
 80045dc:	0800477f 	.word	0x0800477f
 80045e0:	0800477f 	.word	0x0800477f
 80045e4:	080046fd 	.word	0x080046fd
 80045e8:	0800477f 	.word	0x0800477f
 80045ec:	0800477f 	.word	0x0800477f
 80045f0:	0800477f 	.word	0x0800477f
 80045f4:	0800473d 	.word	0x0800473d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fa72 	bl	8004ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0208 	orr.w	r2, r2, #8
 8004612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0204 	bic.w	r2, r2, #4
 8004622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6999      	ldr	r1, [r3, #24]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	619a      	str	r2, [r3, #24]
      break;
 8004636:	e0a5      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fac4 	bl	8004bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6999      	ldr	r1, [r3, #24]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	619a      	str	r2, [r3, #24]
      break;
 8004678:	e084      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fb1b 	bl	8004cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0208 	orr.w	r2, r2, #8
 8004694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0204 	bic.w	r2, r2, #4
 80046a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69d9      	ldr	r1, [r3, #28]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	61da      	str	r2, [r3, #28]
      break;
 80046b8:	e064      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fb71 	bl	8004da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69d9      	ldr	r1, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	021a      	lsls	r2, r3, #8
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	61da      	str	r2, [r3, #28]
      break;
 80046fa:	e043      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fba8 	bl	8004e58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0208 	orr.w	r2, r2, #8
 8004716:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800473a:	e023      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fbda 	bl	8004efc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004756:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800477c:	e002      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
      break;
 8004782:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop

08004798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIM_ConfigClockSource+0x1c>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e0b4      	b.n	800491e <HAL_TIM_ConfigClockSource+0x186>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	4b56      	ldr	r3, [pc, #344]	@ (8004928 <HAL_TIM_ConfigClockSource+0x190>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ec:	d03e      	beq.n	800486c <HAL_TIM_ConfigClockSource+0xd4>
 80047ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047f2:	f200 8087 	bhi.w	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047fa:	f000 8086 	beq.w	800490a <HAL_TIM_ConfigClockSource+0x172>
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004802:	d87f      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b70      	cmp	r3, #112	@ 0x70
 8004806:	d01a      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xa6>
 8004808:	2b70      	cmp	r3, #112	@ 0x70
 800480a:	d87b      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b60      	cmp	r3, #96	@ 0x60
 800480e:	d050      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004810:	2b60      	cmp	r3, #96	@ 0x60
 8004812:	d877      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b50      	cmp	r3, #80	@ 0x50
 8004816:	d03c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0xfa>
 8004818:	2b50      	cmp	r3, #80	@ 0x50
 800481a:	d873      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b40      	cmp	r3, #64	@ 0x40
 800481e:	d058      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	d86f      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b30      	cmp	r3, #48	@ 0x30
 8004826:	d064      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004828:	2b30      	cmp	r3, #48	@ 0x30
 800482a:	d86b      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b20      	cmp	r3, #32
 800482e:	d060      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004830:	2b20      	cmp	r3, #32
 8004832:	d867      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d05c      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004838:	2b10      	cmp	r3, #16
 800483a:	d05a      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 800483c:	e062      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800484e:	f000 fc23 	bl	8005098 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	609a      	str	r2, [r3, #8]
      break;
 800486a:	e04f      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800487c:	f000 fc0c 	bl	8005098 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800488e:	609a      	str	r2, [r3, #8]
      break;
 8004890:	e03c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800489e:	461a      	mov	r2, r3
 80048a0:	f000 fb80 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2150      	movs	r1, #80	@ 0x50
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fbd9 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 80048b0:	e02c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048be:	461a      	mov	r2, r3
 80048c0:	f000 fb9f 	bl	8005002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2160      	movs	r1, #96	@ 0x60
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fbc9 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 80048d0:	e01c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	461a      	mov	r2, r3
 80048e0:	f000 fb60 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2140      	movs	r1, #64	@ 0x40
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fbb9 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 80048f0:	e00c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f000 fbb0 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004902:	e003      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      break;
 8004908:	e000      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800490a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	fffeff88 	.word	0xfffeff88

0800492c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a46      	ldr	r2, [pc, #280]	@ (8004abc <TIM_Base_SetConfig+0x12c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ae:	d00f      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a43      	ldr	r2, [pc, #268]	@ (8004ac0 <TIM_Base_SetConfig+0x130>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00b      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a42      	ldr	r2, [pc, #264]	@ (8004ac4 <TIM_Base_SetConfig+0x134>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a41      	ldr	r2, [pc, #260]	@ (8004ac8 <TIM_Base_SetConfig+0x138>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a40      	ldr	r2, [pc, #256]	@ (8004acc <TIM_Base_SetConfig+0x13c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d108      	bne.n	80049e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a35      	ldr	r2, [pc, #212]	@ (8004abc <TIM_Base_SetConfig+0x12c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02b      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f0:	d027      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a32      	ldr	r2, [pc, #200]	@ (8004ac0 <TIM_Base_SetConfig+0x130>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d023      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a31      	ldr	r2, [pc, #196]	@ (8004ac4 <TIM_Base_SetConfig+0x134>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01f      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a30      	ldr	r2, [pc, #192]	@ (8004ac8 <TIM_Base_SetConfig+0x138>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01b      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004acc <TIM_Base_SetConfig+0x13c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d017      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad0 <TIM_Base_SetConfig+0x140>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad4 <TIM_Base_SetConfig+0x144>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00f      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad8 <TIM_Base_SetConfig+0x148>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00b      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004adc <TIM_Base_SetConfig+0x14c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d007      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae0 <TIM_Base_SetConfig+0x150>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a29      	ldr	r2, [pc, #164]	@ (8004ae4 <TIM_Base_SetConfig+0x154>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a10      	ldr	r2, [pc, #64]	@ (8004abc <TIM_Base_SetConfig+0x12c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a12      	ldr	r2, [pc, #72]	@ (8004acc <TIM_Base_SetConfig+0x13c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d103      	bne.n	8004a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d105      	bne.n	8004aae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	611a      	str	r2, [r3, #16]
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800
 8004ac8:	40000c00 	.word	0x40000c00
 8004acc:	40010400 	.word	0x40010400
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40014800 	.word	0x40014800
 8004adc:	40001800 	.word	0x40001800
 8004ae0:	40001c00 	.word	0x40001c00
 8004ae4:	40002000 	.word	0x40002000

08004ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f023 0201 	bic.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc0 <TIM_OC1_SetConfig+0xd8>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 0302 	bic.w	r3, r3, #2
 8004b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a21      	ldr	r2, [pc, #132]	@ (8004bc4 <TIM_OC1_SetConfig+0xdc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <TIM_OC1_SetConfig+0x64>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a20      	ldr	r2, [pc, #128]	@ (8004bc8 <TIM_OC1_SetConfig+0xe0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d10c      	bne.n	8004b66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0308 	bic.w	r3, r3, #8
 8004b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a16      	ldr	r2, [pc, #88]	@ (8004bc4 <TIM_OC1_SetConfig+0xdc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_OC1_SetConfig+0x8e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a15      	ldr	r2, [pc, #84]	@ (8004bc8 <TIM_OC1_SetConfig+0xe0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d111      	bne.n	8004b9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	621a      	str	r2, [r3, #32]
}
 8004bb4:	bf00      	nop
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	fffeff8f 	.word	0xfffeff8f
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40010400 	.word	0x40010400

08004bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f023 0210 	bic.w	r2, r3, #16
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8004cb0 <TIM_OC2_SetConfig+0xe4>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0320 	bic.w	r3, r3, #32
 8004c16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a23      	ldr	r2, [pc, #140]	@ (8004cb4 <TIM_OC2_SetConfig+0xe8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d003      	beq.n	8004c34 <TIM_OC2_SetConfig+0x68>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a22      	ldr	r2, [pc, #136]	@ (8004cb8 <TIM_OC2_SetConfig+0xec>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d10d      	bne.n	8004c50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a18      	ldr	r2, [pc, #96]	@ (8004cb4 <TIM_OC2_SetConfig+0xe8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_OC2_SetConfig+0x94>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	@ (8004cb8 <TIM_OC2_SetConfig+0xec>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d113      	bne.n	8004c88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	feff8fff 	.word	0xfeff8fff
 8004cb4:	40010000 	.word	0x40010000
 8004cb8:	40010400 	.word	0x40010400

08004cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8004d9c <TIM_OC3_SetConfig+0xe0>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <TIM_OC3_SetConfig+0xe4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_OC3_SetConfig+0x66>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a21      	ldr	r2, [pc, #132]	@ (8004da4 <TIM_OC3_SetConfig+0xe8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10d      	bne.n	8004d3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a17      	ldr	r2, [pc, #92]	@ (8004da0 <TIM_OC3_SetConfig+0xe4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_OC3_SetConfig+0x92>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a16      	ldr	r2, [pc, #88]	@ (8004da4 <TIM_OC3_SetConfig+0xe8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d113      	bne.n	8004d76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	621a      	str	r2, [r3, #32]
}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	fffeff8f 	.word	0xfffeff8f
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40010400 	.word	0x40010400

08004da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e4c <TIM_OC4_SetConfig+0xa4>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	031b      	lsls	r3, r3, #12
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a13      	ldr	r2, [pc, #76]	@ (8004e50 <TIM_OC4_SetConfig+0xa8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_OC4_SetConfig+0x68>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a12      	ldr	r2, [pc, #72]	@ (8004e54 <TIM_OC4_SetConfig+0xac>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d109      	bne.n	8004e24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	019b      	lsls	r3, r3, #6
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	feff8fff 	.word	0xfeff8fff
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40010400 	.word	0x40010400

08004e58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef0 <TIM_OC5_SetConfig+0x98>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a12      	ldr	r2, [pc, #72]	@ (8004ef4 <TIM_OC5_SetConfig+0x9c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <TIM_OC5_SetConfig+0x5e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a11      	ldr	r2, [pc, #68]	@ (8004ef8 <TIM_OC5_SetConfig+0xa0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d109      	bne.n	8004eca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	621a      	str	r2, [r3, #32]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	fffeff8f 	.word	0xfffeff8f
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40010400 	.word	0x40010400

08004efc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4b1c      	ldr	r3, [pc, #112]	@ (8004f98 <TIM_OC6_SetConfig+0x9c>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	051b      	lsls	r3, r3, #20
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a13      	ldr	r2, [pc, #76]	@ (8004f9c <TIM_OC6_SetConfig+0xa0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_OC6_SetConfig+0x60>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a12      	ldr	r2, [pc, #72]	@ (8004fa0 <TIM_OC6_SetConfig+0xa4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d109      	bne.n	8004f70 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	029b      	lsls	r3, r3, #10
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	feff8fff 	.word	0xfeff8fff
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40010400 	.word	0x40010400

08004fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 030a 	bic.w	r3, r3, #10
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005002:	b480      	push	{r7}
 8005004:	b087      	sub	sp, #28
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f023 0210 	bic.w	r2, r3, #16
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800502c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800503e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	f043 0307 	orr.w	r3, r3, #7
 8005084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	021a      	lsls	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2201      	movs	r2, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1a      	ldr	r2, [r3, #32]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	43db      	mvns	r3, r3
 80050fa:	401a      	ands	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005138:	2302      	movs	r3, #2
 800513a:	e06d      	b.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a30      	ldr	r2, [pc, #192]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2f      	ldr	r2, [pc, #188]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d108      	bne.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005176:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005188:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a20      	ldr	r2, [pc, #128]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d022      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ae:	d01d      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1d      	ldr	r2, [pc, #116]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d018      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1c      	ldr	r2, [pc, #112]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d013      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00e      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a15      	ldr	r2, [pc, #84]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d009      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a16      	ldr	r2, [pc, #88]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a15      	ldr	r2, [pc, #84]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10c      	bne.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40010000 	.word	0x40010000
 8005228:	40010400 	.word	0x40010400
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40014000 	.word	0x40014000
 800523c:	40001800 	.word	0x40001800

08005240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <memset>:
 800527c:	4402      	add	r2, r0
 800527e:	4603      	mov	r3, r0
 8005280:	4293      	cmp	r3, r2
 8005282:	d100      	bne.n	8005286 <memset+0xa>
 8005284:	4770      	bx	lr
 8005286:	f803 1b01 	strb.w	r1, [r3], #1
 800528a:	e7f9      	b.n	8005280 <memset+0x4>

0800528c <__libc_init_array>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4d0d      	ldr	r5, [pc, #52]	@ (80052c4 <__libc_init_array+0x38>)
 8005290:	4c0d      	ldr	r4, [pc, #52]	@ (80052c8 <__libc_init_array+0x3c>)
 8005292:	1b64      	subs	r4, r4, r5
 8005294:	10a4      	asrs	r4, r4, #2
 8005296:	2600      	movs	r6, #0
 8005298:	42a6      	cmp	r6, r4
 800529a:	d109      	bne.n	80052b0 <__libc_init_array+0x24>
 800529c:	4d0b      	ldr	r5, [pc, #44]	@ (80052cc <__libc_init_array+0x40>)
 800529e:	4c0c      	ldr	r4, [pc, #48]	@ (80052d0 <__libc_init_array+0x44>)
 80052a0:	f000 f818 	bl	80052d4 <_init>
 80052a4:	1b64      	subs	r4, r4, r5
 80052a6:	10a4      	asrs	r4, r4, #2
 80052a8:	2600      	movs	r6, #0
 80052aa:	42a6      	cmp	r6, r4
 80052ac:	d105      	bne.n	80052ba <__libc_init_array+0x2e>
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b4:	4798      	blx	r3
 80052b6:	3601      	adds	r6, #1
 80052b8:	e7ee      	b.n	8005298 <__libc_init_array+0xc>
 80052ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80052be:	4798      	blx	r3
 80052c0:	3601      	adds	r6, #1
 80052c2:	e7f2      	b.n	80052aa <__libc_init_array+0x1e>
 80052c4:	0800530c 	.word	0x0800530c
 80052c8:	0800530c 	.word	0x0800530c
 80052cc:	0800530c 	.word	0x0800530c
 80052d0:	08005310 	.word	0x08005310

080052d4 <_init>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr

080052e0 <_fini>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr
