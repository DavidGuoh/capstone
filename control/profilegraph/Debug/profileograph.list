
profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005874  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005a6c  08005a6c  00006a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a84  08005a84  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a84  08005a84  00006a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a8c  08005a8c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a8c  08005a8c  00006a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a90  08005a90  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a94  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08005aa0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08005aa0  000071c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4d5  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002154  00000000  00000000  0001650f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00018668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7d  00000000  00000000  00019538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bac  00000000  00000000  0001a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106d5  00000000  00000000  00041c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc7ed  00000000  00000000  00052336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014eb23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  0014eb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00152abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005a54 	.word	0x08005a54

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005a54 	.word	0x08005a54

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	@ 0x3f
 800053c:	d901      	bls.n	8000542 <writeRegister+0x1a>
		address = 63;
 800053e:	233f      	movs	r3, #63	@ 0x3f
 8000540:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
		address = (address << 1 & ~0x01);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	480c      	ldr	r0, [pc, #48]	@ (8000580 <writeRegister+0x58>)
 8000550:	f002 fd02 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000554:	1df9      	adds	r1, r7, #7
 8000556:	230a      	movs	r3, #10
 8000558:	2201      	movs	r2, #1
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <writeRegister+0x5c>)
 800055c:	f003 fa3b 	bl	80039d6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8000560:	1db9      	adds	r1, r7, #6
 8000562:	230a      	movs	r3, #10
 8000564:	2201      	movs	r2, #1
 8000566:	4807      	ldr	r0, [pc, #28]	@ (8000584 <writeRegister+0x5c>)
 8000568:	f003 fa35 	bl	80039d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2120      	movs	r1, #32
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <writeRegister+0x58>)
 8000572:	f002 fcf1 	bl	8002f58 <HAL_GPIO_WritePin>
	

}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020400 	.word	0x40020400
 8000584:	200000a4 	.word	0x200000a4

08000588 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b3f      	cmp	r3, #63	@ 0x3f
 800059c:	d901      	bls.n	80005a2 <readRegister+0x1a>
		address = 63;
 800059e:	233f      	movs	r3, #63	@ 0x3f
 80005a0:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d905      	bls.n	80005b4 <readRegister+0x2c>
		address |= 0x40;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e004      	b.n	80005be <readRegister+0x36>
		else	
		address &= ~(0x40);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
		address = (address << 1 | 0x01);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	480c      	ldr	r0, [pc, #48]	@ (8000604 <readRegister+0x7c>)
 80005d4:	f002 fcc0 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005d8:	1df9      	adds	r1, r7, #7
 80005da:	230a      	movs	r3, #10
 80005dc:	2201      	movs	r2, #1
 80005de:	480a      	ldr	r0, [pc, #40]	@ (8000608 <readRegister+0x80>)
 80005e0:	f003 f9f9 	bl	80039d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	230a      	movs	r3, #10
 80005ea:	6839      	ldr	r1, [r7, #0]
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <readRegister+0x80>)
 80005ee:	f003 fb67 	bl	8003cc0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	4803      	ldr	r0, [pc, #12]	@ (8000604 <readRegister+0x7c>)
 80005f8:	f002 fcae 	bl	8002f58 <HAL_GPIO_WritePin>
	
	
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400
 8000608:	200000a4 	.word	0x200000a4

0800060c <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
static void adxlBW(ADXL_InitTypeDef * adxl)
		{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	4619      	mov	r1, r3
 800061c:	202c      	movs	r0, #44	@ 0x2c
 800061e:	f7ff ff83 	bl	8000528 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	789b      	ldrb	r3, [r3, #2]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d11a      	bne.n	8000660 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	2b06      	cmp	r3, #6
 8000638:	d807      	bhi.n	800064a <adxlBW+0x3e>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	2b0c      	cmp	r3, #12
 8000640:	d903      	bls.n	800064a <adxlBW+0x3e>
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	3307      	adds	r3, #7
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	e004      	b.n	8000654 <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	78da      	ldrb	r2, [r3, #3]
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	4413      	add	r3, r2
 8000652:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	4619      	mov	r1, r3
 8000658:	202c      	movs	r0, #44	@ 0x2c
 800065a:	f7ff ff65 	bl	8000528 <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 800065e:	e015      	b.n	800068c <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	78db      	ldrb	r3, [r3, #3]
 8000664:	2b05      	cmp	r3, #5
 8000666:	d807      	bhi.n	8000678 <adxlBW+0x6c>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	78db      	ldrb	r3, [r3, #3]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d903      	bls.n	8000678 <adxlBW+0x6c>
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3306      	adds	r3, #6
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e004      	b.n	8000682 <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	78da      	ldrb	r2, [r3, #3]
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	4413      	add	r3, r2
 8000680:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	4619      	mov	r1, r3
 8000686:	202c      	movs	r0, #44	@ 0x2c
 8000688:	f7ff ff4e 	bl	8000528 <writeRegister>
		}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4619      	mov	r1, r3
 80006a4:	2031      	movs	r0, #49	@ 0x31
 80006a6:	f7ff ff3f 	bl	8000528 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	019b      	lsls	r3, r3, #6
 80006b0:	b25a      	sxtb	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	785b      	ldrb	r3, [r3, #1]
 80006b6:	015b      	lsls	r3, r3, #5
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25a      	sxtb	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	799b      	ldrb	r3, [r3, #6]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b25a      	sxtb	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	795b      	ldrb	r3, [r3, #5]
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791a      	ldrb	r2, [r3, #4]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	4413      	add	r3, r2
 80006e0:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4619      	mov	r1, r3
 80006e6:	2031      	movs	r0, #49	@ 0x31
 80006e8:	f7ff ff1e 	bl	8000528 <writeRegister>
			}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2120      	movs	r1, #32
 8000700:	484b      	ldr	r0, [pc, #300]	@ (8000830 <ADXL_Init+0x13c>)
 8000702:	f002 fc29 	bl	8002f58 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 8000706:	2005      	movs	r0, #5
 8000708:	f000 fea2 	bl	8001450 <HAL_Delay>
	uint8_t testval = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID_AD,&testval,1);
 8000710:	f107 030f 	add.w	r3, r7, #15
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff35 	bl	8000588 <readRegister>
	if (testval != 0xAD) return ADXL_ERR;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2bad      	cmp	r3, #173	@ 0xad
 8000722:	d001      	beq.n	8000728 <ADXL_Init+0x34>
 8000724:	2301      	movs	r3, #1
 8000726:	e07f      	b.n	8000828 <ADXL_Init+0x134>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff6f 	bl	800060c <adxlBW>
	adxlFormat(adxl);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ffb0 	bl	8000694 <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d13f      	bne.n	80007bc <ADXL_Init+0xc8>
			{
			switch (adxl->Range) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d846      	bhi.n	80007d2 <ADXL_Init+0xde>
 8000744:	a201      	add	r2, pc, #4	@ (adr r2, 800074c <ADXL_Init+0x58>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	0800075d 	.word	0x0800075d
 8000750:	08000775 	.word	0x08000775
 8000754:	0800078d 	.word	0x0800078d
 8000758:	080007a5 	.word	0x080007a5
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 800075c:	4b35      	ldr	r3, [pc, #212]	@ (8000834 <ADXL_Init+0x140>)
 800075e:	4a36      	ldr	r2, [pc, #216]	@ (8000838 <ADXL_Init+0x144>)
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	4b34      	ldr	r3, [pc, #208]	@ (8000834 <ADXL_Init+0x140>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a35      	ldr	r2, [pc, #212]	@ (800083c <ADXL_Init+0x148>)
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	4b34      	ldr	r3, [pc, #208]	@ (800083c <ADXL_Init+0x148>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a34      	ldr	r2, [pc, #208]	@ (8000840 <ADXL_Init+0x14c>)
 8000770:	6013      	str	r3, [r2, #0]
								break;
 8000772:	e02e      	b.n	80007d2 <ADXL_Init+0xde>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 8000774:	4b2f      	ldr	r3, [pc, #188]	@ (8000834 <ADXL_Init+0x140>)
 8000776:	4a33      	ldr	r2, [pc, #204]	@ (8000844 <ADXL_Init+0x150>)
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	4b2e      	ldr	r3, [pc, #184]	@ (8000834 <ADXL_Init+0x140>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a2f      	ldr	r2, [pc, #188]	@ (800083c <ADXL_Init+0x148>)
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	4b2e      	ldr	r3, [pc, #184]	@ (800083c <ADXL_Init+0x148>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a2e      	ldr	r2, [pc, #184]	@ (8000840 <ADXL_Init+0x14c>)
 8000788:	6013      	str	r3, [r2, #0]
								break;
 800078a:	e022      	b.n	80007d2 <ADXL_Init+0xde>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 800078c:	4b29      	ldr	r3, [pc, #164]	@ (8000834 <ADXL_Init+0x140>)
 800078e:	4a2e      	ldr	r2, [pc, #184]	@ (8000848 <ADXL_Init+0x154>)
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <ADXL_Init+0x140>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a29      	ldr	r2, [pc, #164]	@ (800083c <ADXL_Init+0x148>)
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b28      	ldr	r3, [pc, #160]	@ (800083c <ADXL_Init+0x148>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a28      	ldr	r2, [pc, #160]	@ (8000840 <ADXL_Init+0x14c>)
 80007a0:	6013      	str	r3, [r2, #0]
								break;
 80007a2:	e016      	b.n	80007d2 <ADXL_Init+0xde>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 80007a4:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <ADXL_Init+0x140>)
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <ADXL_Init+0x158>)
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <ADXL_Init+0x140>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a23      	ldr	r2, [pc, #140]	@ (800083c <ADXL_Init+0x148>)
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <ADXL_Init+0x148>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a22      	ldr	r2, [pc, #136]	@ (8000840 <ADXL_Init+0x14c>)
 80007b8:	6013      	str	r3, [r2, #0]
								break;
 80007ba:	e00a      	b.n	80007d2 <ADXL_Init+0xde>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <ADXL_Init+0x140>)
 80007be:	4a1e      	ldr	r2, [pc, #120]	@ (8000838 <ADXL_Init+0x144>)
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <ADXL_Init+0x140>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <ADXL_Init+0x148>)
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <ADXL_Init+0x148>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <ADXL_Init+0x14c>)
 80007d0:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80007d2:	f107 030e 	add.w	r3, r7, #14
 80007d6:	2201      	movs	r2, #1
 80007d8:	4619      	mov	r1, r3
 80007da:	202d      	movs	r0, #45	@ 0x2d
 80007dc:	f7ff fed4 	bl	8000588 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	79db      	ldrb	r3, [r3, #7]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d105      	bne.n	80007f4 <ADXL_Init+0x100>
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	73bb      	strb	r3, [r7, #14]
 80007f2:	e004      	b.n	80007fe <ADXL_Init+0x10a>
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	f023 0310 	bic.w	r3, r3, #16
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	73bb      	strb	r3, [r7, #14]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7a1b      	ldrb	r3, [r3, #8]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d105      	bne.n	8000812 <ADXL_Init+0x11e>
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	b2db      	uxtb	r3, r3
 800080e:	73bb      	strb	r3, [r7, #14]
 8000810:	e004      	b.n	800081c <ADXL_Init+0x128>
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	f023 0320 	bic.w	r3, r3, #32
 8000818:	b2db      	uxtb	r3, r3
 800081a:	73bb      	strb	r3, [r7, #14]
			writeRegister(POWER_CTL,reg);
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	4619      	mov	r1, r3
 8000820:	202d      	movs	r0, #45	@ 0x2d
 8000822:	f7ff fe81 	bl	8000528 <writeRegister>
			
	return ADXL_OK;
 8000826:	2300      	movs	r3, #0
	
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40020400 	.word	0x40020400
 8000834:	20000030 	.word	0x20000030
 8000838:	3b808081 	.word	0x3b808081
 800083c:	2000002c 	.word	0x2000002c
 8000840:	20000028 	.word	0x20000028
 8000844:	3c010204 	.word	0x3c010204
 8000848:	3c820821 	.word	0x3c820821
 800084c:	3d042108 	.word	0x3d042108

08000850 <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
	{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};	
 800085c:	4a3a      	ldr	r2, [pc, #232]	@ (8000948 <ADXL_getAccel+0xf8>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000866:	6018      	str	r0, [r3, #0]
 8000868:	3304      	adds	r3, #4
 800086a:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2206      	movs	r2, #6
 8000872:	4619      	mov	r1, r3
 8000874:	2032      	movs	r0, #50	@ 0x32
 8000876:	f7ff fe87 	bl	8000588 <readRegister>
	
	
	if (outputType == OUTPUT_SIGNED)
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d11f      	bne.n	80008c0 <ADXL_getAccel+0x70>
		{
		int16_t * acc = Data;	
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	613b      	str	r3, [r7, #16]
	  // Two's Complement
	  acc[0] = (int16_t) ((data[1]*256+data[0]));
 8000884:	7a7b      	ldrb	r3, [r7, #9]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	b29b      	uxth	r3, r3
 800088a:	7a3a      	ldrb	r2, [r7, #8]
 800088c:	4413      	add	r3, r2
 800088e:	b29b      	uxth	r3, r3
 8000890:	b21a      	sxth	r2, r3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	801a      	strh	r2, [r3, #0]
	  acc[1] = (int16_t) ((data[3]*256+data[2]));
 8000896:	7afb      	ldrb	r3, [r7, #11]
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b29b      	uxth	r3, r3
 800089c:	7aba      	ldrb	r2, [r7, #10]
 800089e:	4413      	add	r3, r2
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	3302      	adds	r3, #2
 80008a6:	b212      	sxth	r2, r2
 80008a8:	801a      	strh	r2, [r3, #0]
	  acc[2] = (int16_t) ((data[5]*256+data[4]));
 80008aa:	7b7b      	ldrb	r3, [r7, #13]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	7b3a      	ldrb	r2, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	3304      	adds	r3, #4
 80008ba:	b212      	sxth	r2, r2
 80008bc:	801a      	strh	r2, [r3, #0]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
						
						}
	}
 80008be:	e03f      	b.n	8000940 <ADXL_getAccel+0xf0>
	else if (outputType == OUTPUT_FLOAT)
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d13c      	bne.n	8000940 <ADXL_getAccel+0xf0>
						float * fdata = Data;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	617b      	str	r3, [r7, #20]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 80008ca:	7a7b      	ldrb	r3, [r7, #9]
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	7a3a      	ldrb	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008e0:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <ADXL_getAccel+0xfc>)
 80008e2:	edd3 7a00 	vldr	s15, [r3]
 80008e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	edc3 7a00 	vstr	s15, [r3]
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 80008f0:	7afb      	ldrb	r3, [r7, #11]
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	7aba      	ldrb	r2, [r7, #10]
 80008f8:	4413      	add	r3, r2
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	ee07 3a90 	vmov	s15, r3
 8000902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000906:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <ADXL_getAccel+0x100>)
 8000908:	edd3 7a00 	vldr	s15, [r3]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	3304      	adds	r3, #4
 8000910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000914:	edc3 7a00 	vstr	s15, [r3]
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 8000918:	7b7b      	ldrb	r3, [r7, #13]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b29b      	uxth	r3, r3
 800091e:	7b3a      	ldrb	r2, [r7, #12]
 8000920:	4413      	add	r3, r2
 8000922:	b29b      	uxth	r3, r3
 8000924:	b21b      	sxth	r3, r3
 8000926:	ee07 3a90 	vmov	s15, r3
 800092a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <ADXL_getAccel+0x104>)
 8000930:	edd3 7a00 	vldr	s15, [r3]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3308      	adds	r3, #8
 8000938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800093c:	edc3 7a00 	vstr	s15, [r3]
	}
 8000940:	bf00      	nop
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	08005a6c 	.word	0x08005a6c
 800094c:	20000028 	.word	0x20000028
 8000950:	2000002c 	.word	0x2000002c
 8000954:	20000030 	.word	0x20000030

08000958 <Knob_Rotation_Percent>:
static void CAN_Config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float Knob_Rotation_Percent(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;

	HAL_ADC_Start(&hadc1);
 800095e:	480f      	ldr	r0, [pc, #60]	@ (800099c <Knob_Rotation_Percent+0x44>)
 8000960:	f000 fdde 	bl	8001520 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8000964:	210a      	movs	r1, #10
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <Knob_Rotation_Percent+0x44>)
 8000968:	f000 fedc 	bl	8001724 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 800096c:	480b      	ldr	r0, [pc, #44]	@ (800099c <Knob_Rotation_Percent+0x44>)
 800096e:	f000 ff64 	bl	800183a <HAL_ADC_GetValue>
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8000976:	4809      	ldr	r0, [pc, #36]	@ (800099c <Knob_Rotation_Percent+0x44>)
 8000978:	f000 fea0 	bl	80016bc <HAL_ADC_Stop>
	return (float)ADC_VAL/4095; //returns ADC percentage ranges from 0-1
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000986:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80009a0 <Knob_Rotation_Percent+0x48>
 800098a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800098e:	eef0 7a66 	vmov.f32	s15, s13
}
 8000992:	eeb0 0a67 	vmov.f32	s0, s15
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000034 	.word	0x20000034
 80009a0:	457ff000 	.word	0x457ff000
 80009a4:	00000000 	.word	0x00000000

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f000 fcf2 	bl	8001396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f8d3 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 fa6b 	bl	8000e90 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009ba:	f000 f9b3 	bl	8000d24 <MX_SPI1_Init>
  MX_CAN1_Init();
 80009be:	f000 f97b 	bl	8000cb8 <MX_CAN1_Init>
  MX_TIM2_Init();
 80009c2:	f000 f9ed 	bl	8000da0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80009c6:	f000 f925 	bl	8000c14 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  CAN_Config();
 80009ca:	f000 fab9 	bl	8000f40 <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80009ce:	2102      	movs	r1, #2
 80009d0:	4855      	ldr	r0, [pc, #340]	@ (8000b28 <main+0x180>)
 80009d2:	f001 fdad 	bl	8002530 <HAL_CAN_ActivateNotification>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <main+0x38>
	  Error_Handler();
 80009dc:	f000 fb08 	bl	8000ff0 <Error_Handler>
  }

  ADXL.SPIMode = SPIMODE_4WIRE;
 80009e0:	4b52      	ldr	r3, [pc, #328]	@ (8000b2c <main+0x184>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
  ADXL.Rate = BWRATE_800;
 80009e6:	4b51      	ldr	r3, [pc, #324]	@ (8000b2c <main+0x184>)
 80009e8:	220d      	movs	r2, #13
 80009ea:	70da      	strb	r2, [r3, #3]
  ADXL.Range = RANGE_2G;
 80009ec:	4b4f      	ldr	r3, [pc, #316]	@ (8000b2c <main+0x184>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	711a      	strb	r2, [r3, #4]
  ADXL.Resolution = RESOLUTION_FULL;
 80009f2:	4b4e      	ldr	r3, [pc, #312]	@ (8000b2c <main+0x184>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	715a      	strb	r2, [r3, #5]

  TxHeader.StdId = 0x123;
 80009f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b30 <main+0x188>)
 80009fa:	f240 1223 	movw	r2, #291	@ 0x123
 80009fe:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 8;
 8000a00:	4b4b      	ldr	r3, [pc, #300]	@ (8000b30 <main+0x188>)
 8000a02:	2208      	movs	r2, #8
 8000a04:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000a06:	4b4a      	ldr	r3, [pc, #296]	@ (8000b30 <main+0x188>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000a0c:	4b48      	ldr	r3, [pc, #288]	@ (8000b30 <main+0x188>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000a12:	4b47      	ldr	r3, [pc, #284]	@ (8000b30 <main+0x188>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x01;
 8000a18:	4b46      	ldr	r3, [pc, #280]	@ (8000b34 <main+0x18c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x02;
 8000a1e:	4b45      	ldr	r3, [pc, #276]	@ (8000b34 <main+0x18c>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x03;
 8000a24:	4b43      	ldr	r3, [pc, #268]	@ (8000b34 <main+0x18c>)
 8000a26:	2203      	movs	r2, #3
 8000a28:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x04;
 8000a2a:	4b42      	ldr	r3, [pc, #264]	@ (8000b34 <main+0x18c>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x05;
 8000a30:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <main+0x18c>)
 8000a32:	2205      	movs	r2, #5
 8000a34:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x06;
 8000a36:	4b3f      	ldr	r3, [pc, #252]	@ (8000b34 <main+0x18c>)
 8000a38:	2206      	movs	r2, #6
 8000a3a:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x07;
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <main+0x18c>)
 8000a3e:	2207      	movs	r2, #7
 8000a40:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x08;
 8000a42:	4b3c      	ldr	r3, [pc, #240]	@ (8000b34 <main+0x18c>)
 8000a44:	2208      	movs	r2, #8
 8000a46:	71da      	strb	r2, [r3, #7]

//  if (ADXL_Init(&ADXL)!= ADXL_OK){
//	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
//	  Error_Handler();
//  }
  ADXL_Init(&ADXL);
 8000a48:	4838      	ldr	r0, [pc, #224]	@ (8000b2c <main+0x184>)
 8000a4a:	f7ff fe53 	bl	80006f4 <ADXL_Init>
//  ADXL_Measure(ON);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4839      	ldr	r0, [pc, #228]	@ (8000b38 <main+0x190>)
 8000a52:	f003 ff4b 	bl	80048ec <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a5a:	4838      	ldr	r0, [pc, #224]	@ (8000b3c <main+0x194>)
 8000a5c:	f002 fa95 	bl	8002f8a <HAL_GPIO_TogglePin>

	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000a60:	4b37      	ldr	r3, [pc, #220]	@ (8000b40 <main+0x198>)
 8000a62:	4a34      	ldr	r2, [pc, #208]	@ (8000b34 <main+0x18c>)
 8000a64:	4932      	ldr	r1, [pc, #200]	@ (8000b30 <main+0x188>)
 8000a66:	4830      	ldr	r0, [pc, #192]	@ (8000b28 <main+0x180>)
 8000a68:	f001 fb70 	bl	800214c <HAL_CAN_AddTxMessage>

	  knobRotation_P = Knob_Rotation_Percent()*100;
 8000a6c:	f7ff ff74 	bl	8000958 <Knob_Rotation_Percent>
 8000a70:	eef0 7a40 	vmov.f32	s15, s0
 8000a74:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000b44 <main+0x19c>
 8000a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a80:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a84:	793b      	ldrb	r3, [r7, #4]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <main+0x1a0>)
 8000a8a:	701a      	strb	r2, [r3, #0]

	  //180 deg -> CCR = 125, 0 deg -> CCR = 25
//	  htim2.Instance->CCR1 = knobRotation_P + 25;


	  ADXL_getAccel(accelData, OUTPUT_SIGNED);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	482f      	ldr	r0, [pc, #188]	@ (8000b4c <main+0x1a4>)
 8000a90:	f7ff fede 	bl	8000850 <ADXL_getAccel>

	  xOut_g = accelData[0]/255.0*9.8;
 8000a94:	4b2d      	ldr	r3, [pc, #180]	@ (8000b4c <main+0x1a4>)
 8000a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000aa2:	ed9f 5b1d 	vldr	d5, [pc, #116]	@ 8000b18 <main+0x170>
 8000aa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000aaa:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8000b20 <main+0x178>
 8000aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ab2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ab6:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <main+0x1a8>)
 8000ab8:	edc3 7a00 	vstr	s15, [r3]
	  yOut_g = accelData[1]/255.0*9.8;
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <main+0x1a4>)
 8000abe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000aca:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 8000b18 <main+0x170>
 8000ace:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ad2:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000b20 <main+0x178>
 8000ad6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <main+0x1ac>)
 8000ae0:	edc3 7a00 	vstr	s15, [r3]
	  zOut_g = accelData[2]/255.0*9.8;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <main+0x1a4>)
 8000ae6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000af2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8000b18 <main+0x170>
 8000af6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000afa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000b20 <main+0x178>
 8000afe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <main+0x1b0>)
 8000b08:	edc3 7a00 	vstr	s15, [r3]
//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(500);
 8000b0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b10:	f000 fc9e 	bl	8001450 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b14:	bf00      	nop
 8000b16:	e79e      	b.n	8000a56 <main+0xae>
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	406fe000 	.word	0x406fe000
 8000b20:	9999999a 	.word	0x9999999a
 8000b24:	40239999 	.word	0x40239999
 8000b28:	2000007c 	.word	0x2000007c
 8000b2c:	2000019c 	.word	0x2000019c
 8000b30:	20000154 	.word	0x20000154
 8000b34:	20000188 	.word	0x20000188
 8000b38:	20000108 	.word	0x20000108
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	20000198 	.word	0x20000198
 8000b44:	42c80000 	.word	0x42c80000
 8000b48:	200001bc 	.word	0x200001bc
 8000b4c:	200001a8 	.word	0x200001a8
 8000b50:	200001b0 	.word	0x200001b0
 8000b54:	200001b4 	.word	0x200001b4
 8000b58:	200001b8 	.word	0x200001b8

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2234      	movs	r2, #52	@ 0x34
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f004 ff46 	bl	80059fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <SystemClock_Config+0xb0>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	4a21      	ldr	r2, [pc, #132]	@ (8000c0c <SystemClock_Config+0xb0>)
 8000b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <SystemClock_Config+0xb0>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <SystemClock_Config+0xb4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c10 <SystemClock_Config+0xb4>)
 8000ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <SystemClock_Config+0xb4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 f9f9 	bl	8002fc0 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 fa0c 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fc92 	bl	800351c <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bfe:	f000 f9f7 	bl	8000ff0 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	@ 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c26:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <MX_ADC1_Init+0x9c>)
 8000c2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c44:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c52:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c54:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <MX_ADC1_Init+0xa0>)
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c72:	480e      	ldr	r0, [pc, #56]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c74:	f000 fc10 	bl	8001498 <HAL_ADC_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c7e:	f000 f9b7 	bl	8000ff0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c82:	230a      	movs	r3, #10
 8000c84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	@ (8000cac <MX_ADC1_Init+0x98>)
 8000c94:	f000 fdde 	bl	8001854 <HAL_ADC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c9e:	f000 f9a7 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000034 	.word	0x20000034
 8000cb0:	40012000 	.word	0x40012000
 8000cb4:	0f000001 	.word	0x0f000001

08000cb8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cbe:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <MX_CAN1_Init+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cd6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000cda:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cde:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ce2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <MX_CAN1_Init+0x64>)
 8000d0a:	f000 fff3 	bl	8001cf4 <HAL_CAN_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d14:	f000 f96c 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000007c 	.word	0x2000007c
 8000d20:	40006400 	.word	0x40006400

08000d24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d9c <MX_SPI1_Init+0x78>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d3e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d7e:	2208      	movs	r2, #8
 8000d80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_SPI1_Init+0x74>)
 8000d84:	f002 fd7c 	bl	8003880 <HAL_SPI_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 f92f 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000a4 	.word	0x200000a4
 8000d9c:	40013000 	.word	0x40013000

08000da0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	@ 0x38
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	615a      	str	r2, [r3, #20]
 8000dd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000dda:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000ddc:	f240 123f 	movw	r2, #319	@ 0x13f
 8000de0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000de8:	4b28      	ldr	r3, [pc, #160]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000dea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfc:	4823      	ldr	r0, [pc, #140]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000dfe:	f003 fcbd 	bl	800477c <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000e08:	f000 f8f2 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e16:	4619      	mov	r1, r3
 8000e18:	481c      	ldr	r0, [pc, #112]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000e1a:	f004 f87d 	bl	8004f18 <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000e24:	f000 f8e4 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e28:	4818      	ldr	r0, [pc, #96]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000e2a:	f003 fcfe 	bl	800482a <HAL_TIM_PWM_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e34:	f000 f8dc 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000e48:	f004 fd2c 	bl	80058a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e52:	f000 f8cd 	bl	8000ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e56:	2360      	movs	r3, #96	@ 0x60
 8000e58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000e6e:	f003 ff3f 	bl	8004cf0 <HAL_TIM_PWM_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e78:	f000 f8ba 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e7c:	4803      	ldr	r0, [pc, #12]	@ (8000e8c <MX_TIM2_Init+0xec>)
 8000e7e:	f000 f9d5 	bl	800122c <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	@ 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000108 	.word	0x20000108

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a23      	ldr	r2, [pc, #140]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a17      	ldr	r2, [pc, #92]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <MX_GPIO_Init+0xa8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 8000f0c:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <MX_GPIO_Init+0xac>)
 8000f0e:	f002 f823 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI1_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin;
 8000f12:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <MX_GPIO_Init+0xac>)
 8000f2c:	f001 fe68 	bl	8002c00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	@ 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000f46:	230d      	movs	r3, #13
 8000f48:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000; //Only ID 0x284 and 0x285 can pass through
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	480a      	ldr	r0, [pc, #40]	@ (8000f9c <CAN_Config+0x5c>)
 8000f74:	f000 ffba 	bl	8001eec <HAL_CAN_ConfigFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000f7e:	f000 f837 	bl	8000ff0 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000f82:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <CAN_Config+0x5c>)
 8000f84:	f001 f89e 	bl	80020c4 <HAL_CAN_Start>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8000f8e:	f000 f82f 	bl	8000ff0 <Error_Handler>
	}
}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	@ 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000007c 	.word	0x2000007c

08000fa0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000faa:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	480e      	ldr	r0, [pc, #56]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000fb0:	f001 f99c 	bl	80022ec <HAL_CAN_GetRxMessage>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fba:	2180      	movs	r1, #128	@ 0x80
 8000fbc:	480b      	ldr	r0, [pc, #44]	@ (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000fbe:	f001 ffe4 	bl	8002f8a <HAL_GPIO_TogglePin>
		Error_Handler();
 8000fc2:	f000 f815 	bl	8000ff0 <Error_Handler>
	}

	if (RxHeader.StdId == 0x234) {
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f5b3 7f0d 	cmp.w	r3, #564	@ 0x234
 8000fce:	d103      	bne.n	8000fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000fd4:	f001 ffd9 	bl	8002f8a <HAL_GPIO_TogglePin>
	}

}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000190 	.word	0x20000190
 8000fe4:	2000016c 	.word	0x2000016c
 8000fe8:	2000007c 	.word	0x2000007c
 8000fec:	40020400 	.word	0x40020400

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <Error_Handler+0x8>

08000ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_MspInit+0x44>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_MspInit+0x44>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_MspInit+0x44>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <HAL_MspInit+0x44>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <HAL_MspInit+0x44>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001024:	6453      	str	r3, [r2, #68]	@ 0x44
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_MspInit+0x44>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a15      	ldr	r2, [pc, #84]	@ (80010b8 <HAL_ADC_MspInit+0x74>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d123      	bne.n	80010ae <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_ADC_MspInit+0x78>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <HAL_ADC_MspInit+0x78>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001070:	6453      	str	r3, [r2, #68]	@ 0x44
 8001072:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_ADC_MspInit+0x78>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <HAL_ADC_MspInit+0x78>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <HAL_ADC_MspInit+0x78>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <HAL_ADC_MspInit+0x78>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001096:	2301      	movs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	2303      	movs	r3, #3
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <HAL_ADC_MspInit+0x7c>)
 80010aa:	f001 fda9 	bl	8002c00 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	@ 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020800 	.word	0x40020800

080010c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <HAL_CAN_MspInit+0x8c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12f      	bne.n	8001146 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <HAL_CAN_MspInit+0x90>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001154 <HAL_CAN_MspInit+0x90>)
 80010ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_CAN_MspInit+0x90>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_CAN_MspInit+0x90>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_CAN_MspInit+0x90>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_CAN_MspInit+0x90>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001116:	2303      	movs	r3, #3
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001126:	2309      	movs	r3, #9
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4809      	ldr	r0, [pc, #36]	@ (8001158 <HAL_CAN_MspInit+0x94>)
 8001132:	f001 fd65 	bl	8002c00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2014      	movs	r0, #20
 800113c:	f001 fd29 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001140:	2014      	movs	r0, #20
 8001142:	f001 fd42 	bl	8002bca <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	@ 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40006400 	.word	0x40006400
 8001154:	40023800 	.word	0x40023800
 8001158:	40020c00 	.word	0x40020c00

0800115c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a17      	ldr	r2, [pc, #92]	@ (80011d8 <HAL_SPI_MspInit+0x7c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d127      	bne.n	80011ce <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_SPI_MspInit+0x80>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	4a16      	ldr	r2, [pc, #88]	@ (80011dc <HAL_SPI_MspInit+0x80>)
 8001184:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001188:	6453      	str	r3, [r2, #68]	@ 0x44
 800118a:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <HAL_SPI_MspInit+0x80>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <HAL_SPI_MspInit+0x80>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a10      	ldr	r2, [pc, #64]	@ (80011dc <HAL_SPI_MspInit+0x80>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_SPI_MspInit+0x80>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011ae:	23e0      	movs	r3, #224	@ 0xe0
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011be:	2305      	movs	r3, #5
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <HAL_SPI_MspInit+0x84>)
 80011ca:	f001 fd19 	bl	8002c00 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	@ 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40013000 	.word	0x40013000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011f4:	d113      	bne.n	800121e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_TIM_Base_MspInit+0x44>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001228 <HAL_TIM_Base_MspInit+0x44>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6413      	str	r3, [r2, #64]	@ 0x40
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_TIM_Base_MspInit+0x44>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	201c      	movs	r0, #28
 8001214:	f001 fcbd 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001218:	201c      	movs	r0, #28
 800121a:	f001 fcd6 	bl	8002bca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800124c:	d11b      	bne.n	8001286 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <HAL_TIM_MspPostInit+0x64>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <HAL_TIM_MspPostInit+0x64>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <HAL_TIM_MspPostInit+0x64>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001266:	2301      	movs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001276:	2301      	movs	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	4804      	ldr	r0, [pc, #16]	@ (8001294 <HAL_TIM_MspPostInit+0x68>)
 8001282:	f001 fcbd 	bl	8002c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <NMI_Handler+0x4>

080012a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <MemManage_Handler+0x4>

080012b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <UsageFault_Handler+0x4>

080012c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ee:	f000 f88f 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <CAN1_RX0_IRQHandler+0x10>)
 80012fe:	f001 f93d 	bl	800257c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000007c 	.word	0x2000007c

0800130c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <TIM2_IRQHandler+0x10>)
 8001312:	f003 fbe5 	bl	8004ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000108 	.word	0x20000108

08001320 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800137c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001348:	f7ff ffea 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	@ (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	@ (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001372:	f004 fb4b 	bl	8005a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff fb17 	bl	80009a8 <main>
  bx  lr    
 800137a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001388:	08005a94 	.word	0x08005a94
  ldr r2, =_sbss
 800138c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001390:	200001c4 	.word	0x200001c4

08001394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC_IRQHandler>

08001396 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139a:	2003      	movs	r0, #3
 800139c:	f001 fbee 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a0:	200f      	movs	r0, #15
 80013a2:	f000 f805 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a6:	f7ff fe29 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <HAL_InitTick+0x54>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_InitTick+0x58>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fc09 	bl	8002be6 <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f001 fbd1 	bl	8002b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	@ (800140c <HAL_InitTick+0x5c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000000 	.word	0x20000000
 8001408:	20000008 	.word	0x20000008
 800140c:	20000004 	.word	0x20000004

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008
 8001434:	200001c0 	.word	0x200001c0

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200001c0 	.word	0x200001c0

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e031      	b.n	8001512 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fdc4 	bl	8001044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_ADC_Init+0x84>)
 80014dc:	4013      	ands	r3, r2
 80014de:	f043 0202 	orr.w	r2, r3, #2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 fb0a 	bl	8001b00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	f043 0201 	orr.w	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40
 8001502:	e001      	b.n	8001508 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	ffffeefd 	.word	0xffffeefd

08001520 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_ADC_Start+0x1a>
 8001536:	2302      	movs	r3, #2
 8001538:	e0ad      	b.n	8001696 <HAL_ADC_Start+0x176>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	d018      	beq.n	8001582 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001560:	4b50      	ldr	r3, [pc, #320]	@ (80016a4 <HAL_ADC_Start+0x184>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a50      	ldr	r2, [pc, #320]	@ (80016a8 <HAL_ADC_Start+0x188>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0c9a      	lsrs	r2, r3, #18
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001574:	e002      	b.n	800157c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3b01      	subs	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d175      	bne.n	800167c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001594:	4b45      	ldr	r3, [pc, #276]	@ (80016ac <HAL_ADC_Start+0x18c>)
 8001596:	4013      	ands	r3, r2
 8001598:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015ca:	d106      	bne.n	80015da <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d0:	f023 0206 	bic.w	r2, r3, #6
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80015d8:	e002      	b.n	80015e0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80015f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80015f2:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <HAL_ADC_Start+0x190>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d143      	bne.n	8001694 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	e03a      	b.n	8001694 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a24      	ldr	r2, [pc, #144]	@ (80016b4 <HAL_ADC_Start+0x194>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d10e      	bne.n	8001646 <HAL_ADC_Start+0x126>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d107      	bne.n	8001646 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001644:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001646:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <HAL_ADC_Start+0x190>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	d120      	bne.n	8001694 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a18      	ldr	r2, [pc, #96]	@ (80016b8 <HAL_ADC_Start+0x198>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d11b      	bne.n	8001694 <HAL_ADC_Start+0x174>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d114      	bne.n	8001694 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	e00b      	b.n	8001694 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	f043 0210 	orr.w	r2, r3, #16
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000000 	.word	0x20000000
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	fffff8fe 	.word	0xfffff8fe
 80016b0:	40012300 	.word	0x40012300
 80016b4:	40012000 	.word	0x40012000
 80016b8:	40012200 	.word	0x40012200

080016bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_Stop+0x16>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e01f      	b.n	8001712 <HAL_ADC_Stop+0x56>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <HAL_ADC_Stop+0x64>)
 80016fe:	4013      	ands	r3, r2
 8001700:	f043 0201 	orr.w	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	ffffeefe 	.word	0xffffeefe

08001724 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001740:	d113      	bne.n	800176a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800174c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001750:	d10b      	bne.n	800176a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f043 0220 	orr.w	r2, r3, #32
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e063      	b.n	8001832 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800176a:	f7ff fe65 	bl	8001438 <HAL_GetTick>
 800176e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001770:	e021      	b.n	80017b6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d01d      	beq.n	80017b6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d007      	beq.n	8001790 <HAL_ADC_PollForConversion+0x6c>
 8001780:	f7ff fe5a 	bl	8001438 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d212      	bcs.n	80017b6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d00b      	beq.n	80017b6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f043 0204 	orr.w	r2, r3, #4
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e03d      	b.n	8001832 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d1d6      	bne.n	8001772 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0212 	mvn.w	r2, #18
 80017cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d123      	bne.n	8001830 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d11f      	bne.n	8001830 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001808:	2b00      	cmp	r3, #0
 800180a:	d111      	bne.n	8001830 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1c>
 800186c:	2302      	movs	r3, #2
 800186e:	e136      	b.n	8001ade <HAL_ADC_ConfigChannel+0x28a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b09      	cmp	r3, #9
 800187e:	d93a      	bls.n	80018f6 <HAL_ADC_ConfigChannel+0xa2>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001888:	d035      	beq.n	80018f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68d9      	ldr	r1, [r3, #12]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	3b1e      	subs	r3, #30
 80018a0:	2207      	movs	r2, #7
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	400a      	ands	r2, r1
 80018ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a8d      	ldr	r2, [pc, #564]	@ (8001aec <HAL_ADC_ConfigChannel+0x298>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10a      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68d9      	ldr	r1, [r3, #12]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	061a      	lsls	r2, r3, #24
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ce:	e035      	b.n	800193c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68d9      	ldr	r1, [r3, #12]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4403      	add	r3, r0
 80018e8:	3b1e      	subs	r3, #30
 80018ea:	409a      	lsls	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018f4:	e022      	b.n	800193c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6919      	ldr	r1, [r3, #16]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	2207      	movs	r2, #7
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43da      	mvns	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	400a      	ands	r2, r1
 8001918:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6919      	ldr	r1, [r3, #16]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	4618      	mov	r0, r3
 800192c:	4603      	mov	r3, r0
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4403      	add	r3, r0
 8001932:	409a      	lsls	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b06      	cmp	r3, #6
 8001942:	d824      	bhi.n	800198e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	3b05      	subs	r3, #5
 8001956:	221f      	movs	r2, #31
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43da      	mvns	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	400a      	ands	r2, r1
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b29b      	uxth	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	3b05      	subs	r3, #5
 8001980:	fa00 f203 	lsl.w	r2, r0, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	635a      	str	r2, [r3, #52]	@ 0x34
 800198c:	e04c      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d824      	bhi.n	80019e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	3b23      	subs	r3, #35	@ 0x23
 80019a8:	221f      	movs	r2, #31
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	400a      	ands	r2, r1
 80019b6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	3b23      	subs	r3, #35	@ 0x23
 80019d2:	fa00 f203 	lsl.w	r2, r0, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80019de:	e023      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	3b41      	subs	r3, #65	@ 0x41
 80019f2:	221f      	movs	r2, #31
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43da      	mvns	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	400a      	ands	r2, r1
 8001a00:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b41      	subs	r3, #65	@ 0x41
 8001a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a30      	ldr	r2, [pc, #192]	@ (8001af0 <HAL_ADC_ConfigChannel+0x29c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10a      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x1f4>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a2c      	ldr	r2, [pc, #176]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a42:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a46:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a28      	ldr	r2, [pc, #160]	@ (8001af0 <HAL_ADC_ConfigChannel+0x29c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10f      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x21e>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d10b      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a25      	ldr	r2, [pc, #148]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a64:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a66:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a70:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1e      	ldr	r2, [pc, #120]	@ (8001af0 <HAL_ADC_ConfigChannel+0x29c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d12b      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x280>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1a      	ldr	r2, [pc, #104]	@ (8001aec <HAL_ADC_ConfigChannel+0x298>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d003      	beq.n	8001a8e <HAL_ADC_ConfigChannel+0x23a>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b11      	cmp	r3, #17
 8001a8c:	d122      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a94:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a98:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4a15      	ldr	r2, [pc, #84]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001aa4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a10      	ldr	r2, [pc, #64]	@ (8001aec <HAL_ADC_ConfigChannel+0x298>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d111      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a11      	ldr	r2, [pc, #68]	@ (8001afc <HAL_ADC_ConfigChannel+0x2a8>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9a      	lsrs	r2, r3, #18
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ac6:	e002      	b.n	8001ace <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f9      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	10000012 	.word	0x10000012
 8001af0:	40012000 	.word	0x40012000
 8001af4:	40012300 	.word	0x40012300
 8001af8:	20000000 	.word	0x20000000
 8001afc:	431bde83 	.word	0x431bde83

08001b00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b08:	4b78      	ldr	r3, [pc, #480]	@ (8001cec <ADC_Init+0x1ec>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a77      	ldr	r2, [pc, #476]	@ (8001cec <ADC_Init+0x1ec>)
 8001b0e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b12:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b14:	4b75      	ldr	r3, [pc, #468]	@ (8001cec <ADC_Init+0x1ec>)
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4973      	ldr	r1, [pc, #460]	@ (8001cec <ADC_Init+0x1ec>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	021a      	lsls	r2, r3, #8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	4a58      	ldr	r2, [pc, #352]	@ (8001cf0 <ADC_Init+0x1f0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	e00f      	b.n	8001bfa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0202 	bic.w	r2, r2, #2
 8001c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6899      	ldr	r1, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	005a      	lsls	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	3b01      	subs	r3, #1
 8001c54:	035a      	lsls	r2, r3, #13
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	e007      	b.n	8001c70 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	051a      	lsls	r2, r3, #20
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	029a      	lsls	r2, r3, #10
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40012300 	.word	0x40012300
 8001cf0:	0f000001 	.word	0x0f000001

08001cf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0ed      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff f9d6 	bl	80010c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff fb86 	bl	8001438 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2e:	e012      	b.n	8001d56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d30:	f7ff fb82 	bl	8001438 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d90b      	bls.n	8001d56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0c5      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0e5      	beq.n	8001d30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0202 	bic.w	r2, r2, #2
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d74:	f7ff fb60 	bl	8001438 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7a:	e012      	b.n	8001da2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7c:	f7ff fb5c 	bl	8001438 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d90b      	bls.n	8001da2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2205      	movs	r2, #5
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e09f      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e5      	bne.n	8001d7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d108      	bne.n	8001dca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e5b      	ldrb	r3, [r3, #25]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7e9b      	ldrb	r3, [r3, #26]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e007      	b.n	8001e2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0220 	bic.w	r2, r2, #32
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7edb      	ldrb	r3, [r3, #27]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0210 	bic.w	r2, r2, #16
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0210 	orr.w	r2, r2, #16
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7f1b      	ldrb	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7f5b      	ldrb	r3, [r3, #29]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0204 	orr.w	r2, r2, #4
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e007      	b.n	8001eac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	ea42 0103 	orr.w	r1, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f02:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d003      	beq.n	8001f12 <HAL_CAN_ConfigFilter+0x26>
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	f040 80c7 	bne.w	80020a0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a69      	ldr	r2, [pc, #420]	@ (80020bc <HAL_CAN_ConfigFilter+0x1d0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d001      	beq.n	8001f20 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001f1c:	4b68      	ldr	r3, [pc, #416]	@ (80020c0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f1e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	4a63      	ldr	r2, [pc, #396]	@ (80020c0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d111      	bne.n	8001f5c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f3e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2201      	movs	r2, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d123      	bne.n	8001fce <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	401a      	ands	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fa8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3248      	adds	r2, #72	@ 0x48
 8001fae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fc4:	6979      	ldr	r1, [r7, #20]
 8001fc6:	3348      	adds	r3, #72	@ 0x48
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d122      	bne.n	800201c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ff6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3248      	adds	r2, #72	@ 0x48
 8001ffc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002010:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002012:	6979      	ldr	r1, [r7, #20]
 8002014:	3348      	adds	r3, #72	@ 0x48
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002036:	e007      	b.n	8002048 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	431a      	orrs	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002062:	e007      	b.n	8002074 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	431a      	orrs	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002092:	f023 0201 	bic.w	r2, r3, #1
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	e006      	b.n	80020ae <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40003400 	.word	0x40003400
 80020c0:	40006400 	.word	0x40006400

080020c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d12e      	bne.n	8002136 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020f0:	f7ff f9a2 	bl	8001438 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020f6:	e012      	b.n	800211e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020f8:	f7ff f99e 	bl	8001438 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b0a      	cmp	r3, #10
 8002104:	d90b      	bls.n	800211e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2205      	movs	r2, #5
 8002116:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e012      	b.n	8002144 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e5      	bne.n	80020f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e006      	b.n	8002144 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002160:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800216a:	7ffb      	ldrb	r3, [r7, #31]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d003      	beq.n	8002178 <HAL_CAN_AddTxMessage+0x2c>
 8002170:	7ffb      	ldrb	r3, [r7, #31]
 8002172:	2b02      	cmp	r3, #2
 8002174:	f040 80ad 	bne.w	80022d2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10a      	bne.n	8002198 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8095 	beq.w	80022c2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	0e1b      	lsrs	r3, r3, #24
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021a2:	2201      	movs	r2, #1
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021be:	68f9      	ldr	r1, [r7, #12]
 80021c0:	6809      	ldr	r1, [r1, #0]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3318      	adds	r3, #24
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	440b      	add	r3, r1
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e00f      	b.n	80021f0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021da:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021e4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3318      	adds	r3, #24
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	440b      	add	r3, r1
 80021ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3318      	adds	r3, #24
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	440b      	add	r3, r1
 8002200:	3304      	adds	r3, #4
 8002202:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	7d1b      	ldrb	r3, [r3, #20]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d111      	bne.n	8002230 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3318      	adds	r3, #24
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	6811      	ldr	r1, [r2, #0]
 8002220:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3318      	adds	r3, #24
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	440b      	add	r3, r1
 800222c:	3304      	adds	r3, #4
 800222e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3307      	adds	r3, #7
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	061a      	lsls	r2, r3, #24
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3306      	adds	r3, #6
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	041b      	lsls	r3, r3, #16
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3305      	adds	r3, #5
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	4313      	orrs	r3, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	3204      	adds	r2, #4
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	4610      	mov	r0, r2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6811      	ldr	r1, [r2, #0]
 8002258:	ea43 0200 	orr.w	r2, r3, r0
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	440b      	add	r3, r1
 8002262:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002266:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3303      	adds	r3, #3
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	061a      	lsls	r2, r3, #24
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3302      	adds	r3, #2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3301      	adds	r3, #1
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	4313      	orrs	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	7812      	ldrb	r2, [r2, #0]
 8002288:	4610      	mov	r0, r2
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	6811      	ldr	r1, [r2, #0]
 800228e:	ea43 0200 	orr.w	r2, r3, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	440b      	add	r3, r1
 8002298:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800229c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3318      	adds	r3, #24
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	4413      	add	r3, r2
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	6811      	ldr	r1, [r2, #0]
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3318      	adds	r3, #24
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	440b      	add	r3, r1
 80022bc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e00e      	b.n	80022e0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e006      	b.n	80022e0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
  }
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3724      	adds	r7, #36	@ 0x24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002300:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d003      	beq.n	8002310 <HAL_CAN_GetRxMessage+0x24>
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b02      	cmp	r3, #2
 800230c:	f040 8103 	bne.w	8002516 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10e      	bne.n	8002334 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d116      	bne.n	8002352 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0f7      	b.n	8002524 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d107      	bne.n	8002352 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0e8      	b.n	8002524 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	331b      	adds	r3, #27
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4413      	add	r3, r2
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0204 	and.w	r2, r3, #4
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10c      	bne.n	800238a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	331b      	adds	r3, #27
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	4413      	add	r3, r2
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0d5b      	lsrs	r3, r3, #21
 8002380:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e00b      	b.n	80023a2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	331b      	adds	r3, #27
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	331b      	adds	r3, #27
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	4413      	add	r3, r2
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0202 	and.w	r2, r3, #2
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	331b      	adds	r3, #27
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4413      	add	r3, r2
 80023c4:	3304      	adds	r3, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2208      	movs	r2, #8
 80023d4:	611a      	str	r2, [r3, #16]
 80023d6:	e00b      	b.n	80023f0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	331b      	adds	r3, #27
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	3304      	adds	r3, #4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 020f 	and.w	r2, r3, #15
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	331b      	adds	r3, #27
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	b2da      	uxtb	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	331b      	adds	r3, #27
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	4413      	add	r3, r2
 8002414:	3304      	adds	r3, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	b29a      	uxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	4413      	add	r3, r2
 800242a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4413      	add	r3, r2
 8002440:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0a1a      	lsrs	r2, r3, #8
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	4413      	add	r3, r2
 800245a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0c1a      	lsrs	r2, r3, #16
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3302      	adds	r3, #2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4413      	add	r3, r2
 8002474:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0e1a      	lsrs	r2, r3, #24
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	3303      	adds	r3, #3
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	3304      	adds	r3, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0a1a      	lsrs	r2, r3, #8
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	3305      	adds	r3, #5
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4413      	add	r3, r2
 80024c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0c1a      	lsrs	r2, r3, #16
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	3306      	adds	r3, #6
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	4413      	add	r3, r2
 80024da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e1a      	lsrs	r2, r3, #24
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	3307      	adds	r3, #7
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d108      	bne.n	8002502 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0220 	orr.w	r2, r2, #32
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	e007      	b.n	8002512 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0220 	orr.w	r2, r2, #32
 8002510:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e006      	b.n	8002524 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
  }
}
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002540:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d002      	beq.n	800254e <HAL_CAN_ActivateNotification+0x1e>
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d109      	bne.n	8002562 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6959      	ldr	r1, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e006      	b.n	8002570 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	@ 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d07c      	beq.n	80026bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d023      	beq.n	8002614 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f983 	bl	80028ea <HAL_CAN_TxMailbox0CompleteCallback>
 80025e4:	e016      	b.n	8002614 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f8:	e00c      	b.n	8002614 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d004      	beq.n	800260e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
 800260c:	e002      	b.n	8002614 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f989 	bl	8002926 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d024      	beq.n	8002668 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002626:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f963 	bl	80028fe <HAL_CAN_TxMailbox1CompleteCallback>
 8002638:	e016      	b.n	8002668 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
 800264c:	e00c      	b.n	8002668 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002660:	e002      	b.n	8002668 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f969 	bl	800293a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d024      	beq.n	80026bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800267a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f943 	bl	8002912 <HAL_CAN_TxMailbox2CompleteCallback>
 800268c:	e016      	b.n	80026bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a0:	e00c      	b.n	80026bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b4:	e002      	b.n	80026bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f949 	bl	800294e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2210      	movs	r2, #16
 80026de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2208      	movs	r2, #8
 80026fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f930 	bl	8002962 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fc40 	bl	8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00c      	beq.n	8002744 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2210      	movs	r2, #16
 8002742:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2208      	movs	r2, #8
 800275e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f912 	bl	800298a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8f9 	bl	8002976 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d006      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f8fc 	bl	800299e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d006      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2208      	movs	r2, #8
 80027c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8f5 	bl	80029b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d07b      	beq.n	80028ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d072      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002836:	2b00      	cmp	r3, #0
 8002838:	d043      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002840:	2b00      	cmp	r3, #0
 8002842:	d03e      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800284a:	2b60      	cmp	r3, #96	@ 0x60
 800284c:	d02b      	beq.n	80028a6 <HAL_CAN_IRQHandler+0x32a>
 800284e:	2b60      	cmp	r3, #96	@ 0x60
 8002850:	d82e      	bhi.n	80028b0 <HAL_CAN_IRQHandler+0x334>
 8002852:	2b50      	cmp	r3, #80	@ 0x50
 8002854:	d022      	beq.n	800289c <HAL_CAN_IRQHandler+0x320>
 8002856:	2b50      	cmp	r3, #80	@ 0x50
 8002858:	d82a      	bhi.n	80028b0 <HAL_CAN_IRQHandler+0x334>
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d019      	beq.n	8002892 <HAL_CAN_IRQHandler+0x316>
 800285e:	2b40      	cmp	r3, #64	@ 0x40
 8002860:	d826      	bhi.n	80028b0 <HAL_CAN_IRQHandler+0x334>
 8002862:	2b30      	cmp	r3, #48	@ 0x30
 8002864:	d010      	beq.n	8002888 <HAL_CAN_IRQHandler+0x30c>
 8002866:	2b30      	cmp	r3, #48	@ 0x30
 8002868:	d822      	bhi.n	80028b0 <HAL_CAN_IRQHandler+0x334>
 800286a:	2b10      	cmp	r3, #16
 800286c:	d002      	beq.n	8002874 <HAL_CAN_IRQHandler+0x2f8>
 800286e:	2b20      	cmp	r3, #32
 8002870:	d005      	beq.n	800287e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002872:	e01d      	b.n	80028b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	f043 0308 	orr.w	r3, r3, #8
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800287c:	e019      	b.n	80028b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	f043 0310 	orr.w	r3, r3, #16
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002886:	e014      	b.n	80028b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	f043 0320 	orr.w	r3, r3, #32
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002890:	e00f      	b.n	80028b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800289a:	e00a      	b.n	80028b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028a4:	e005      	b.n	80028b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028ae:	e000      	b.n	80028b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80028b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80028c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2204      	movs	r2, #4
 80028c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f872 	bl	80029c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028e2:	bf00      	nop
 80028e4:	3728      	adds	r7, #40	@ 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <__NVIC_SetPriorityGrouping+0x40>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0a:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <__NVIC_SetPriorityGrouping+0x40>)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	60d3      	str	r3, [r2, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00
 8002a20:	05fa0000 	.word	0x05fa0000

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	@ (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	@ (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	@ (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	@ 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	@ 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f7ff ff8e 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff29 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff3e 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff8e 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff31 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ffa2 	bl	8002b38 <SysTick_Config>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	@ 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e175      	b.n	8002f0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c20:	2201      	movs	r2, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	f040 8164 	bne.w	8002f06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d005      	beq.n	8002c56 <HAL_GPIO_Init+0x56>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d130      	bne.n	8002cb8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 0201 	and.w	r2, r3, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d017      	beq.n	8002cf4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d123      	bne.n	8002d48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	08da      	lsrs	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3208      	adds	r2, #8
 8002d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	220f      	movs	r2, #15
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	69b9      	ldr	r1, [r7, #24]
 8002d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80be 	beq.w	8002f06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	4b66      	ldr	r3, [pc, #408]	@ (8002f24 <HAL_GPIO_Init+0x324>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	4a65      	ldr	r2, [pc, #404]	@ (8002f24 <HAL_GPIO_Init+0x324>)
 8002d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d96:	4b63      	ldr	r3, [pc, #396]	@ (8002f24 <HAL_GPIO_Init+0x324>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002da2:	4a61      	ldr	r2, [pc, #388]	@ (8002f28 <HAL_GPIO_Init+0x328>)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3302      	adds	r3, #2
 8002daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	@ (8002f2c <HAL_GPIO_Init+0x32c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d037      	beq.n	8002e3e <HAL_GPIO_Init+0x23e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a57      	ldr	r2, [pc, #348]	@ (8002f30 <HAL_GPIO_Init+0x330>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d031      	beq.n	8002e3a <HAL_GPIO_Init+0x23a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a56      	ldr	r2, [pc, #344]	@ (8002f34 <HAL_GPIO_Init+0x334>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02b      	beq.n	8002e36 <HAL_GPIO_Init+0x236>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a55      	ldr	r2, [pc, #340]	@ (8002f38 <HAL_GPIO_Init+0x338>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d025      	beq.n	8002e32 <HAL_GPIO_Init+0x232>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a54      	ldr	r2, [pc, #336]	@ (8002f3c <HAL_GPIO_Init+0x33c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01f      	beq.n	8002e2e <HAL_GPIO_Init+0x22e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a53      	ldr	r2, [pc, #332]	@ (8002f40 <HAL_GPIO_Init+0x340>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d019      	beq.n	8002e2a <HAL_GPIO_Init+0x22a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a52      	ldr	r2, [pc, #328]	@ (8002f44 <HAL_GPIO_Init+0x344>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_GPIO_Init+0x226>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a51      	ldr	r2, [pc, #324]	@ (8002f48 <HAL_GPIO_Init+0x348>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00d      	beq.n	8002e22 <HAL_GPIO_Init+0x222>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a50      	ldr	r2, [pc, #320]	@ (8002f4c <HAL_GPIO_Init+0x34c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <HAL_GPIO_Init+0x21e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4f      	ldr	r2, [pc, #316]	@ (8002f50 <HAL_GPIO_Init+0x350>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_GPIO_Init+0x21a>
 8002e16:	2309      	movs	r3, #9
 8002e18:	e012      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e1a:	230a      	movs	r3, #10
 8002e1c:	e010      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e1e:	2308      	movs	r3, #8
 8002e20:	e00e      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e22:	2307      	movs	r3, #7
 8002e24:	e00c      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e26:	2306      	movs	r3, #6
 8002e28:	e00a      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	e008      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e32:	2303      	movs	r3, #3
 8002e34:	e004      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f002 0203 	and.w	r2, r2, #3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e50:	4935      	ldr	r1, [pc, #212]	@ (8002f28 <HAL_GPIO_Init+0x328>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f54 <HAL_GPIO_Init+0x354>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e82:	4a34      	ldr	r2, [pc, #208]	@ (8002f54 <HAL_GPIO_Init+0x354>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e88:	4b32      	ldr	r3, [pc, #200]	@ (8002f54 <HAL_GPIO_Init+0x354>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eac:	4a29      	ldr	r2, [pc, #164]	@ (8002f54 <HAL_GPIO_Init+0x354>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb2:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <HAL_GPIO_Init+0x354>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f54 <HAL_GPIO_Init+0x354>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_GPIO_Init+0x354>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <HAL_GPIO_Init+0x354>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	f67f ae86 	bls.w	8002c20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3724      	adds	r7, #36	@ 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40021800 	.word	0x40021800
 8002f48:	40021c00 	.word	0x40021c00
 8002f4c:	40022000 	.word	0x40022000
 8002f50:	40022400 	.word	0x40022400
 8002f54:	40013c00 	.word	0x40013c00

08002f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
 8002f64:	4613      	mov	r3, r2
 8002f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f68:	787b      	ldrb	r3, [r7, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f74:	e003      	b.n	8002f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	041a      	lsls	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	619a      	str	r2, [r3, #24]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f9c:	887a      	ldrh	r2, [r7, #2]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	041a      	lsls	r2, r3, #16
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	400b      	ands	r3, r1
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e29b      	b.n	800350e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8087 	beq.w	80030f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe4:	4b96      	ldr	r3, [pc, #600]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d00c      	beq.n	800300a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff0:	4b93      	ldr	r3, [pc, #588]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d112      	bne.n	8003022 <HAL_RCC_OscConfig+0x62>
 8002ffc:	4b90      	ldr	r3, [pc, #576]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003008:	d10b      	bne.n	8003022 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300a:	4b8d      	ldr	r3, [pc, #564]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d06c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x130>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d168      	bne.n	80030f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e275      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x7a>
 800302c:	4b84      	ldr	r3, [pc, #528]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a83      	ldr	r2, [pc, #524]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e02e      	b.n	8003098 <HAL_RCC_OscConfig+0xd8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x9c>
 8003042:	4b7f      	ldr	r3, [pc, #508]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7e      	ldr	r2, [pc, #504]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b7c      	ldr	r3, [pc, #496]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7b      	ldr	r2, [pc, #492]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e01d      	b.n	8003098 <HAL_RCC_OscConfig+0xd8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0xc0>
 8003066:	4b76      	ldr	r3, [pc, #472]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a75      	ldr	r2, [pc, #468]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b73      	ldr	r3, [pc, #460]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a72      	ldr	r2, [pc, #456]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0xd8>
 8003080:	4b6f      	ldr	r3, [pc, #444]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6e      	ldr	r2, [pc, #440]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b6c      	ldr	r3, [pc, #432]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6b      	ldr	r2, [pc, #428]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe f9ca 	bl	8001438 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe f9c6 	bl	8001438 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	@ 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e229      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b61      	ldr	r3, [pc, #388]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe8>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe f9b6 	bl	8001438 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe f9b2 	bl	8001438 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	@ 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e215      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e2:	4b57      	ldr	r3, [pc, #348]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x110>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d069      	beq.n	80031d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fe:	4b50      	ldr	r3, [pc, #320]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	4b4d      	ldr	r3, [pc, #308]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	d11c      	bne.n	8003150 <HAL_RCC_OscConfig+0x190>
 8003116:	4b4a      	ldr	r3, [pc, #296]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	4b47      	ldr	r3, [pc, #284]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x17a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1e9      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b41      	ldr	r3, [pc, #260]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	493d      	ldr	r1, [pc, #244]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	e040      	b.n	80031d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d023      	beq.n	80031a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b39      	ldr	r3, [pc, #228]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a38      	ldr	r2, [pc, #224]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe f968 	bl	8001438 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316c:	f7fe f964 	bl	8001438 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1c7      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317e:	4b30      	ldr	r3, [pc, #192]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b2d      	ldr	r3, [pc, #180]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4929      	ldr	r1, [pc, #164]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
 800319e:	e018      	b.n	80031d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a0:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a26      	ldr	r2, [pc, #152]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe f944 	bl	8001438 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe f940 	bl	8001438 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1a3      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d038      	beq.n	8003250 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d019      	beq.n	800321a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b16      	ldr	r3, [pc, #88]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 80031e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ea:	4a15      	ldr	r2, [pc, #84]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7fe f921 	bl	8001438 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fa:	f7fe f91d 	bl	8001438 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e180      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800320e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x23a>
 8003218:	e01a      	b.n	8003250 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321a:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 800321c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321e:	4a08      	ldr	r2, [pc, #32]	@ (8003240 <HAL_RCC_OscConfig+0x280>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7fe f907 	bl	8001438 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322e:	f7fe f903 	bl	8001438 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d903      	bls.n	8003244 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e166      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
 8003240:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	4b92      	ldr	r3, [pc, #584]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1ee      	bne.n	800322e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80a4 	beq.w	80033a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b8c      	ldr	r3, [pc, #560]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10d      	bne.n	8003286 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	4b89      	ldr	r3, [pc, #548]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a88      	ldr	r2, [pc, #544]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b86      	ldr	r3, [pc, #536]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003286:	4b83      	ldr	r3, [pc, #524]	@ (8003494 <HAL_RCC_OscConfig+0x4d4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d118      	bne.n	80032c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003292:	4b80      	ldr	r3, [pc, #512]	@ (8003494 <HAL_RCC_OscConfig+0x4d4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7f      	ldr	r2, [pc, #508]	@ (8003494 <HAL_RCC_OscConfig+0x4d4>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329e:	f7fe f8cb 	bl	8001438 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a6:	f7fe f8c7 	bl	8001438 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b64      	cmp	r3, #100	@ 0x64
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e12a      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b8:	4b76      	ldr	r3, [pc, #472]	@ (8003494 <HAL_RCC_OscConfig+0x4d4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x31a>
 80032cc:	4b70      	ldr	r3, [pc, #448]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	4a6f      	ldr	r2, [pc, #444]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d8:	e02d      	b.n	8003336 <HAL_RCC_OscConfig+0x376>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x33c>
 80032e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ee:	4b68      	ldr	r3, [pc, #416]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f2:	4a67      	ldr	r2, [pc, #412]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	f023 0304 	bic.w	r3, r3, #4
 80032f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fa:	e01c      	b.n	8003336 <HAL_RCC_OscConfig+0x376>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d10c      	bne.n	800331e <HAL_RCC_OscConfig+0x35e>
 8003304:	4b62      	ldr	r3, [pc, #392]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	4a61      	ldr	r2, [pc, #388]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003310:	4b5f      	ldr	r3, [pc, #380]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	4a5e      	ldr	r2, [pc, #376]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	@ 0x70
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0x376>
 800331e:	4b5c      	ldr	r3, [pc, #368]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	4a5b      	ldr	r2, [pc, #364]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	@ 0x70
 800332a:	4b59      	ldr	r3, [pc, #356]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	4a58      	ldr	r2, [pc, #352]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d015      	beq.n	800336a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fe f87b 	bl	8001438 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fe f877 	bl	8001438 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0d8      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335c:	4b4c      	ldr	r3, [pc, #304]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ee      	beq.n	8003346 <HAL_RCC_OscConfig+0x386>
 8003368:	e014      	b.n	8003394 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe f865 	bl	8001438 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fe f861 	bl	8001438 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0c2      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003388:	4b41      	ldr	r3, [pc, #260]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ee      	bne.n	8003372 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4b3d      	ldr	r3, [pc, #244]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	4a3c      	ldr	r2, [pc, #240]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80ae 	beq.w	800350c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b0:	4b37      	ldr	r3, [pc, #220]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d06d      	beq.n	8003498 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d14b      	bne.n	800345c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	4b32      	ldr	r3, [pc, #200]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a31      	ldr	r2, [pc, #196]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f832 	bl	8001438 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe f82e 	bl	8001438 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e091      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b29      	ldr	r3, [pc, #164]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	071b      	lsls	r3, r3, #28
 8003422:	491b      	ldr	r1, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a18      	ldr	r2, [pc, #96]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe f800 	bl	8001438 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fd fffc 	bl	8001438 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e05f      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x47c>
 800345a:	e057      	b.n	800350c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0b      	ldr	r2, [pc, #44]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003462:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fd ffe6 	bl	8001438 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fd ffe2 	bl	8001438 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e045      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x4b0>
 800348e:	e03d      	b.n	800350c <HAL_RCC_OscConfig+0x54c>
 8003490:	40023800 	.word	0x40023800
 8003494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003498:	4b1f      	ldr	r3, [pc, #124]	@ (8003518 <HAL_RCC_OscConfig+0x558>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d030      	beq.n	8003508 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d129      	bne.n	8003508 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d122      	bne.n	8003508 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d119      	bne.n	8003508 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	3b01      	subs	r3, #1
 80034e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d10f      	bne.n	8003508 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800

0800351c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0d0      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003534:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d910      	bls.n	8003564 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b67      	ldr	r3, [pc, #412]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 020f 	bic.w	r2, r3, #15
 800354a:	4965      	ldr	r1, [pc, #404]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b63      	ldr	r3, [pc, #396]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0b8      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800357c:	4b59      	ldr	r3, [pc, #356]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a58      	ldr	r2, [pc, #352]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003582:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003586:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003594:	4b53      	ldr	r3, [pc, #332]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a52      	ldr	r2, [pc, #328]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 800359a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800359e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a0:	4b50      	ldr	r3, [pc, #320]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	494d      	ldr	r1, [pc, #308]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d040      	beq.n	8003640 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b47      	ldr	r3, [pc, #284]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d115      	bne.n	80035fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e07f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035de:	4b41      	ldr	r3, [pc, #260]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e073      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ee:	4b3d      	ldr	r3, [pc, #244]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06b      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fe:	4b39      	ldr	r3, [pc, #228]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f023 0203 	bic.w	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4936      	ldr	r1, [pc, #216]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 800360c:	4313      	orrs	r3, r2
 800360e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003610:	f7fd ff12 	bl	8001438 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	e00a      	b.n	800362e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7fd ff0e 	bl	8001438 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e053      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 020c 	and.w	r2, r3, #12
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	429a      	cmp	r2, r3
 800363e:	d1eb      	bne.n	8003618 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003640:	4b27      	ldr	r3, [pc, #156]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d210      	bcs.n	8003670 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b24      	ldr	r3, [pc, #144]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 020f 	bic.w	r2, r3, #15
 8003656:	4922      	ldr	r1, [pc, #136]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b20      	ldr	r3, [pc, #128]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e032      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800367c:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4916      	ldr	r1, [pc, #88]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800369a:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	490e      	ldr	r1, [pc, #56]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ae:	f000 f821 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 80036b2:	4602      	mov	r2, r0
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	490a      	ldr	r1, [pc, #40]	@ (80036e8 <HAL_RCC_ClockConfig+0x1cc>)
 80036c0:	5ccb      	ldrb	r3, [r1, r3]
 80036c2:	fa22 f303 	lsr.w	r3, r2, r3
 80036c6:	4a09      	ldr	r2, [pc, #36]	@ (80036ec <HAL_RCC_ClockConfig+0x1d0>)
 80036c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ca:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <HAL_RCC_ClockConfig+0x1d4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd fe6e 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40023c00 	.word	0x40023c00
 80036e4:	40023800 	.word	0x40023800
 80036e8:	08005a74 	.word	0x08005a74
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000004 	.word	0x20000004

080036f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f8:	b090      	sub	sp, #64	@ 0x40
 80036fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003700:	2300      	movs	r3, #0
 8003702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003704:	2300      	movs	r3, #0
 8003706:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800370c:	4b59      	ldr	r3, [pc, #356]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b08      	cmp	r3, #8
 8003716:	d00d      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x40>
 8003718:	2b08      	cmp	r3, #8
 800371a:	f200 80a1 	bhi.w	8003860 <HAL_RCC_GetSysClockFreq+0x16c>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x34>
 8003722:	2b04      	cmp	r3, #4
 8003724:	d003      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x3a>
 8003726:	e09b      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003728:	4b53      	ldr	r3, [pc, #332]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x184>)
 800372a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800372c:	e09b      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800372e:	4b53      	ldr	r3, [pc, #332]	@ (800387c <HAL_RCC_GetSysClockFreq+0x188>)
 8003730:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003732:	e098      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003734:	4b4f      	ldr	r3, [pc, #316]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800373c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800373e:	4b4d      	ldr	r3, [pc, #308]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d028      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374a:	4b4a      	ldr	r3, [pc, #296]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	099b      	lsrs	r3, r3, #6
 8003750:	2200      	movs	r2, #0
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	627a      	str	r2, [r7, #36]	@ 0x24
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800375c:	2100      	movs	r1, #0
 800375e:	4b47      	ldr	r3, [pc, #284]	@ (800387c <HAL_RCC_GetSysClockFreq+0x188>)
 8003760:	fb03 f201 	mul.w	r2, r3, r1
 8003764:	2300      	movs	r3, #0
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	4413      	add	r3, r2
 800376c:	4a43      	ldr	r2, [pc, #268]	@ (800387c <HAL_RCC_GetSysClockFreq+0x188>)
 800376e:	fba0 1202 	umull	r1, r2, r0, r2
 8003772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003774:	460a      	mov	r2, r1
 8003776:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800377a:	4413      	add	r3, r2
 800377c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800377e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003780:	2200      	movs	r2, #0
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	61fa      	str	r2, [r7, #28]
 8003786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800378a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800378e:	f7fc fd53 	bl	8000238 <__aeabi_uldivmod>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4613      	mov	r3, r2
 8003798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800379a:	e053      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379c:	4b35      	ldr	r3, [pc, #212]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	2200      	movs	r2, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	617a      	str	r2, [r7, #20]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037ae:	f04f 0b00 	mov.w	fp, #0
 80037b2:	4652      	mov	r2, sl
 80037b4:	465b      	mov	r3, fp
 80037b6:	f04f 0000 	mov.w	r0, #0
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	0159      	lsls	r1, r3, #5
 80037c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c4:	0150      	lsls	r0, r2, #5
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	ebb2 080a 	subs.w	r8, r2, sl
 80037ce:	eb63 090b 	sbc.w	r9, r3, fp
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037e6:	ebb2 0408 	subs.w	r4, r2, r8
 80037ea:	eb63 0509 	sbc.w	r5, r3, r9
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	00eb      	lsls	r3, r5, #3
 80037f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037fc:	00e2      	lsls	r2, r4, #3
 80037fe:	4614      	mov	r4, r2
 8003800:	461d      	mov	r5, r3
 8003802:	eb14 030a 	adds.w	r3, r4, sl
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	eb45 030b 	adc.w	r3, r5, fp
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800381a:	4629      	mov	r1, r5
 800381c:	028b      	lsls	r3, r1, #10
 800381e:	4621      	mov	r1, r4
 8003820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003824:	4621      	mov	r1, r4
 8003826:	028a      	lsls	r2, r1, #10
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382e:	2200      	movs	r2, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	60fa      	str	r2, [r7, #12]
 8003834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003838:	f7fc fcfe 	bl	8000238 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4613      	mov	r3, r2
 8003842:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003844:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	3301      	adds	r3, #1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003854:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x184>)
 8003862:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003868:	4618      	mov	r0, r3
 800386a:	3740      	adds	r7, #64	@ 0x40
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	00f42400 	.word	0x00f42400
 800387c:	017d7840 	.word	0x017d7840

08003880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e09d      	b.n	80039ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a2:	d009      	beq.n	80038b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	61da      	str	r2, [r3, #28]
 80038aa:	e005      	b.n	80038b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd fc42 	bl	800115c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038f8:	d902      	bls.n	8003900 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e002      	b.n	8003906 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003904:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800390e:	d007      	beq.n	8003920 <HAL_SPI_Init+0xa0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003918:	d002      	beq.n	8003920 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003962:	ea42 0103 	orr.w	r1, r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	0c1b      	lsrs	r3, r3, #16
 800397c:	f003 0204 	and.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800399c:	ea42 0103 	orr.w	r1, r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b088      	sub	sp, #32
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_SPI_Transmit+0x22>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e15f      	b.n	8003cb8 <HAL_SPI_Transmit+0x2e2>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a00:	f7fd fd1a 	bl	8001438 <HAL_GetTick>
 8003a04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d002      	beq.n	8003a1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
 8003a18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a1a:	e148      	b.n	8003cae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_Transmit+0x52>
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a2c:	e13f      	b.n	8003cae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2203      	movs	r2, #3
 8003a32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	88fa      	ldrh	r2, [r7, #6]
 8003a4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a78:	d10f      	bne.n	8003a9a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b40      	cmp	r3, #64	@ 0x40
 8003aa6:	d007      	beq.n	8003ab8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ab6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ac0:	d94f      	bls.n	8003b62 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_Transmit+0xfa>
 8003aca:	8afb      	ldrh	r3, [r7, #22]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d142      	bne.n	8003b56 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad4:	881a      	ldrh	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003af4:	e02f      	b.n	8003b56 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d112      	bne.n	8003b2a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b08:	881a      	ldrh	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b14:	1c9a      	adds	r2, r3, #2
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b28:	e015      	b.n	8003b56 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b2a:	f7fd fc85 	bl	8001438 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d803      	bhi.n	8003b42 <HAL_SPI_Transmit+0x16c>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d102      	bne.n	8003b48 <HAL_SPI_Transmit+0x172>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003b54:	e0ab      	b.n	8003cae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ca      	bne.n	8003af6 <HAL_SPI_Transmit+0x120>
 8003b60:	e080      	b.n	8003c64 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_SPI_Transmit+0x19a>
 8003b6a:	8afb      	ldrh	r3, [r7, #22]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d174      	bne.n	8003c5a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d912      	bls.n	8003ba0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7e:	881a      	ldrh	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8a:	1c9a      	adds	r2, r3, #2
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b02      	subs	r3, #2
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b9e:	e05c      	b.n	8003c5a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	7812      	ldrb	r2, [r2, #0]
 8003bac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003bc6:	e048      	b.n	8003c5a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d12b      	bne.n	8003c2e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d912      	bls.n	8003c06 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	881a      	ldrh	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf0:	1c9a      	adds	r2, r3, #2
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b02      	subs	r3, #2
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c04:	e029      	b.n	8003c5a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	7812      	ldrb	r2, [r2, #0]
 8003c12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c2c:	e015      	b.n	8003c5a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c2e:	f7fd fc03 	bl	8001438 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d803      	bhi.n	8003c46 <HAL_SPI_Transmit+0x270>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d102      	bne.n	8003c4c <HAL_SPI_Transmit+0x276>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003c58:	e029      	b.n	8003cae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1b1      	bne.n	8003bc8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fd1d 	bl	80046a8 <SPI_EndRxTxTransaction>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e003      	b.n	8003cae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ce4:	e11a      	b.n	8003f1c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cee:	d112      	bne.n	8003d16 <HAL_SPI_Receive+0x56>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10e      	bne.n	8003d16 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d00:	88fa      	ldrh	r2, [r7, #6]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f90e 	bl	8003f2e <HAL_SPI_TransmitReceive>
 8003d12:	4603      	mov	r3, r0
 8003d14:	e107      	b.n	8003f26 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_SPI_Receive+0x64>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e100      	b.n	8003f26 <HAL_SPI_Receive+0x266>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d2c:	f7fd fb84 	bl	8001438 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_SPI_Receive+0x7e>
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d42:	e0eb      	b.n	8003f1c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2204      	movs	r2, #4
 8003d48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d8e:	d908      	bls.n	8003da2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	e007      	b.n	8003db2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003db0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dba:	d10f      	bne.n	8003ddc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de6:	2b40      	cmp	r3, #64	@ 0x40
 8003de8:	d007      	beq.n	8003dfa <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003df8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e02:	d86f      	bhi.n	8003ee4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e04:	e034      	b.n	8003e70 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d117      	bne.n	8003e44 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f103 020c 	add.w	r2, r3, #12
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003e42:	e015      	b.n	8003e70 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e44:	f7fd faf8 	bl	8001438 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d803      	bhi.n	8003e5c <HAL_SPI_Receive+0x19c>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d102      	bne.n	8003e62 <HAL_SPI_Receive+0x1a2>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003e6e:	e055      	b.n	8003f1c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1c4      	bne.n	8003e06 <HAL_SPI_Receive+0x146>
 8003e7c:	e038      	b.n	8003ef0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d115      	bne.n	8003eb8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	b292      	uxth	r2, r2
 8003e98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	1c9a      	adds	r2, r3, #2
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003eb6:	e015      	b.n	8003ee4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb8:	f7fd fabe 	bl	8001438 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d803      	bhi.n	8003ed0 <HAL_SPI_Receive+0x210>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d102      	bne.n	8003ed6 <HAL_SPI_Receive+0x216>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003ee2:	e01b      	b.n	8003f1c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1c6      	bne.n	8003e7e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fb5b 	bl	80045b0 <SPI_EndRxTransaction>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
 8003f12:	e003      	b.n	8003f1c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b08a      	sub	sp, #40	@ 0x28
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x26>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e20a      	b.n	800436a <HAL_SPI_TransmitReceive+0x43c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f5c:	f7fd fa6c 	bl	8001438 <HAL_GetTick>
 8003f60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f74:	887b      	ldrh	r3, [r7, #2]
 8003f76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f78:	7efb      	ldrb	r3, [r7, #27]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d00e      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x6e>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f84:	d106      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x66>
 8003f8e:	7efb      	ldrb	r3, [r7, #27]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d003      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003f9a:	e1e0      	b.n	800435e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x80>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x80>
 8003fa8:	887b      	ldrh	r3, [r7, #2]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003fb4:	e1d3      	b.n	800435e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d003      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2205      	movs	r2, #5
 8003fc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	887a      	ldrh	r2, [r7, #2]
 8003fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	887a      	ldrh	r2, [r7, #2]
 8003ff6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800400c:	d802      	bhi.n	8004014 <HAL_SPI_TransmitReceive+0xe6>
 800400e:	8a3b      	ldrh	r3, [r7, #16]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d908      	bls.n	8004026 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004022:	605a      	str	r2, [r3, #4]
 8004024:	e007      	b.n	8004036 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004034:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b40      	cmp	r3, #64	@ 0x40
 8004042:	d007      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800405c:	f240 8081 	bls.w	8004162 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_SPI_TransmitReceive+0x140>
 8004068:	8a7b      	ldrh	r3, [r7, #18]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d16d      	bne.n	800414a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004092:	e05a      	b.n	800414a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d11b      	bne.n	80040da <HAL_SPI_TransmitReceive+0x1ac>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d016      	beq.n	80040da <HAL_SPI_TransmitReceive+0x1ac>
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d113      	bne.n	80040da <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b6:	881a      	ldrh	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	1c9a      	adds	r2, r3, #2
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d11c      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x1f4>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d016      	beq.n	8004122 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	b292      	uxth	r2, r2
 8004100:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	1c9a      	adds	r2, r3, #2
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800411e:	2301      	movs	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004122:	f7fd f989 	bl	8001438 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800412e:	429a      	cmp	r2, r3
 8004130:	d80b      	bhi.n	800414a <HAL_SPI_TransmitReceive+0x21c>
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d007      	beq.n	800414a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004148:	e109      	b.n	800435e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d19f      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x166>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d199      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x166>
 8004160:	e0e3      	b.n	800432a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_SPI_TransmitReceive+0x244>
 800416a:	8a7b      	ldrh	r3, [r7, #18]
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 80cf 	bne.w	8004310 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d912      	bls.n	80041a2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	881a      	ldrh	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b02      	subs	r3, #2
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041a0:	e0b6      	b.n	8004310 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	7812      	ldrb	r2, [r2, #0]
 80041ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c8:	e0a2      	b.n	8004310 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d134      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x314>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02f      	beq.n	8004242 <HAL_SPI_TransmitReceive+0x314>
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d12c      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d912      	bls.n	8004218 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b02      	subs	r3, #2
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004216:	e012      	b.n	800423e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	7812      	ldrb	r2, [r2, #0]
 8004224:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d148      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x3b4>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d042      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d923      	bls.n	80042b0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	b292      	uxth	r2, r2
 8004274:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	1c9a      	adds	r2, r3, #2
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b02      	subs	r3, #2
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	d81f      	bhi.n	80042de <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	e016      	b.n	80042de <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f103 020c 	add.w	r2, r3, #12
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	7812      	ldrb	r2, [r2, #0]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042de:	2301      	movs	r3, #1
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042e2:	f7fd f8a9 	bl	8001438 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d803      	bhi.n	80042fa <HAL_SPI_TransmitReceive+0x3cc>
 80042f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d102      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x3d2>
 80042fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800430e:	e026      	b.n	800435e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	f47f af57 	bne.w	80041ca <HAL_SPI_TransmitReceive+0x29c>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	f47f af50 	bne.w	80041ca <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f9ba 	bl	80046a8 <SPI_EndRxTxTransaction>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004354:	e003      	b.n	800435e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004366:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800436a:	4618      	mov	r0, r3
 800436c:	3728      	adds	r7, #40	@ 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004384:	f7fd f858 	bl	8001438 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4413      	add	r3, r2
 8004392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004394:	f7fd f850 	bl	8001438 <HAL_GetTick>
 8004398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800439a:	4b39      	ldr	r3, [pc, #228]	@ (8004480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	015b      	lsls	r3, r3, #5
 80043a0:	0d1b      	lsrs	r3, r3, #20
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043aa:	e054      	b.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d050      	beq.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043b4:	f7fd f840 	bl	8001438 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d902      	bls.n	80043ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d13d      	bne.n	8004446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043e2:	d111      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ec:	d004      	beq.n	80043f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f6:	d107      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004410:	d10f      	bne.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e017      	b.n	8004476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	3b01      	subs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d19b      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000000 	.word	0x20000000

08004484 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	@ 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004496:	f7fc ffcf 	bl	8001438 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80044a6:	f7fc ffc7 	bl	8001438 <HAL_GetTick>
 80044aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044b4:	4b3d      	ldr	r3, [pc, #244]	@ (80045ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	00da      	lsls	r2, r3, #3
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	0d1b      	lsrs	r3, r3, #20
 80044c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044cc:	e060      	b.n	8004590 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80044d4:	d107      	bne.n	80044e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d050      	beq.n	8004590 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044ee:	f7fc ffa3 	bl	8001438 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d902      	bls.n	8004504 <SPI_WaitFifoStateUntilTimeout+0x80>
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d13d      	bne.n	8004580 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004512:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800451c:	d111      	bne.n	8004542 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004526:	d004      	beq.n	8004532 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004530:	d107      	bne.n	8004542 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004540:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454a:	d10f      	bne.n	800456c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800456a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e010      	b.n	80045a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	3b01      	subs	r3, #1
 800458e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d196      	bne.n	80044ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3728      	adds	r7, #40	@ 0x28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000000 	.word	0x20000000

080045b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045c4:	d111      	bne.n	80045ea <SPI_EndRxTransaction+0x3a>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ce:	d004      	beq.n	80045da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d8:	d107      	bne.n	80045ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045f2:	d112      	bne.n	800461a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2200      	movs	r2, #0
 80045fc:	2180      	movs	r1, #128	@ 0x80
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff feb8 	bl	8004374 <SPI_WaitFlagStateUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d021      	beq.n	800464e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e03d      	b.n	8004696 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800461a:	4b21      	ldr	r3, [pc, #132]	@ (80046a0 <SPI_EndRxTransaction+0xf0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a21      	ldr	r2, [pc, #132]	@ (80046a4 <SPI_EndRxTransaction+0xf4>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	0d5b      	lsrs	r3, r3, #21
 8004626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	3b01      	subs	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004646:	2b80      	cmp	r3, #128	@ 0x80
 8004648:	d0f2      	beq.n	8004630 <SPI_EndRxTransaction+0x80>
 800464a:	e000      	b.n	800464e <SPI_EndRxTransaction+0x9e>
        break;
 800464c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004656:	d11d      	bne.n	8004694 <SPI_EndRxTransaction+0xe4>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004660:	d004      	beq.n	800466c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466a:	d113      	bne.n	8004694 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff ff03 	bl	8004484 <SPI_WaitFifoStateUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e000      	b.n	8004696 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000000 	.word	0x20000000
 80046a4:	165e9f81 	.word	0x165e9f81

080046a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff fedf 	bl	8004484 <SPI_WaitFifoStateUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e046      	b.n	800476a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046dc:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <SPI_EndRxTxTransaction+0xcc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a25      	ldr	r2, [pc, #148]	@ (8004778 <SPI_EndRxTxTransaction+0xd0>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	0d5b      	lsrs	r3, r3, #21
 80046e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046ec:	fb02 f303 	mul.w	r3, r2, r3
 80046f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046fa:	d112      	bne.n	8004722 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	2180      	movs	r1, #128	@ 0x80
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fe34 	bl	8004374 <SPI_WaitFlagStateUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e023      	b.n	800476a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3b01      	subs	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004738:	2b80      	cmp	r3, #128	@ 0x80
 800473a:	d0f2      	beq.n	8004722 <SPI_EndRxTxTransaction+0x7a>
 800473c:	e000      	b.n	8004740 <SPI_EndRxTxTransaction+0x98>
        break;
 800473e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2200      	movs	r2, #0
 8004748:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff fe99 	bl	8004484 <SPI_WaitFifoStateUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e000      	b.n	800476a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000000 	.word	0x20000000
 8004778:	165e9f81 	.word	0x165e9f81

0800477c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e049      	b.n	8004822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fc fd1e 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f000 fca8 	bl	8005110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e049      	b.n	80048d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f841 	bl	80048d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f000 fc51 	bl	8005110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <HAL_TIM_PWM_Start+0x24>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e03c      	b.n	800498a <HAL_TIM_PWM_Start+0x9e>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b04      	cmp	r3, #4
 8004914:	d109      	bne.n	800492a <HAL_TIM_PWM_Start+0x3e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b01      	cmp	r3, #1
 8004920:	bf14      	ite	ne
 8004922:	2301      	movne	r3, #1
 8004924:	2300      	moveq	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e02f      	b.n	800498a <HAL_TIM_PWM_Start+0x9e>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d109      	bne.n	8004944 <HAL_TIM_PWM_Start+0x58>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	e022      	b.n	800498a <HAL_TIM_PWM_Start+0x9e>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b0c      	cmp	r3, #12
 8004948:	d109      	bne.n	800495e <HAL_TIM_PWM_Start+0x72>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	bf14      	ite	ne
 8004956:	2301      	movne	r3, #1
 8004958:	2300      	moveq	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e015      	b.n	800498a <HAL_TIM_PWM_Start+0x9e>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b10      	cmp	r3, #16
 8004962:	d109      	bne.n	8004978 <HAL_TIM_PWM_Start+0x8c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e008      	b.n	800498a <HAL_TIM_PWM_Start+0x9e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e092      	b.n	8004ab8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Start+0xb6>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049a0:	e023      	b.n	80049ea <HAL_TIM_PWM_Start+0xfe>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Start+0xc6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b0:	e01b      	b.n	80049ea <HAL_TIM_PWM_Start+0xfe>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Start+0xd6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c0:	e013      	b.n	80049ea <HAL_TIM_PWM_Start+0xfe>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_PWM_Start+0xe6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049d0:	e00b      	b.n	80049ea <HAL_TIM_PWM_Start+0xfe>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_PWM_Start+0xf6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e0:	e003      	b.n	80049ea <HAL_TIM_PWM_Start+0xfe>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2201      	movs	r2, #1
 80049f0:	6839      	ldr	r1, [r7, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 ff30 	bl	8005858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a30      	ldr	r2, [pc, #192]	@ (8004ac0 <HAL_TIM_PWM_Start+0x1d4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_PWM_Start+0x120>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac4 <HAL_TIM_PWM_Start+0x1d8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIM_PWM_Start+0x124>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_TIM_PWM_Start+0x126>
 8004a10:	2300      	movs	r3, #0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a25      	ldr	r2, [pc, #148]	@ (8004ac0 <HAL_TIM_PWM_Start+0x1d4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d022      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x18a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d01d      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x18a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a22      	ldr	r2, [pc, #136]	@ (8004ac8 <HAL_TIM_PWM_Start+0x1dc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d018      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x18a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a20      	ldr	r2, [pc, #128]	@ (8004acc <HAL_TIM_PWM_Start+0x1e0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x18a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <HAL_TIM_PWM_Start+0x1e4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x18a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a19      	ldr	r2, [pc, #100]	@ (8004ac4 <HAL_TIM_PWM_Start+0x1d8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x18a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad4 <HAL_TIM_PWM_Start+0x1e8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x18a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a19      	ldr	r2, [pc, #100]	@ (8004ad8 <HAL_TIM_PWM_Start+0x1ec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d115      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <HAL_TIM_PWM_Start+0x1f0>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d015      	beq.n	8004ab4 <HAL_TIM_PWM_Start+0x1c8>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a8e:	d011      	beq.n	8004ab4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa0:	e008      	b.n	8004ab4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e000      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40010400 	.word	0x40010400
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40014000 	.word	0x40014000
 8004ad8:	40001800 	.word	0x40001800
 8004adc:	00010007 	.word	0x00010007

08004ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d020      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0202 	mvn.w	r2, #2
 8004b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fad2 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fac4 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fad5 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d020      	beq.n	8004b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0204 	mvn.w	r2, #4
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 faac 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fa9e 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 faaf 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d020      	beq.n	8004bdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01b      	beq.n	8004bdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0208 	mvn.w	r2, #8
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa86 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa78 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa89 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d020      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01b      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0210 	mvn.w	r2, #16
 8004bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fa60 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004c14:	e005      	b.n	8004c22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa52 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fa63 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0201 	mvn.w	r2, #1
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa30 	bl	80050ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00c      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fead 	bl	80059d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00c      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fea5 	bl	80059e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00c      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fa1d 	bl	80050fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00c      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f06f 0220 	mvn.w	r2, #32
 8004cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fe6d 	bl	80059c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e0ff      	b.n	8004f0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b14      	cmp	r3, #20
 8004d1a:	f200 80f0 	bhi.w	8004efe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d79 	.word	0x08004d79
 8004d28:	08004eff 	.word	0x08004eff
 8004d2c:	08004eff 	.word	0x08004eff
 8004d30:	08004eff 	.word	0x08004eff
 8004d34:	08004db9 	.word	0x08004db9
 8004d38:	08004eff 	.word	0x08004eff
 8004d3c:	08004eff 	.word	0x08004eff
 8004d40:	08004eff 	.word	0x08004eff
 8004d44:	08004dfb 	.word	0x08004dfb
 8004d48:	08004eff 	.word	0x08004eff
 8004d4c:	08004eff 	.word	0x08004eff
 8004d50:	08004eff 	.word	0x08004eff
 8004d54:	08004e3b 	.word	0x08004e3b
 8004d58:	08004eff 	.word	0x08004eff
 8004d5c:	08004eff 	.word	0x08004eff
 8004d60:	08004eff 	.word	0x08004eff
 8004d64:	08004e7d 	.word	0x08004e7d
 8004d68:	08004eff 	.word	0x08004eff
 8004d6c:	08004eff 	.word	0x08004eff
 8004d70:	08004eff 	.word	0x08004eff
 8004d74:	08004ebd 	.word	0x08004ebd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fa72 	bl	8005268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0208 	orr.w	r2, r2, #8
 8004d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0204 	bic.w	r2, r2, #4
 8004da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6999      	ldr	r1, [r3, #24]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	619a      	str	r2, [r3, #24]
      break;
 8004db6:	e0a5      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fac4 	bl	800534c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6999      	ldr	r1, [r3, #24]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	021a      	lsls	r2, r3, #8
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	619a      	str	r2, [r3, #24]
      break;
 8004df8:	e084      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fb1b 	bl	800543c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0208 	orr.w	r2, r2, #8
 8004e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0204 	bic.w	r2, r2, #4
 8004e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	61da      	str	r2, [r3, #28]
      break;
 8004e38:	e064      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fb71 	bl	8005528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69d9      	ldr	r1, [r3, #28]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	021a      	lsls	r2, r3, #8
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	61da      	str	r2, [r3, #28]
      break;
 8004e7a:	e043      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fba8 	bl	80055d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0208 	orr.w	r2, r2, #8
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004eba:	e023      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fbda 	bl	800567c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ed6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	021a      	lsls	r2, r3, #8
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004efc:	e002      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
      break;
 8004f02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop

08004f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIM_ConfigClockSource+0x1c>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e0b4      	b.n	800509e <HAL_TIM_ConfigClockSource+0x186>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	4b56      	ldr	r3, [pc, #344]	@ (80050a8 <HAL_TIM_ConfigClockSource+0x190>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f6c:	d03e      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0xd4>
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f72:	f200 8087 	bhi.w	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f7a:	f000 8086 	beq.w	800508a <HAL_TIM_ConfigClockSource+0x172>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f82:	d87f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b70      	cmp	r3, #112	@ 0x70
 8004f86:	d01a      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0xa6>
 8004f88:	2b70      	cmp	r3, #112	@ 0x70
 8004f8a:	d87b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b60      	cmp	r3, #96	@ 0x60
 8004f8e:	d050      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0x11a>
 8004f90:	2b60      	cmp	r3, #96	@ 0x60
 8004f92:	d877      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f94:	2b50      	cmp	r3, #80	@ 0x50
 8004f96:	d03c      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xfa>
 8004f98:	2b50      	cmp	r3, #80	@ 0x50
 8004f9a:	d873      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f9c:	2b40      	cmp	r3, #64	@ 0x40
 8004f9e:	d058      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x13a>
 8004fa0:	2b40      	cmp	r3, #64	@ 0x40
 8004fa2:	d86f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa4:	2b30      	cmp	r3, #48	@ 0x30
 8004fa6:	d064      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa8:	2b30      	cmp	r3, #48	@ 0x30
 8004faa:	d86b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d060      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d867      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05c      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d05a      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fbc:	e062      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fce:	f000 fc23 	bl	8005818 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	609a      	str	r2, [r3, #8]
      break;
 8004fea:	e04f      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ffc:	f000 fc0c 	bl	8005818 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800500e:	609a      	str	r2, [r3, #8]
      break;
 8005010:	e03c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800501e:	461a      	mov	r2, r3
 8005020:	f000 fb80 	bl	8005724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2150      	movs	r1, #80	@ 0x50
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fbd9 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 8005030:	e02c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800503e:	461a      	mov	r2, r3
 8005040:	f000 fb9f 	bl	8005782 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2160      	movs	r1, #96	@ 0x60
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fbc9 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 8005050:	e01c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800505e:	461a      	mov	r2, r3
 8005060:	f000 fb60 	bl	8005724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2140      	movs	r1, #64	@ 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fbb9 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 8005070:	e00c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f000 fbb0 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 8005082:	e003      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      break;
 8005088:	e000      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800508a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	fffeff88 	.word	0xfffeff88

080050ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a46      	ldr	r2, [pc, #280]	@ (800523c <TIM_Base_SetConfig+0x12c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800512e:	d00f      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a43      	ldr	r2, [pc, #268]	@ (8005240 <TIM_Base_SetConfig+0x130>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00b      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a42      	ldr	r2, [pc, #264]	@ (8005244 <TIM_Base_SetConfig+0x134>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d007      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a41      	ldr	r2, [pc, #260]	@ (8005248 <TIM_Base_SetConfig+0x138>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a40      	ldr	r2, [pc, #256]	@ (800524c <TIM_Base_SetConfig+0x13c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d108      	bne.n	8005162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a35      	ldr	r2, [pc, #212]	@ (800523c <TIM_Base_SetConfig+0x12c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d02b      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005170:	d027      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a32      	ldr	r2, [pc, #200]	@ (8005240 <TIM_Base_SetConfig+0x130>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d023      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a31      	ldr	r2, [pc, #196]	@ (8005244 <TIM_Base_SetConfig+0x134>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01f      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a30      	ldr	r2, [pc, #192]	@ (8005248 <TIM_Base_SetConfig+0x138>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d01b      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2f      	ldr	r2, [pc, #188]	@ (800524c <TIM_Base_SetConfig+0x13c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d017      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2e      	ldr	r2, [pc, #184]	@ (8005250 <TIM_Base_SetConfig+0x140>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2d      	ldr	r2, [pc, #180]	@ (8005254 <TIM_Base_SetConfig+0x144>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00f      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005258 <TIM_Base_SetConfig+0x148>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2b      	ldr	r2, [pc, #172]	@ (800525c <TIM_Base_SetConfig+0x14c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005260 <TIM_Base_SetConfig+0x150>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a29      	ldr	r2, [pc, #164]	@ (8005264 <TIM_Base_SetConfig+0x154>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d108      	bne.n	80051d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a10      	ldr	r2, [pc, #64]	@ (800523c <TIM_Base_SetConfig+0x12c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_Base_SetConfig+0xf8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a12      	ldr	r2, [pc, #72]	@ (800524c <TIM_Base_SetConfig+0x13c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d103      	bne.n	8005210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d105      	bne.n	800522e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f023 0201 	bic.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	611a      	str	r2, [r3, #16]
  }
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40010000 	.word	0x40010000
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800
 8005248:	40000c00 	.word	0x40000c00
 800524c:	40010400 	.word	0x40010400
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400
 8005258:	40014800 	.word	0x40014800
 800525c:	40001800 	.word	0x40001800
 8005260:	40001c00 	.word	0x40001c00
 8005264:	40002000 	.word	0x40002000

08005268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f023 0201 	bic.w	r2, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4b2b      	ldr	r3, [pc, #172]	@ (8005340 <TIM_OC1_SetConfig+0xd8>)
 8005294:	4013      	ands	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 0302 	bic.w	r3, r3, #2
 80052b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a21      	ldr	r2, [pc, #132]	@ (8005344 <TIM_OC1_SetConfig+0xdc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_OC1_SetConfig+0x64>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a20      	ldr	r2, [pc, #128]	@ (8005348 <TIM_OC1_SetConfig+0xe0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d10c      	bne.n	80052e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 0308 	bic.w	r3, r3, #8
 80052d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a16      	ldr	r2, [pc, #88]	@ (8005344 <TIM_OC1_SetConfig+0xdc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_OC1_SetConfig+0x8e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a15      	ldr	r2, [pc, #84]	@ (8005348 <TIM_OC1_SetConfig+0xe0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d111      	bne.n	800531a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	621a      	str	r2, [r3, #32]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	fffeff8f 	.word	0xfffeff8f
 8005344:	40010000 	.word	0x40010000
 8005348:	40010400 	.word	0x40010400

0800534c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f023 0210 	bic.w	r2, r3, #16
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4b2e      	ldr	r3, [pc, #184]	@ (8005430 <TIM_OC2_SetConfig+0xe4>)
 8005378:	4013      	ands	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0320 	bic.w	r3, r3, #32
 8005396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a23      	ldr	r2, [pc, #140]	@ (8005434 <TIM_OC2_SetConfig+0xe8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_OC2_SetConfig+0x68>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a22      	ldr	r2, [pc, #136]	@ (8005438 <TIM_OC2_SetConfig+0xec>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d10d      	bne.n	80053d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a18      	ldr	r2, [pc, #96]	@ (8005434 <TIM_OC2_SetConfig+0xe8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_OC2_SetConfig+0x94>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a17      	ldr	r2, [pc, #92]	@ (8005438 <TIM_OC2_SetConfig+0xec>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d113      	bne.n	8005408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	feff8fff 	.word	0xfeff8fff
 8005434:	40010000 	.word	0x40010000
 8005438:	40010400 	.word	0x40010400

0800543c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4b2d      	ldr	r3, [pc, #180]	@ (800551c <TIM_OC3_SetConfig+0xe0>)
 8005468:	4013      	ands	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a22      	ldr	r2, [pc, #136]	@ (8005520 <TIM_OC3_SetConfig+0xe4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d003      	beq.n	80054a2 <TIM_OC3_SetConfig+0x66>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a21      	ldr	r2, [pc, #132]	@ (8005524 <TIM_OC3_SetConfig+0xe8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d10d      	bne.n	80054be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a17      	ldr	r2, [pc, #92]	@ (8005520 <TIM_OC3_SetConfig+0xe4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_OC3_SetConfig+0x92>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a16      	ldr	r2, [pc, #88]	@ (8005524 <TIM_OC3_SetConfig+0xe8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d113      	bne.n	80054f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	621a      	str	r2, [r3, #32]
}
 8005510:	bf00      	nop
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	fffeff8f 	.word	0xfffeff8f
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400

08005528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4b1e      	ldr	r3, [pc, #120]	@ (80055cc <TIM_OC4_SetConfig+0xa4>)
 8005554:	4013      	ands	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a13      	ldr	r2, [pc, #76]	@ (80055d0 <TIM_OC4_SetConfig+0xa8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC4_SetConfig+0x68>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a12      	ldr	r2, [pc, #72]	@ (80055d4 <TIM_OC4_SetConfig+0xac>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d109      	bne.n	80055a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	feff8fff 	.word	0xfeff8fff
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40010400 	.word	0x40010400

080055d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4b1b      	ldr	r3, [pc, #108]	@ (8005670 <TIM_OC5_SetConfig+0x98>)
 8005604:	4013      	ands	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005618:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a12      	ldr	r2, [pc, #72]	@ (8005674 <TIM_OC5_SetConfig+0x9c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_OC5_SetConfig+0x5e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a11      	ldr	r2, [pc, #68]	@ (8005678 <TIM_OC5_SetConfig+0xa0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d109      	bne.n	800564a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800563c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	621a      	str	r2, [r3, #32]
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	fffeff8f 	.word	0xfffeff8f
 8005674:	40010000 	.word	0x40010000
 8005678:	40010400 	.word	0x40010400

0800567c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005718 <TIM_OC6_SetConfig+0x9c>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	051b      	lsls	r3, r3, #20
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a13      	ldr	r2, [pc, #76]	@ (800571c <TIM_OC6_SetConfig+0xa0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_OC6_SetConfig+0x60>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a12      	ldr	r2, [pc, #72]	@ (8005720 <TIM_OC6_SetConfig+0xa4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d109      	bne.n	80056f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	029b      	lsls	r3, r3, #10
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	feff8fff 	.word	0xfeff8fff
 800571c:	40010000 	.word	0x40010000
 8005720:	40010400 	.word	0x40010400

08005724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f023 0201 	bic.w	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800574e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f023 030a 	bic.w	r3, r3, #10
 8005760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005782:	b480      	push	{r7}
 8005784:	b087      	sub	sp, #28
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f023 0210 	bic.w	r2, r3, #16
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	031b      	lsls	r3, r3, #12
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	f043 0307 	orr.w	r3, r3, #7
 8005804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	431a      	orrs	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4313      	orrs	r3, r2
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2201      	movs	r2, #1
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	43db      	mvns	r3, r3
 800587a:	401a      	ands	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a1a      	ldr	r2, [r3, #32]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f003 031f 	and.w	r3, r3, #31
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	fa01 f303 	lsl.w	r3, r1, r3
 8005890:	431a      	orrs	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e06d      	b.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a30      	ldr	r2, [pc, #192]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a2f      	ldr	r2, [pc, #188]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d108      	bne.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a20      	ldr	r2, [pc, #128]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d022      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592e:	d01d      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1d      	ldr	r2, [pc, #116]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d018      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1c      	ldr	r2, [pc, #112]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1a      	ldr	r2, [pc, #104]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00e      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a15      	ldr	r2, [pc, #84]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a16      	ldr	r2, [pc, #88]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a15      	ldr	r2, [pc, #84]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	4313      	orrs	r3, r2
 800597c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40010400 	.word	0x40010400
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40001800 	.word	0x40001800

080059c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <memset>:
 80059fc:	4402      	add	r2, r0
 80059fe:	4603      	mov	r3, r0
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d100      	bne.n	8005a06 <memset+0xa>
 8005a04:	4770      	bx	lr
 8005a06:	f803 1b01 	strb.w	r1, [r3], #1
 8005a0a:	e7f9      	b.n	8005a00 <memset+0x4>

08005a0c <__libc_init_array>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a44 <__libc_init_array+0x38>)
 8005a10:	4c0d      	ldr	r4, [pc, #52]	@ (8005a48 <__libc_init_array+0x3c>)
 8005a12:	1b64      	subs	r4, r4, r5
 8005a14:	10a4      	asrs	r4, r4, #2
 8005a16:	2600      	movs	r6, #0
 8005a18:	42a6      	cmp	r6, r4
 8005a1a:	d109      	bne.n	8005a30 <__libc_init_array+0x24>
 8005a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a4c <__libc_init_array+0x40>)
 8005a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a50 <__libc_init_array+0x44>)
 8005a20:	f000 f818 	bl	8005a54 <_init>
 8005a24:	1b64      	subs	r4, r4, r5
 8005a26:	10a4      	asrs	r4, r4, #2
 8005a28:	2600      	movs	r6, #0
 8005a2a:	42a6      	cmp	r6, r4
 8005a2c:	d105      	bne.n	8005a3a <__libc_init_array+0x2e>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a34:	4798      	blx	r3
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7ee      	b.n	8005a18 <__libc_init_array+0xc>
 8005a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3e:	4798      	blx	r3
 8005a40:	3601      	adds	r6, #1
 8005a42:	e7f2      	b.n	8005a2a <__libc_init_array+0x1e>
 8005a44:	08005a8c 	.word	0x08005a8c
 8005a48:	08005a8c 	.word	0x08005a8c
 8005a4c:	08005a8c 	.word	0x08005a8c
 8005a50:	08005a90 	.word	0x08005a90

08005a54 <_init>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	bf00      	nop
 8005a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5a:	bc08      	pop	{r3}
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	4770      	bx	lr

08005a60 <_fini>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	bf00      	nop
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr
