
profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005434  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800562c  0800562c  0000662c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800563c  0800563c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800563c  0800563c  0000663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005644  08005644  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005644  08005644  00006644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005648  08005648  00006648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800564c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  08005658  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005658  0000723c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108a6  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d6  00000000  00000000  000178e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  0001a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b96  00000000  00000000  0001b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286d8  00000000  00000000  0001bc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c19  00000000  00000000  00044326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc9f3  00000000  00000000  00056f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e4c  00000000  00000000  00153978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001577c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005614 	.word	0x08005614

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005614 	.word	0x08005614

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <writeRegister>:
 * @param num Number of bytes to be written
 * @retval none
 * @note Since the register values to be written are 8-bit, there is no need to multiple writing
 */
static void writeRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	@ 0x3f
 800053c:	d901      	bls.n	8000542 <writeRegister+0x1a>
		address = 63;
 800053e:	233f      	movs	r3, #63	@ 0x3f
 8000540:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
		address = (address << 1 & ~0x01);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	480c      	ldr	r0, [pc, #48]	@ (8000580 <writeRegister+0x58>)
 8000550:	f002 fae2 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000554:	1df9      	adds	r1, r7, #7
 8000556:	230a      	movs	r3, #10
 8000558:	2201      	movs	r2, #1
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <writeRegister+0x5c>)
 800055c:	f003 f81b 	bl	8003596 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,value,num,10);
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	b29a      	uxth	r2, r3
 8000564:	230a      	movs	r3, #10
 8000566:	6839      	ldr	r1, [r7, #0]
 8000568:	4806      	ldr	r0, [pc, #24]	@ (8000584 <writeRegister+0x5c>)
 800056a:	f003 f814 	bl	8003596 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2120      	movs	r1, #32
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <writeRegister+0x58>)
 8000574:	f002 fad0 	bl	8002b18 <HAL_GPIO_WritePin>
	

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020400 	.word	0x40020400
 8000584:	200000f0 	.word	0x200000f0

08000588 <readRegister>:
 *	@param value Pointer to buffer that stores the read value
 *	@param num Number of bytes to be written
 * 	@retval none
 */
static void readRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b3f      	cmp	r3, #63	@ 0x3f
 800059c:	d901      	bls.n	80005a2 <readRegister+0x1a>
		address = 63;
 800059e:	233f      	movs	r3, #63	@ 0x3f
 80005a0:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
		address = (address << 1 | 0x01);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <readRegister+0x60>)
 80005b8:	f002 faae 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	230a      	movs	r3, #10
 80005c0:	2201      	movs	r2, #1
 80005c2:	480a      	ldr	r0, [pc, #40]	@ (80005ec <readRegister+0x64>)
 80005c4:	f002 ffe7 	bl	8003596 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <readRegister+0x64>)
 80005d2:	f003 f955 	bl	8003880 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2120      	movs	r1, #32
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <readRegister+0x60>)
 80005dc:	f002 fa9c 	bl	8002b18 <HAL_GPIO_WritePin>
	
	
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020400 	.word	0x40020400
 80005ec:	200000f0 	.word	0x200000f0

080005f0 <adxlFormat>:
						2 		|  				+-8g		
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1); //Set register to 0
 80005fc:	f107 030f 	add.w	r3, r7, #15
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	202c      	movs	r0, #44	@ 0x2c
 8000606:	f7ff ff8f 	bl	8000528 <writeRegister>
	formatreg = (adxl->IntMode << 6 | adxl->Range) & RANGE_REG_MASK;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	78db      	ldrb	r3, [r3, #3]
 800060e:	019b      	lsls	r3, r3, #6
 8000610:	b25a      	sxtb	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	b25b      	sxtb	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b25b      	sxtb	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0343 	and.w	r3, r3, #67	@ 0x43
 8000622:	b2db      	uxtb	r3, r3
 8000624:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1);
 8000626:	f107 030f 	add.w	r3, r7, #15
 800062a:	2201      	movs	r2, #1
 800062c:	4619      	mov	r1, r3
 800062e:	202c      	movs	r0, #44	@ 0x2c
 8000630:	f7ff ff7a 	bl	8000528 <writeRegister>

	formatreg = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg,1);
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	202d      	movs	r0, #45	@ 0x2d
 8000642:	f7ff ff71 	bl	8000528 <writeRegister>
	formatreg = (adxl->DataReadyMode << 2 | adxl->TempMode << 1 | adxl->StandbyMode) & POWER_CTL_REG_MASK;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	b25a      	sxtb	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	b25b      	sxtb	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg, 1);
 800066e:	f107 030f 	add.w	r3, r7, #15
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	202d      	movs	r0, #45	@ 0x2d
 8000678:	f7ff ff56 	bl	8000528 <writeRegister>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <adxlReset>:

/**
 * @brief Call to reset ADXL355
 */
static void adxlReset(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
    uint8_t shadow_reg_store[5] = {};
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	2300      	movs	r3, #0
 8000690:	753b      	strb	r3, [r7, #20]
    uint8_t shadow_reg_read[5] = {};
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	733b      	strb	r3, [r7, #12]
    uint8_t reset_write = ADXL_RESET_WRITE;
 800069a:	2352      	movs	r3, #82	@ 0x52
 800069c:	71fb      	strb	r3, [r7, #7]
    //Store values from shadow registers
    readRegister(SHADOW_REG1, shadow_reg_store, 5);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2205      	movs	r2, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	2050      	movs	r0, #80	@ 0x50
 80006a8:	f7ff ff6e 	bl	8000588 <readRegister>
    while (1) {
        //Perform a software reset
        writeRegister(ADXL_RESET, &reset_write, 1);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	202f      	movs	r0, #47	@ 0x2f
 80006b4:	f7ff ff38 	bl	8000528 <writeRegister>
        //Read shadow registers after reset
        readRegister(SHADOW_REG1, shadow_reg_read, 5);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2205      	movs	r2, #5
 80006be:	4619      	mov	r1, r3
 80006c0:	2050      	movs	r0, #80	@ 0x50
 80006c2:	f7ff ff61 	bl	8000588 <readRegister>
        // Check if shadow registers match the stored values
        uint8_t match = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < 5; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	e011      	b.n	80006f4 <adxlReset+0x70>
            if (shadow_reg_read[i] != shadow_reg_store[i]) {
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	4413      	add	r3, r2
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	f107 0110 	add.w	r1, r7, #16
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	440b      	add	r3, r1
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d002      	beq.n	80006ee <adxlReset+0x6a>
                match = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	77fb      	strb	r3, [r7, #31]
                break;
 80006ec:	e005      	b.n	80006fa <adxlReset+0x76>
        for (int i = 0; i < 5; i++) {
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	3301      	adds	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	ddea      	ble.n	80006d0 <adxlReset+0x4c>
            }
        }
        // If all shadow registers match, exit the loop
        if (match) break;
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d100      	bne.n	8000702 <adxlReset+0x7e>
    while (1) {
 8000700:	e7d4      	b.n	80006ac <adxlReset+0x28>
        if (match) break;
 8000702:	bf00      	nop
    }
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	482d      	ldr	r0, [pc, #180]	@ (80007d0 <ADXL_Init+0xc4>)
 800071a:	f002 f9fd 	bl	8002b18 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f000 fee0 	bl	80014e4 <HAL_Delay>
	//Reset device
	adxlReset();
 8000724:	f7ff ffae 	bl	8000684 <adxlReset>
	uint8_t testval[2] = {};
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]
	// The Device Address register is constant, i.e. = 0xAD
	readRegister(DEVID_AD, testval, 2);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2202      	movs	r2, #2
 8000732:	4619      	mov	r1, r3
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff27 	bl	8000588 <readRegister>
	if (testval[0] != DEVID_AD_DEFAULT_VAL || testval[1] != DEVID_MST_DEFAULT_VAL) return ADXL_ERR;
 800073a:	7b3b      	ldrb	r3, [r7, #12]
 800073c:	2bad      	cmp	r3, #173	@ 0xad
 800073e:	d102      	bne.n	8000746 <ADXL_Init+0x3a>
 8000740:	7b7b      	ldrb	r3, [r7, #13]
 8000742:	2b1d      	cmp	r3, #29
 8000744:	d001      	beq.n	800074a <ADXL_Init+0x3e>
 8000746:	2301      	movs	r3, #1
 8000748:	e03d      	b.n	80007c6 <ADXL_Init+0xba>

	//Init of BW_RATE and DATAFORMAT registers
	adxlFormat(adxl);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff50 	bl	80005f0 <adxlFormat>
	
	// Settings gains 
	switch (adxl->Range) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d01e      	beq.n	8000796 <ADXL_Init+0x8a>
 8000758:	2b03      	cmp	r3, #3
 800075a:	dc28      	bgt.n	80007ae <ADXL_Init+0xa2>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d002      	beq.n	8000766 <ADXL_Init+0x5a>
 8000760:	2b02      	cmp	r3, #2
 8000762:	d00c      	beq.n	800077e <ADXL_Init+0x72>
 8000764:	e023      	b.n	80007ae <ADXL_Init+0xa2>
		case ADXL_RANGE_2G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <ADXL_Init+0xc8>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <ADXL_Init+0xcc>)
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <ADXL_Init+0xc8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1a      	ldr	r2, [pc, #104]	@ (80007dc <ADXL_Init+0xd0>)
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <ADXL_Init+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <ADXL_Init+0xd4>)
 800077a:	6013      	str	r3, [r2, #0]
			break;
 800077c:	e022      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_4G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_4G;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <ADXL_Init+0xc8>)
 8000780:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <ADXL_Init+0xd8>)
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <ADXL_Init+0xc8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <ADXL_Init+0xd0>)
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <ADXL_Init+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <ADXL_Init+0xd4>)
 8000792:	6013      	str	r3, [r2, #0]
			break;
 8000794:	e016      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_8G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_8G;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <ADXL_Init+0xc8>)
 8000798:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <ADXL_Init+0xdc>)
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <ADXL_Init+0xc8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <ADXL_Init+0xd0>)
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <ADXL_Init+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <ADXL_Init+0xd4>)
 80007aa:	6013      	str	r3, [r2, #0]
			break;
 80007ac:	e00a      	b.n	80007c4 <ADXL_Init+0xb8>
		default:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <ADXL_Init+0xcc>)
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <ADXL_Init+0xd0>)
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <ADXL_Init+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <ADXL_Init+0xd4>)
 80007c2:	6013      	str	r3, [r2, #0]
}
			
	return ADXL_OK;
 80007c4:	2300      	movs	r3, #0
	
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020400 	.word	0x40020400
 80007d4:	20000030 	.word	0x20000030
 80007d8:	36831049 	.word	0x36831049
 80007dc:	2000002c 	.word	0x2000002c
 80007e0:	20000028 	.word	0x20000028
 80007e4:	37031494 	.word	0x37031494
 80007e8:	3783126f 	.word	0x3783126f

080007ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000800:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <MX_ADC1_Init+0x9c>)
 8000802:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_ADC1_Init+0x98>)
 800082c:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_ADC1_Init+0xa0>)
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000846:	2201      	movs	r2, #1
 8000848:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_ADC1_Init+0x98>)
 800084c:	f000 fe6e 	bl	800152c <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fac7 	bl	8000de8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800085a:	230a      	movs	r3, #10
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2301      	movs	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_ADC1_Init+0x98>)
 800086c:	f000 fea2 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000876:	f000 fab7 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000034 	.word	0x20000034
 8000888:	40012000 	.word	0x40012000
 800088c:	0f000001 	.word	0x0f000001

08000890 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	@ 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <HAL_ADC_MspInit+0x74>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d123      	bne.n	80008fa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a14      	ldr	r2, [pc, #80]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <HAL_ADC_MspInit+0x7c>)
 80008f6:	f001 ff63 	bl	80027c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	@ 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40012000 	.word	0x40012000
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800

08000910 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000916:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <MX_CAN1_Init+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_CAN1_Init+0x64>)
 800091c:	2202      	movs	r2, #2
 800091e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_CAN1_Init+0x64>)
 800092e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000932:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000936:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800093a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800093c:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <MX_CAN1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000944:	2201      	movs	r2, #1
 8000946:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_CAN1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_CAN1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000962:	f001 f877 	bl	8001a54 <HAL_CAN_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800096c:	f000 fa3c 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000007c 	.word	0x2000007c
 8000978:	40006400 	.word	0x40006400

0800097c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1b      	ldr	r2, [pc, #108]	@ (8000a08 <HAL_CAN_MspInit+0x8c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12f      	bne.n	80009fe <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ce:	2303      	movs	r3, #3
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009de:	2309      	movs	r3, #9
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <HAL_CAN_MspInit+0x94>)
 80009ea:	f001 fee9 	bl	80027c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2014      	movs	r0, #20
 80009f4:	f001 fead 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f001 fec6 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40006400 	.word	0x40006400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 8000a90:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000a92:	f002 f841 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin;
 8000a96:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000ab0:	f001 fe86 	bl	80027c0 <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fcaf 	bl	800142a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f876 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f7ff ffa0 	bl	8000a14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ad4:	f000 f98e 	bl	8000df4 <MX_SPI1_Init>
  MX_CAN1_Init();
 8000ad8:	f7ff ff1a 	bl	8000910 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000adc:	f000 fa90 	bl	8001000 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ae0:	f7ff fe84 	bl	80007ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ae4:	f000 fb02 	bl	80010ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ae8:	f000 fb78 	bl	80011dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  CAN_Config();
 8000aec:	f000 f8c2 	bl	8000c74 <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000af0:	2102      	movs	r1, #2
 8000af2:	482b      	ldr	r0, [pc, #172]	@ (8000ba0 <main+0xdc>)
 8000af4:	f001 fafc 	bl	80020f0 <HAL_CAN_ActivateNotification>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <main+0x3e>
	  Error_Handler();
 8000afe:	f000 f973 	bl	8000de8 <Error_Handler>
  }

  ADXL.StandbyMode = ADXL_MODE_MEASUREMENT;
 8000b02:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <main+0xe0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
  ADXL.TempMode = ADXL_TEMP_OFF;
 8000b08:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <main+0xe0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	705a      	strb	r2, [r3, #1]
  ADXL.DataReadyMode = ADXL_DRDY_ON;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <main+0xe0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	709a      	strb	r2, [r3, #2]
  ADXL.IntMode = ADXL_INT_ACTIVELOW;
 8000b14:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <main+0xe0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	70da      	strb	r2, [r3, #3]
  ADXL.Range = ADXL_RANGE_2G;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <main+0xe0>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	711a      	strb	r2, [r3, #4]

  TxHeader.StdId = 0x123;
 8000b20:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <main+0xe4>)
 8000b22:	f240 1223 	movw	r2, #291	@ 0x123
 8000b26:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 8;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <main+0xe4>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <main+0xe4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <main+0xe4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <main+0xe4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x01;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <main+0xe8>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x02;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <main+0xe8>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x03;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <main+0xe8>)
 8000b4e:	2203      	movs	r2, #3
 8000b50:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x04;
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <main+0xe8>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x05;
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <main+0xe8>)
 8000b5a:	2205      	movs	r2, #5
 8000b5c:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x06;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <main+0xe8>)
 8000b60:	2206      	movs	r2, #6
 8000b62:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x07;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <main+0xe8>)
 8000b66:	2207      	movs	r2, #7
 8000b68:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x08;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <main+0xe8>)
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	71da      	strb	r2, [r3, #7]


  ADXL_Init(&ADXL);
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <main+0xe0>)
 8000b72:	f7ff fdcb 	bl	800070c <ADXL_Init>
//  ADXL_Measure(ON);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b76:	2100      	movs	r1, #0
 8000b78:	480d      	ldr	r0, [pc, #52]	@ (8000bb0 <main+0xec>)
 8000b7a:	f003 fc97 	bl	80044ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <main+0xf0>)
 8000b82:	f003 fc93 	bl	80044ac <HAL_TIM_PWM_Start>

  htim2.Instance->CCR1 = 750;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <main+0xec>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000b8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Steering_Servo_Control(dis_off);
 8000b90:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <main+0xf4>)
 8000b92:	f993 3000 	ldrsb.w	r3, [r3]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f8cc 	bl	8000d34 <Steering_Servo_Control>
 8000b9c:	e7f8      	b.n	8000b90 <main+0xcc>
 8000b9e:	bf00      	nop
 8000ba0:	2000007c 	.word	0x2000007c
 8000ba4:	200000e8 	.word	0x200000e8
 8000ba8:	200000a4 	.word	0x200000a4
 8000bac:	200000d8 	.word	0x200000d8
 8000bb0:	20000154 	.word	0x20000154
 8000bb4:	200001a0 	.word	0x200001a0
 8000bb8:	200000ed 	.word	0x200000ed

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	@ 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2234      	movs	r2, #52	@ 0x34
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 fcf6 	bl	80055bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	4b22      	ldr	r3, [pc, #136]	@ (8000c6c <SystemClock_Config+0xb0>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <SystemClock_Config+0xb0>)
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bec:	4b1f      	ldr	r3, [pc, #124]	@ (8000c6c <SystemClock_Config+0xb0>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <SystemClock_Config+0xb4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c00:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <SystemClock_Config+0xb4>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <SystemClock_Config+0xb4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 ffa9 	bl	8002b80 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000c34:	f000 f8d8 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fa42 	bl	80030dc <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c5e:	f000 f8c3 	bl	8000de8 <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3750      	adds	r7, #80	@ 0x50
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000

08000c74 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000c7a:	230d      	movs	r3, #13
 8000c7c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000; //Only ID 0x284 and 0x285 can pass through
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480a      	ldr	r0, [pc, #40]	@ (8000cd0 <CAN_Config+0x5c>)
 8000ca8:	f000 ffd0 	bl	8001c4c <HAL_CAN_ConfigFilter>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000cb2:	f000 f899 	bl	8000de8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <CAN_Config+0x5c>)
 8000cb8:	f001 f8b4 	bl	8001e24 <HAL_CAN_Start>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8000cc2:	f000 f891 	bl	8000de8 <Error_Handler>
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000007c 	.word	0x2000007c

08000cd4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000cdc:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000cde:	4a11      	ldr	r2, [pc, #68]	@ (8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000ce4:	f001 f8e2 	bl	8001eac <HAL_CAN_GetRxMessage>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d005      	beq.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cee:	2180      	movs	r1, #128	@ 0x80
 8000cf0:	480e      	ldr	r0, [pc, #56]	@ (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000cf2:	f001 ff2a 	bl	8002b4a <HAL_GPIO_TogglePin>
		Error_Handler();
 8000cf6:	f000 f877 	bl	8000de8 <Error_Handler>
	}

	if (RxHeader.StdId == 0x123) {
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f240 1223 	movw	r2, #291	@ 0x123
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d108      	bne.n	8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d06:	2101      	movs	r1, #1
 8000d08:	4808      	ldr	r0, [pc, #32]	@ (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000d0a:	f001 ff1e 	bl	8002b4a <HAL_GPIO_TogglePin>
		dis_off = RxData[0];
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b25a      	sxtb	r2, r3
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000d16:	701a      	strb	r2, [r3, #0]
	}

}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000e0 	.word	0x200000e0
 8000d24:	200000bc 	.word	0x200000bc
 8000d28:	2000007c 	.word	0x2000007c
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	200000ed 	.word	0x200000ed

08000d34 <Steering_Servo_Control>:

void Steering_Servo_Control(int8_t offsetVal){
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	//Clamp dis_off to valid range
	if (offsetVal != 100){
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b64      	cmp	r3, #100	@ 0x64
 8000d44:	d040      	beq.n	8000dc8 <Steering_Servo_Control+0x94>
		if (offsetVal < DIS_OFF_MAX_LEFT) {
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	f113 0f43 	cmn.w	r3, #67	@ 0x43
 8000d4e:	da02      	bge.n	8000d56 <Steering_Servo_Control+0x22>
			offsetVal = DIS_OFF_MAX_LEFT;
 8000d50:	23bd      	movs	r3, #189	@ 0xbd
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	e005      	b.n	8000d62 <Steering_Servo_Control+0x2e>
		} else if (offsetVal >= DIS_OFF_MAX_RIGHT) {
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b42      	cmp	r3, #66	@ 0x42
 8000d5c:	dd01      	ble.n	8000d62 <Steering_Servo_Control+0x2e>
			offsetVal = DIS_OFF_MAX_RIGHT;
 8000d5e:	2343      	movs	r3, #67	@ 0x43
 8000d60:	71fb      	strb	r3, [r7, #7]
		}

		//Linear interpolation from dis_off to steering angle
		float steerAngle = STEERING_ANGLE_MAX_LEFT
			+ ( (float)(offsetVal - DIS_OFF_MAX_LEFT)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	3343      	adds	r3, #67	@ 0x43
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				/ (float)(DIS_OFF_MAX_RIGHT - DIS_OFF_MAX_LEFT) )
 8000d70:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000dd4 <Steering_Servo_Control+0xa0>
 8000d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
			  * ( STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT );
 8000d78:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000dd8 <Steering_Servo_Control+0xa4>
 8000d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
		float steerAngle = STEERING_ANGLE_MAX_LEFT
 8000d80:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d88:	edc7 7a03 	vstr	s15, [r7, #12]

		//Linear interpolation from steering angle to ccr value
		float ccrValue = SERVO_CCR_AT_NEG20
			+ ( (steerAngle - STEERING_ANGLE_MAX_LEFT)
 8000d8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d90:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000d94:	ee37 7a87 	vadd.f32	s14, s15, s14
				/ (STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT) )
 8000d98:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000dd8 <Steering_Servo_Control+0xa4>
 8000d9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
			  * (SERVO_CCR_AT_POS20 - SERVO_CCR_AT_NEG20);
 8000da0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000ddc <Steering_Servo_Control+0xa8>
 8000da4:	ee67 7a87 	vmul.f32	s15, s15, s14
		float ccrValue = SERVO_CCR_AT_NEG20
 8000da8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000de0 <Steering_Servo_Control+0xac>
 8000dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000db0:	edc7 7a02 	vstr	s15, [r7, #8]

		//Write to the timer’s CCR register (cast to uint16_t)
		htim2.Instance->CCR1 = (uint16_t) ccrValue;
 8000db4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dbc:	ee17 3a90 	vmov	r3, s15
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <Steering_Servo_Control+0xb0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	43060000 	.word	0x43060000
 8000dd8:	42200000 	.word	0x42200000
 8000ddc:	43180000 	.word	0x43180000
 8000de0:	44298000 	.word	0x44298000
 8000de4:	20000154 	.word	0x20000154

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000e6c <MX_SPI1_Init+0x78>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e0e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e14:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e40:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e42:	2207      	movs	r2, #7
 8000e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_SPI1_Init+0x74>)
 8000e54:	f002 faf4 	bl	8003440 <HAL_SPI_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e5e:	f7ff ffc3 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000f0 	.word	0x200000f0
 8000e6c:	40013000 	.word	0x40013000

08000e70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a17      	ldr	r2, [pc, #92]	@ (8000eec <HAL_SPI_MspInit+0x7c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d127      	bne.n	8000ee2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	4a16      	ldr	r2, [pc, #88]	@ (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000e98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ec2:	23e0      	movs	r3, #224	@ 0xe0
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <HAL_SPI_MspInit+0x84>)
 8000ede:	f001 fc6f 	bl	80027c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	@ 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40013000 	.word	0x40013000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <NMI_Handler+0x4>

08000f48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <MemManage_Handler+0x4>

08000f58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f96:	f000 fa85 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <CAN1_RX0_IRQHandler+0x10>)
 8000fa6:	f001 f8c9 	bl	800213c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000007c 	.word	0x2000007c

08000fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <TIM2_IRQHandler+0x10>)
 8000fba:	f003 fb71 	bl	80046a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000154 	.word	0x20000154

08000fc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <TIM4_IRQHandler+0x10>)
 8000fce:	f003 fb67 	bl	80046a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001ec 	.word	0x200001ec

08000fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	@ 0x38
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001020:	463b      	mov	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001032:	4b2d      	ldr	r3, [pc, #180]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 8001034:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001038:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800103a:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 800103c:	221f      	movs	r2, #31
 800103e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b29      	ldr	r3, [pc, #164]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001046:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 8001048:	f242 720f 	movw	r2, #9999	@ 0x270f
 800104c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b26      	ldr	r3, [pc, #152]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105a:	4823      	ldr	r0, [pc, #140]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 800105c:	f003 f96e 	bl	800433c <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001066:	f7ff febf 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001074:	4619      	mov	r1, r3
 8001076:	481c      	ldr	r0, [pc, #112]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 8001078:	f003 fd2e 	bl	8004ad8 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001082:	f7ff feb1 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001086:	4818      	ldr	r0, [pc, #96]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 8001088:	f003 f9af 	bl	80043ea <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001092:	f7ff fea9 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4810      	ldr	r0, [pc, #64]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 80010a6:	f004 f9dd 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010b0:	f7ff fe9a 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	@ 0x60
 80010b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 80010cc:	f003 fbf0 	bl	80048b0 <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010d6:	f7ff fe87 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010da:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <MX_TIM2_Init+0xe8>)
 80010dc:	f000 f920 	bl	8001320 <HAL_TIM_MspPostInit>

}
 80010e0:	bf00      	nop
 80010e2:	3738      	adds	r7, #56	@ 0x38
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000154 	.word	0x20000154

080010ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	@ 0x38
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 8001120:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <MX_TIM3_Init+0xec>)
 8001122:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001124:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 8001126:	2207      	movs	r2, #7
 8001128:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 8001132:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001136:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001144:	4823      	ldr	r0, [pc, #140]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 8001146:	f003 f8f9 	bl	800433c <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001150:	f7ff fe4a 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115e:	4619      	mov	r1, r3
 8001160:	481c      	ldr	r0, [pc, #112]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 8001162:	f003 fcb9 	bl	8004ad8 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800116c:	f7ff fe3c 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001170:	4818      	ldr	r0, [pc, #96]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 8001172:	f003 f93a 	bl	80043ea <HAL_TIM_PWM_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800117c:	f7ff fe34 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4811      	ldr	r0, [pc, #68]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 8001190:	f004 f968 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800119a:	f7ff fe25 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119e:	2360      	movs	r3, #96	@ 0x60
 80011a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	4619      	mov	r1, r3
 80011b4:	4807      	ldr	r0, [pc, #28]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 80011b6:	f003 fb7b 	bl	80048b0 <HAL_TIM_PWM_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011c0:	f7ff fe12 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <MX_TIM3_Init+0xe8>)
 80011c6:	f000 f8ab 	bl	8001320 <HAL_TIM_MspPostInit>

}
 80011ca:	bf00      	nop
 80011cc:	3738      	adds	r7, #56	@ 0x38
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001a0 	.word	0x200001a0
 80011d8:	40000400 	.word	0x40000400

080011dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <MX_TIM4_Init+0x94>)
 80011fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001274 <MX_TIM4_Init+0x98>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MX_TIM4_Init+0x94>)
 8001202:	229f      	movs	r2, #159	@ 0x9f
 8001204:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <MX_TIM4_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <MX_TIM4_Init+0x94>)
 800120e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001212:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <MX_TIM4_Init+0x94>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_TIM4_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001220:	4813      	ldr	r0, [pc, #76]	@ (8001270 <MX_TIM4_Init+0x94>)
 8001222:	f003 f88b 	bl	800433c <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800122c:	f7ff fddc 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <MX_TIM4_Init+0x94>)
 800123e:	f003 fc4b 	bl	8004ad8 <HAL_TIM_ConfigClockSource>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001248:	f7ff fdce 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_TIM4_Init+0x94>)
 800125a:	f004 f903 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001264:	f7ff fdc0 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200001ec 	.word	0x200001ec
 8001274:	40000800 	.word	0x40000800

08001278 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001288:	d114      	bne.n	80012b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128a:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	201c      	movs	r0, #28
 80012a8:	f001 fa53 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ac:	201c      	movs	r0, #28
 80012ae:	f001 fa6c 	bl	800278a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012b2:	e02a      	b.n	800130a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <HAL_TIM_Base_MspInit+0xa0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10c      	bne.n	80012d8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	4a14      	ldr	r2, [pc, #80]	@ (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
}
 80012d6:	e018      	b.n	800130a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0f      	ldr	r2, [pc, #60]	@ (800131c <HAL_TIM_Base_MspInit+0xa4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d113      	bne.n	800130a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	201e      	movs	r0, #30
 8001300:	f001 fa27 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001304:	201e      	movs	r0, #30
 8001306:	f001 fa40 	bl	800278a <HAL_NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40000400 	.word	0x40000400
 800131c:	40000800 	.word	0x40000800

08001320 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001340:	d11c      	bne.n	800137c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <HAL_TIM_MspPostInit+0xa8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a20      	ldr	r2, [pc, #128]	@ (80013c8 <HAL_TIM_MspPostInit+0xa8>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <HAL_TIM_MspPostInit+0xa8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800136a:	2301      	movs	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4815      	ldr	r0, [pc, #84]	@ (80013cc <HAL_TIM_MspPostInit+0xac>)
 8001376:	f001 fa23 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800137a:	e020      	b.n	80013be <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a13      	ldr	r2, [pc, #76]	@ (80013d0 <HAL_TIM_MspPostInit+0xb0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d11b      	bne.n	80013be <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HAL_TIM_MspPostInit+0xa8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <HAL_TIM_MspPostInit+0xa8>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_TIM_MspPostInit+0xa8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800139e:	2340      	movs	r3, #64	@ 0x40
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013aa:	2302      	movs	r3, #2
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ae:	2302      	movs	r3, #2
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <HAL_TIM_MspPostInit+0xb4>)
 80013ba:	f001 fa01 	bl	80027c0 <HAL_GPIO_Init>
}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40000400 	.word	0x40000400
 80013d4:	40020800 	.word	0x40020800

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001410 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013dc:	f7ff fdfe 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e2:	490d      	ldr	r1, [pc, #52]	@ (8001418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e4:	4a0d      	ldr	r2, [pc, #52]	@ (800141c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001406:	f004 f8e1 	bl	80055cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff fb5b 	bl	8000ac4 <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800141c:	0800564c 	.word	0x0800564c
  ldr r2, =_sbss
 8001420:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001424:	2000023c 	.word	0x2000023c

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>

0800142a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142e:	2003      	movs	r0, #3
 8001430:	f001 f984 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001434:	200f      	movs	r0, #15
 8001436:	f000 f805 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143a:	f7ff fd5d 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f001 f99f 	bl	80027a6 <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f001 f967 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	@ (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000238 	.word	0x20000238

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000238 	.word	0x20000238

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e031      	b.n	80015a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff f9a0 	bl	8000890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	d116      	bne.n	8001598 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_ADC_Init+0x84>)
 8001570:	4013      	ands	r3, r2
 8001572:	f043 0202 	orr.w	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f970 	bl	8001860 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f023 0303 	bic.w	r3, r3, #3
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
 8001596:	e001      	b.n	800159c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	ffffeefd 	.word	0xffffeefd

080015b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1c>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e136      	b.n	800183e <HAL_ADC_ConfigChannel+0x28a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d93a      	bls.n	8001656 <HAL_ADC_ConfigChannel+0xa2>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015e8:	d035      	beq.n	8001656 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68d9      	ldr	r1, [r3, #12]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	3b1e      	subs	r3, #30
 8001600:	2207      	movs	r2, #7
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a8d      	ldr	r2, [pc, #564]	@ (800184c <HAL_ADC_ConfigChannel+0x298>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10a      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68d9      	ldr	r1, [r3, #12]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	061a      	lsls	r2, r3, #24
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800162e:	e035      	b.n	800169c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68d9      	ldr	r1, [r3, #12]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	4603      	mov	r3, r0
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4403      	add	r3, r0
 8001648:	3b1e      	subs	r3, #30
 800164a:	409a      	lsls	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001654:	e022      	b.n	800169c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6919      	ldr	r1, [r3, #16]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	2207      	movs	r2, #7
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43da      	mvns	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	400a      	ands	r2, r1
 8001678:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6919      	ldr	r1, [r3, #16]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	4603      	mov	r3, r0
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4403      	add	r3, r0
 8001692:	409a      	lsls	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d824      	bhi.n	80016ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	3b05      	subs	r3, #5
 80016b6:	221f      	movs	r2, #31
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43da      	mvns	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	400a      	ands	r2, r1
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	3b05      	subs	r3, #5
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ec:	e04c      	b.n	8001788 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d824      	bhi.n	8001740 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	3b23      	subs	r3, #35	@ 0x23
 8001708:	221f      	movs	r2, #31
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	400a      	ands	r2, r1
 8001716:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	3b23      	subs	r3, #35	@ 0x23
 8001732:	fa00 f203 	lsl.w	r2, r0, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
 800173e:	e023      	b.n	8001788 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	3b41      	subs	r3, #65	@ 0x41
 8001752:	221f      	movs	r2, #31
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43da      	mvns	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	400a      	ands	r2, r1
 8001760:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b41      	subs	r3, #65	@ 0x41
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a30      	ldr	r2, [pc, #192]	@ (8001850 <HAL_ADC_ConfigChannel+0x29c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10a      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x1f4>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800179a:	d105      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 80017a2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a28      	ldr	r2, [pc, #160]	@ (8001850 <HAL_ADC_ConfigChannel+0x29c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10f      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x21e>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d10b      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80017ba:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a25      	ldr	r2, [pc, #148]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 80017c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80017c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017c6:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4a22      	ldr	r2, [pc, #136]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 80017cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001850 <HAL_ADC_ConfigChannel+0x29c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d12b      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x280>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1a      	ldr	r2, [pc, #104]	@ (800184c <HAL_ADC_ConfigChannel+0x298>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d003      	beq.n	80017ee <HAL_ADC_ConfigChannel+0x23a>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b11      	cmp	r3, #17
 80017ec:	d122      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 80017f4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80017f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4a15      	ldr	r2, [pc, #84]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 8001800:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001804:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a10      	ldr	r2, [pc, #64]	@ (800184c <HAL_ADC_ConfigChannel+0x298>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d111      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <HAL_ADC_ConfigChannel+0x2a4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a11      	ldr	r2, [pc, #68]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0c9a      	lsrs	r2, r3, #18
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001826:	e002      	b.n	800182e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3b01      	subs	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f9      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	10000012 	.word	0x10000012
 8001850:	40012000 	.word	0x40012000
 8001854:	40012300 	.word	0x40012300
 8001858:	20000000 	.word	0x20000000
 800185c:	431bde83 	.word	0x431bde83

08001860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001868:	4b78      	ldr	r3, [pc, #480]	@ (8001a4c <ADC_Init+0x1ec>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a77      	ldr	r2, [pc, #476]	@ (8001a4c <ADC_Init+0x1ec>)
 800186e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001872:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001874:	4b75      	ldr	r3, [pc, #468]	@ (8001a4c <ADC_Init+0x1ec>)
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4973      	ldr	r1, [pc, #460]	@ (8001a4c <ADC_Init+0x1ec>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	021a      	lsls	r2, r3, #8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6899      	ldr	r1, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ee:	4a58      	ldr	r2, [pc, #352]	@ (8001a50 <ADC_Init+0x1f0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d022      	beq.n	800193a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001902:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6899      	ldr	r1, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6899      	ldr	r1, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	e00f      	b.n	800195a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001958:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0202 	bic.w	r2, r2, #2
 8001968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6899      	ldr	r1, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	005a      	lsls	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01b      	beq.n	80019c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001996:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	3b01      	subs	r3, #1
 80019b4:	035a      	lsls	r2, r3, #13
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	e007      	b.n	80019d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	051a      	lsls	r2, r3, #20
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a12:	025a      	lsls	r2, r3, #9
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	029a      	lsls	r2, r3, #10
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40012300 	.word	0x40012300
 8001a50:	0f000001 	.word	0x0f000001

08001a54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0ed      	b.n	8001c42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7fe ff82 	bl	800097c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a88:	f7ff fd20 	bl	80014cc <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a8e:	e012      	b.n	8001ab6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a90:	f7ff fd1c 	bl	80014cc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d90b      	bls.n	8001ab6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2205      	movs	r2, #5
 8001aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0c5      	b.n	8001c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0e5      	beq.n	8001a90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0202 	bic.w	r2, r2, #2
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad4:	f7ff fcfa 	bl	80014cc <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ada:	e012      	b.n	8001b02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001adc:	f7ff fcf6 	bl	80014cc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d90b      	bls.n	8001b02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2205      	movs	r2, #5
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e09f      	b.n	8001c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e5      	bne.n	8001adc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7e1b      	ldrb	r3, [r3, #24]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d108      	bne.n	8001b2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e007      	b.n	8001b3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7e5b      	ldrb	r3, [r3, #25]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e007      	b.n	8001b64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e9b      	ldrb	r3, [r3, #26]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d108      	bne.n	8001b7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e007      	b.n	8001b8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0220 	bic.w	r2, r2, #32
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7edb      	ldrb	r3, [r3, #27]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0210 	bic.w	r2, r2, #16
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e007      	b.n	8001bb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0210 	orr.w	r2, r2, #16
 8001bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7f1b      	ldrb	r3, [r3, #28]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d108      	bne.n	8001bd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0208 	orr.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e007      	b.n	8001be2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0208 	bic.w	r2, r2, #8
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7f5b      	ldrb	r3, [r3, #29]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d108      	bne.n	8001bfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0204 	orr.w	r2, r2, #4
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0204 	bic.w	r2, r2, #4
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	ea42 0103 	orr.w	r1, r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	1e5a      	subs	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c64:	7cfb      	ldrb	r3, [r7, #19]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d003      	beq.n	8001c72 <HAL_CAN_ConfigFilter+0x26>
 8001c6a:	7cfb      	ldrb	r3, [r7, #19]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	f040 80c7 	bne.w	8001e00 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a69      	ldr	r2, [pc, #420]	@ (8001e1c <HAL_CAN_ConfigFilter+0x1d0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d001      	beq.n	8001c80 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001c7c:	4b68      	ldr	r3, [pc, #416]	@ (8001e20 <HAL_CAN_ConfigFilter+0x1d4>)
 8001c7e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4a63      	ldr	r2, [pc, #396]	@ (8001e20 <HAL_CAN_ConfigFilter+0x1d4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d111      	bne.n	8001cbc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c9e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d123      	bne.n	8001d2e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3248      	adds	r2, #72	@ 0x48
 8001d0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d24:	6979      	ldr	r1, [r7, #20]
 8001d26:	3348      	adds	r3, #72	@ 0x48
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d122      	bne.n	8001d7c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3248      	adds	r2, #72	@ 0x48
 8001d5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d72:	6979      	ldr	r1, [r7, #20]
 8001d74:	3348      	adds	r3, #72	@ 0x48
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d96:	e007      	b.n	8001da8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001dc2:	e007      	b.n	8001dd4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001df2:	f023 0201 	bic.w	r2, r3, #1
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e006      	b.n	8001e0e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40003400 	.word	0x40003400
 8001e20:	40006400 	.word	0x40006400

08001e24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d12e      	bne.n	8001e96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e50:	f7ff fb3c 	bl	80014cc <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e56:	e012      	b.n	8001e7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e58:	f7ff fb38 	bl	80014cc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b0a      	cmp	r3, #10
 8001e64:	d90b      	bls.n	8001e7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2205      	movs	r2, #5
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e012      	b.n	8001ea4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e5      	bne.n	8001e58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e006      	b.n	8001ea4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d003      	beq.n	8001ed0 <HAL_CAN_GetRxMessage+0x24>
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	f040 8103 	bne.w	80020d6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d116      	bne.n	8001f12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0f7      	b.n	80020e4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0e8      	b.n	80020e4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	331b      	adds	r3, #27
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0204 	and.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10c      	bne.n	8001f4a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	331b      	adds	r3, #27
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0d5b      	lsrs	r3, r3, #21
 8001f40:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e00b      	b.n	8001f62 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	331b      	adds	r3, #27
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	331b      	adds	r3, #27
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0202 	and.w	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	331b      	adds	r3, #27
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	4413      	add	r3, r2
 8001f84:	3304      	adds	r3, #4
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2208      	movs	r2, #8
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	e00b      	b.n	8001fb0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	331b      	adds	r3, #27
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 020f 	and.w	r2, r3, #15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	331b      	adds	r3, #27
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4413      	add	r3, r2
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	331b      	adds	r3, #27
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0a1a      	lsrs	r2, r3, #8
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0c1a      	lsrs	r2, r3, #16
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3302      	adds	r3, #2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0e1a      	lsrs	r2, r3, #24
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	3303      	adds	r3, #3
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	3304      	adds	r3, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0a1a      	lsrs	r2, r3, #8
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3305      	adds	r3, #5
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	4413      	add	r3, r2
 8002080:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0c1a      	lsrs	r2, r3, #16
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	3306      	adds	r3, #6
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e1a      	lsrs	r2, r3, #24
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	3307      	adds	r3, #7
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d108      	bne.n	80020c2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0220 	orr.w	r2, r2, #32
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	e007      	b.n	80020d2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0220 	orr.w	r2, r2, #32
 80020d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e006      	b.n	80020e4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002100:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d002      	beq.n	800210e <HAL_CAN_ActivateNotification+0x1e>
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d109      	bne.n	8002122 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6959      	ldr	r1, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e006      	b.n	8002130 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002126:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
  }
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	@ 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d07c      	beq.n	800227c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f983 	bl	80024aa <HAL_CAN_TxMailbox0CompleteCallback>
 80021a4:	e016      	b.n	80021d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b8:	e00c      	b.n	80021d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80021cc:	e002      	b.n	80021d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f989 	bl	80024e6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d024      	beq.n	8002228 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f963 	bl	80024be <HAL_CAN_TxMailbox1CompleteCallback>
 80021f8:	e016      	b.n	8002228 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
 800220c:	e00c      	b.n	8002228 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002220:	e002      	b.n	8002228 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f969 	bl	80024fa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d024      	beq.n	800227c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800223a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f943 	bl	80024d2 <HAL_CAN_TxMailbox2CompleteCallback>
 800224c:	e016      	b.n	800227c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002260:	e00c      	b.n	800227c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
 8002274:	e002      	b.n	800227c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f949 	bl	800250e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2210      	movs	r2, #16
 800229e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2208      	movs	r2, #8
 80022ba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f930 	bl	8002522 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fcfa 	bl	8000cd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2210      	movs	r2, #16
 8002302:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2208      	movs	r2, #8
 800231e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f912 	bl	800254a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8f9 	bl	8002536 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2210      	movs	r2, #16
 800235e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f8fc 	bl	800255e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2208      	movs	r2, #8
 8002380:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8f5 	bl	8002572 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d07b      	beq.n	800248a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d072      	beq.n	8002482 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d043      	beq.n	8002482 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03e      	beq.n	8002482 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800240a:	2b60      	cmp	r3, #96	@ 0x60
 800240c:	d02b      	beq.n	8002466 <HAL_CAN_IRQHandler+0x32a>
 800240e:	2b60      	cmp	r3, #96	@ 0x60
 8002410:	d82e      	bhi.n	8002470 <HAL_CAN_IRQHandler+0x334>
 8002412:	2b50      	cmp	r3, #80	@ 0x50
 8002414:	d022      	beq.n	800245c <HAL_CAN_IRQHandler+0x320>
 8002416:	2b50      	cmp	r3, #80	@ 0x50
 8002418:	d82a      	bhi.n	8002470 <HAL_CAN_IRQHandler+0x334>
 800241a:	2b40      	cmp	r3, #64	@ 0x40
 800241c:	d019      	beq.n	8002452 <HAL_CAN_IRQHandler+0x316>
 800241e:	2b40      	cmp	r3, #64	@ 0x40
 8002420:	d826      	bhi.n	8002470 <HAL_CAN_IRQHandler+0x334>
 8002422:	2b30      	cmp	r3, #48	@ 0x30
 8002424:	d010      	beq.n	8002448 <HAL_CAN_IRQHandler+0x30c>
 8002426:	2b30      	cmp	r3, #48	@ 0x30
 8002428:	d822      	bhi.n	8002470 <HAL_CAN_IRQHandler+0x334>
 800242a:	2b10      	cmp	r3, #16
 800242c:	d002      	beq.n	8002434 <HAL_CAN_IRQHandler+0x2f8>
 800242e:	2b20      	cmp	r3, #32
 8002430:	d005      	beq.n	800243e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002432:	e01d      	b.n	8002470 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	f043 0308 	orr.w	r3, r3, #8
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800243c:	e019      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002446:	e014      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	f043 0320 	orr.w	r3, r3, #32
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002450:	e00f      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800245a:	e00a      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002464:	e005      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800246e:	e000      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            break;
 8002470:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002480:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2204      	movs	r2, #4
 8002488:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f872 	bl	8002586 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	@ 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <__NVIC_SetPriorityGrouping+0x40>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ca:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <__NVIC_SetPriorityGrouping+0x40>)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60d3      	str	r3, [r2, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00
 80025e0:	05fa0000 	.word	0x05fa0000

080025e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	@ (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	@ (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	@ (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff8e 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff29 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff3e 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff8e 	bl	8002690 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff5d 	bl	800263c <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff31 	bl	8002600 <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffa2 	bl	80026f8 <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	@ 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e175      	b.n	8002acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	f040 8164 	bne.w	8002ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d005      	beq.n	8002816 <HAL_GPIO_Init+0x56>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d130      	bne.n	8002878 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 0201 	and.w	r2, r3, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b03      	cmp	r3, #3
 8002882:	d017      	beq.n	80028b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d123      	bne.n	8002908 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	08da      	lsrs	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3208      	adds	r2, #8
 80028c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	08da      	lsrs	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3208      	adds	r2, #8
 8002902:	69b9      	ldr	r1, [r7, #24]
 8002904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0203 	and.w	r2, r3, #3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80be 	beq.w	8002ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	4b66      	ldr	r3, [pc, #408]	@ (8002ae4 <HAL_GPIO_Init+0x324>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	4a65      	ldr	r2, [pc, #404]	@ (8002ae4 <HAL_GPIO_Init+0x324>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002954:	6453      	str	r3, [r2, #68]	@ 0x44
 8002956:	4b63      	ldr	r3, [pc, #396]	@ (8002ae4 <HAL_GPIO_Init+0x324>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002962:	4a61      	ldr	r2, [pc, #388]	@ (8002ae8 <HAL_GPIO_Init+0x328>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a58      	ldr	r2, [pc, #352]	@ (8002aec <HAL_GPIO_Init+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d037      	beq.n	80029fe <HAL_GPIO_Init+0x23e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a57      	ldr	r2, [pc, #348]	@ (8002af0 <HAL_GPIO_Init+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d031      	beq.n	80029fa <HAL_GPIO_Init+0x23a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a56      	ldr	r2, [pc, #344]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02b      	beq.n	80029f6 <HAL_GPIO_Init+0x236>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a55      	ldr	r2, [pc, #340]	@ (8002af8 <HAL_GPIO_Init+0x338>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d025      	beq.n	80029f2 <HAL_GPIO_Init+0x232>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a54      	ldr	r2, [pc, #336]	@ (8002afc <HAL_GPIO_Init+0x33c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <HAL_GPIO_Init+0x22e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a53      	ldr	r2, [pc, #332]	@ (8002b00 <HAL_GPIO_Init+0x340>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d019      	beq.n	80029ea <HAL_GPIO_Init+0x22a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_GPIO_Init+0x344>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a51      	ldr	r2, [pc, #324]	@ (8002b08 <HAL_GPIO_Init+0x348>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a50      	ldr	r2, [pc, #320]	@ (8002b0c <HAL_GPIO_Init+0x34c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002b10 <HAL_GPIO_Init+0x350>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x21a>
 80029d6:	2309      	movs	r3, #9
 80029d8:	e012      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029da:	230a      	movs	r3, #10
 80029dc:	e010      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029de:	2308      	movs	r3, #8
 80029e0:	e00e      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e2:	2307      	movs	r3, #7
 80029e4:	e00c      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e6:	2306      	movs	r3, #6
 80029e8:	e00a      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ea:	2305      	movs	r3, #5
 80029ec:	e008      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ee:	2304      	movs	r3, #4
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fe:	2300      	movs	r3, #0
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f002 0203 	and.w	r2, r2, #3
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a10:	4935      	ldr	r1, [pc, #212]	@ (8002ae8 <HAL_GPIO_Init+0x328>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a34      	ldr	r2, [pc, #208]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b32      	ldr	r3, [pc, #200]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a29      	ldr	r2, [pc, #164]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a72:	4b28      	ldr	r3, [pc, #160]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a96:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	f67f ae86 	bls.w	80027e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3724      	adds	r7, #36	@ 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020c00 	.word	0x40020c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40021400 	.word	0x40021400
 8002b04:	40021800 	.word	0x40021800
 8002b08:	40021c00 	.word	0x40021c00
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40022400 	.word	0x40022400
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b34:	e003      	b.n	8002b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b5c:	887a      	ldrh	r2, [r7, #2]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4013      	ands	r3, r2
 8002b62:	041a      	lsls	r2, r3, #16
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e29b      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba4:	4b96      	ldr	r3, [pc, #600]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00c      	beq.n	8002bca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb0:	4b93      	ldr	r3, [pc, #588]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d112      	bne.n	8002be2 <HAL_RCC_OscConfig+0x62>
 8002bbc:	4b90      	ldr	r3, [pc, #576]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc8:	d10b      	bne.n	8002be2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	4b8d      	ldr	r3, [pc, #564]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d06c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x130>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d168      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e275      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x7a>
 8002bec:	4b84      	ldr	r3, [pc, #528]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a83      	ldr	r2, [pc, #524]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e02e      	b.n	8002c58 <HAL_RCC_OscConfig+0xd8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x9c>
 8002c02:	4b7f      	ldr	r3, [pc, #508]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7e      	ldr	r2, [pc, #504]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7b      	ldr	r2, [pc, #492]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xd8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0xc0>
 8002c26:	4b76      	ldr	r3, [pc, #472]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a75      	ldr	r2, [pc, #468]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b73      	ldr	r3, [pc, #460]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a72      	ldr	r2, [pc, #456]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xd8>
 8002c40:	4b6f      	ldr	r3, [pc, #444]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6e      	ldr	r2, [pc, #440]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a6b      	ldr	r2, [pc, #428]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fc34 	bl	80014cc <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fc30 	bl	80014cc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	@ 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e229      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b61      	ldr	r3, [pc, #388]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe8>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fc20 	bl	80014cc <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fc1c 	bl	80014cc <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e215      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	4b57      	ldr	r3, [pc, #348]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x110>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d069      	beq.n	8002d92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cbe:	4b50      	ldr	r3, [pc, #320]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cca:	4b4d      	ldr	r3, [pc, #308]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x190>
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	4b47      	ldr	r3, [pc, #284]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x17a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1e9      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b41      	ldr	r3, [pc, #260]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	493d      	ldr	r1, [pc, #244]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	e040      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d023      	beq.n	8002d60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b39      	ldr	r3, [pc, #228]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a38      	ldr	r2, [pc, #224]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fbd2 	bl	80014cc <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fbce 	bl	80014cc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1c7      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	4b30      	ldr	r3, [pc, #192]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4929      	ldr	r1, [pc, #164]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
 8002d5e:	e018      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d60:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a26      	ldr	r2, [pc, #152]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fbae 	bl	80014cc <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fe fbaa 	bl	80014cc <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1a3      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d038      	beq.n	8002e10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d019      	beq.n	8002dda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002daa:	4a15      	ldr	r2, [pc, #84]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe fb8b 	bl	80014cc <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fe fb87 	bl	80014cc <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e180      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x23a>
 8002dd8:	e01a      	b.n	8002e10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dde:	4a08      	ldr	r2, [pc, #32]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7fe fb71 	bl	80014cc <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fe fb6d 	bl	80014cc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d903      	bls.n	8002e04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e166      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
 8002e00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	4b92      	ldr	r3, [pc, #584]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ee      	bne.n	8002dee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80a4 	beq.w	8002f66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b8c      	ldr	r3, [pc, #560]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b89      	ldr	r3, [pc, #548]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	4a88      	ldr	r2, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e36:	4b86      	ldr	r3, [pc, #536]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e46:	4b83      	ldr	r3, [pc, #524]	@ (8003054 <HAL_RCC_OscConfig+0x4d4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e52:	4b80      	ldr	r3, [pc, #512]	@ (8003054 <HAL_RCC_OscConfig+0x4d4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7f      	ldr	r2, [pc, #508]	@ (8003054 <HAL_RCC_OscConfig+0x4d4>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fb35 	bl	80014cc <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe fb31 	bl	80014cc <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	@ 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e12a      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e78:	4b76      	ldr	r3, [pc, #472]	@ (8003054 <HAL_RCC_OscConfig+0x4d4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x31a>
 8002e8c:	4b70      	ldr	r3, [pc, #448]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e90:	4a6f      	ldr	r2, [pc, #444]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e98:	e02d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x376>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x33c>
 8002ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	4a6a      	ldr	r2, [pc, #424]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eae:	4b68      	ldr	r3, [pc, #416]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	4a67      	ldr	r2, [pc, #412]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eba:	e01c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x376>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x35e>
 8002ec4:	4b62      	ldr	r3, [pc, #392]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a61      	ldr	r2, [pc, #388]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed0:	4b5f      	ldr	r3, [pc, #380]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x376>
 8002ede:	4b5c      	ldr	r3, [pc, #368]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	4b59      	ldr	r3, [pc, #356]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	4a58      	ldr	r2, [pc, #352]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7fe fae5 	bl	80014cc <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe fae1 	bl	80014cc <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0d8      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	4b4c      	ldr	r3, [pc, #304]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ee      	beq.n	8002f06 <HAL_RCC_OscConfig+0x386>
 8002f28:	e014      	b.n	8002f54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fe facf 	bl	80014cc <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe facb 	bl	80014cc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0c2      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f48:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ee      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d105      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80ae 	beq.w	80030cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f70:	4b37      	ldr	r3, [pc, #220]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d06d      	beq.n	8003058 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d14b      	bne.n	800301c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	4b32      	ldr	r3, [pc, #200]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a31      	ldr	r2, [pc, #196]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002f8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fa9c 	bl	80014cc <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe fa98 	bl	80014cc <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e091      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b29      	ldr	r3, [pc, #164]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	071b      	lsls	r3, r3, #28
 8002fe2:	491b      	ldr	r1, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fa6a 	bl	80014cc <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fa66 	bl	80014cc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e05f      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x47c>
 800301a:	e057      	b.n	80030cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0b      	ldr	r2, [pc, #44]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8003022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe fa50 	bl	80014cc <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fa4c 	bl	80014cc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e045      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b03      	ldr	r3, [pc, #12]	@ (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x4b0>
 800304e:	e03d      	b.n	80030cc <HAL_RCC_OscConfig+0x54c>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003058:	4b1f      	ldr	r3, [pc, #124]	@ (80030d8 <HAL_RCC_OscConfig+0x558>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d030      	beq.n	80030c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d129      	bne.n	80030c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d122      	bne.n	80030c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003088:	4013      	ands	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800308e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003090:	4293      	cmp	r3, r2
 8003092:	d119      	bne.n	80030c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d10f      	bne.n	80030c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800

080030dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d0      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b6a      	ldr	r3, [pc, #424]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d910      	bls.n	8003124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b67      	ldr	r3, [pc, #412]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 020f 	bic.w	r2, r3, #15
 800310a:	4965      	ldr	r1, [pc, #404]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b63      	ldr	r3, [pc, #396]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b8      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800313c:	4b59      	ldr	r3, [pc, #356]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a58      	ldr	r2, [pc, #352]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003142:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003146:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003154:	4b53      	ldr	r3, [pc, #332]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a52      	ldr	r2, [pc, #328]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800315e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b50      	ldr	r3, [pc, #320]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	494d      	ldr	r1, [pc, #308]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d040      	beq.n	8003200 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b47      	ldr	r3, [pc, #284]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d115      	bne.n	80031be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	4b41      	ldr	r3, [pc, #260]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e073      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	4b3d      	ldr	r3, [pc, #244]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06b      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4936      	ldr	r1, [pc, #216]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fe f97c 	bl	80014cc <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fe f978 	bl	80014cc <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e053      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b2d      	ldr	r3, [pc, #180]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b27      	ldr	r3, [pc, #156]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d210      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	4922      	ldr	r1, [pc, #136]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e032      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b19      	ldr	r3, [pc, #100]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4916      	ldr	r1, [pc, #88]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325a:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490e      	ldr	r1, [pc, #56]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800326e:	f000 f821 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490a      	ldr	r1, [pc, #40]	@ (80032a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <HAL_RCC_ClockConfig+0x1d0>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328a:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_RCC_ClockConfig+0x1d4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe f8d8 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023c00 	.word	0x40023c00
 80032a4:	40023800 	.word	0x40023800
 80032a8:	0800562c 	.word	0x0800562c
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b8:	b090      	sub	sp, #64	@ 0x40
 80032ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	637b      	str	r3, [r7, #52]	@ 0x34
 80032c0:	2300      	movs	r3, #0
 80032c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032c4:	2300      	movs	r3, #0
 80032c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032cc:	4b59      	ldr	r3, [pc, #356]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d00d      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x40>
 80032d8:	2b08      	cmp	r3, #8
 80032da:	f200 80a1 	bhi.w	8003420 <HAL_RCC_GetSysClockFreq+0x16c>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x34>
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x3a>
 80032e6:	e09b      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b53      	ldr	r3, [pc, #332]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x184>)
 80032ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032ec:	e09b      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ee:	4b53      	ldr	r3, [pc, #332]	@ (800343c <HAL_RCC_GetSysClockFreq+0x188>)
 80032f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032f2:	e098      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x180>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d028      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330a:	4b4a      	ldr	r3, [pc, #296]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x180>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	2200      	movs	r2, #0
 8003312:	623b      	str	r3, [r7, #32]
 8003314:	627a      	str	r2, [r7, #36]	@ 0x24
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800331c:	2100      	movs	r1, #0
 800331e:	4b47      	ldr	r3, [pc, #284]	@ (800343c <HAL_RCC_GetSysClockFreq+0x188>)
 8003320:	fb03 f201 	mul.w	r2, r3, r1
 8003324:	2300      	movs	r3, #0
 8003326:	fb00 f303 	mul.w	r3, r0, r3
 800332a:	4413      	add	r3, r2
 800332c:	4a43      	ldr	r2, [pc, #268]	@ (800343c <HAL_RCC_GetSysClockFreq+0x188>)
 800332e:	fba0 1202 	umull	r1, r2, r0, r2
 8003332:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003334:	460a      	mov	r2, r1
 8003336:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003338:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800333a:	4413      	add	r3, r2
 800333c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800333e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003340:	2200      	movs	r2, #0
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	61fa      	str	r2, [r7, #28]
 8003346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800334a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800334e:	f7fc ff73 	bl	8000238 <__aeabi_uldivmod>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4613      	mov	r3, r2
 8003358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800335a:	e053      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335c:	4b35      	ldr	r3, [pc, #212]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x180>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	099b      	lsrs	r3, r3, #6
 8003362:	2200      	movs	r2, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	617a      	str	r2, [r7, #20]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800336e:	f04f 0b00 	mov.w	fp, #0
 8003372:	4652      	mov	r2, sl
 8003374:	465b      	mov	r3, fp
 8003376:	f04f 0000 	mov.w	r0, #0
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	0159      	lsls	r1, r3, #5
 8003380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003384:	0150      	lsls	r0, r2, #5
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	ebb2 080a 	subs.w	r8, r2, sl
 800338e:	eb63 090b 	sbc.w	r9, r3, fp
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800339e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033a6:	ebb2 0408 	subs.w	r4, r2, r8
 80033aa:	eb63 0509 	sbc.w	r5, r3, r9
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	00eb      	lsls	r3, r5, #3
 80033b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033bc:	00e2      	lsls	r2, r4, #3
 80033be:	4614      	mov	r4, r2
 80033c0:	461d      	mov	r5, r3
 80033c2:	eb14 030a 	adds.w	r3, r4, sl
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	eb45 030b 	adc.w	r3, r5, fp
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033da:	4629      	mov	r1, r5
 80033dc:	028b      	lsls	r3, r1, #10
 80033de:	4621      	mov	r1, r4
 80033e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e4:	4621      	mov	r1, r4
 80033e6:	028a      	lsls	r2, r1, #10
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ee:	2200      	movs	r2, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	60fa      	str	r2, [r7, #12]
 80033f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f8:	f7fc ff1e 	bl	8000238 <__aeabi_uldivmod>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4613      	mov	r3, r2
 8003402:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003404:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x180>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	3301      	adds	r3, #1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003414:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800341e:	e002      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x184>)
 8003422:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003428:	4618      	mov	r0, r3
 800342a:	3740      	adds	r7, #64	@ 0x40
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	00f42400 	.word	0x00f42400
 800343c:	017d7840 	.word	0x017d7840

08003440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e09d      	b.n	800358e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d108      	bne.n	800346c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003462:	d009      	beq.n	8003478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
 800346a:	e005      	b.n	8003478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd fcec 	bl	8000e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034b8:	d902      	bls.n	80034c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e002      	b.n	80034c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034ce:	d007      	beq.n	80034e0 <HAL_SPI_Init+0xa0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034d8:	d002      	beq.n	80034e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003522:	ea42 0103 	orr.w	r1, r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	f003 0204 	and.w	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800355c:	ea42 0103 	orr.w	r1, r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800357c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b088      	sub	sp, #32
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_SPI_Transmit+0x22>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e15f      	b.n	8003878 <HAL_SPI_Transmit+0x2e2>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c0:	f7fd ff84 	bl	80014cc <HAL_GetTick>
 80035c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
 80035d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035da:	e148      	b.n	800386e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_Transmit+0x52>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ec:	e13f      	b.n	800386e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2203      	movs	r2, #3
 80035f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003638:	d10f      	bne.n	800365a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003664:	2b40      	cmp	r3, #64	@ 0x40
 8003666:	d007      	beq.n	8003678 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003680:	d94f      	bls.n	8003722 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_SPI_Transmit+0xfa>
 800368a:	8afb      	ldrh	r3, [r7, #22]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d142      	bne.n	8003716 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b4:	e02f      	b.n	8003716 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d112      	bne.n	80036ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	1c9a      	adds	r2, r3, #2
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036e8:	e015      	b.n	8003716 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ea:	f7fd feef 	bl	80014cc <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d803      	bhi.n	8003702 <HAL_SPI_Transmit+0x16c>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Transmit+0x172>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003714:	e0ab      	b.n	800386e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ca      	bne.n	80036b6 <HAL_SPI_Transmit+0x120>
 8003720:	e080      	b.n	8003824 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_SPI_Transmit+0x19a>
 800372a:	8afb      	ldrh	r3, [r7, #22]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d174      	bne.n	800381a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d912      	bls.n	8003760 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373e:	881a      	ldrh	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374a:	1c9a      	adds	r2, r3, #2
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b02      	subs	r3, #2
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800375e:	e05c      	b.n	800381a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	7812      	ldrb	r2, [r2, #0]
 800376c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003786:	e048      	b.n	800381a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d12b      	bne.n	80037ee <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d912      	bls.n	80037c6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a4:	881a      	ldrh	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b02      	subs	r3, #2
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037c4:	e029      	b.n	800381a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037ec:	e015      	b.n	800381a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ee:	f7fd fe6d 	bl	80014cc <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d803      	bhi.n	8003806 <HAL_SPI_Transmit+0x270>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d102      	bne.n	800380c <HAL_SPI_Transmit+0x276>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003818:	e029      	b.n	800386e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1b1      	bne.n	8003788 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	6839      	ldr	r1, [r7, #0]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fd1d 	bl	8004268 <SPI_EndRxTxTransaction>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e003      	b.n	800386e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003876:	7ffb      	ldrb	r3, [r7, #31]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d002      	beq.n	80038a6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
 80038a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038a4:	e11a      	b.n	8003adc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038ae:	d112      	bne.n	80038d6 <HAL_SPI_Receive+0x56>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10e      	bne.n	80038d6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2204      	movs	r2, #4
 80038bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f90e 	bl	8003aee <HAL_SPI_TransmitReceive>
 80038d2:	4603      	mov	r3, r0
 80038d4:	e107      	b.n	8003ae6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_SPI_Receive+0x64>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e100      	b.n	8003ae6 <HAL_SPI_Receive+0x266>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ec:	f7fd fdee 	bl	80014cc <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_SPI_Receive+0x7e>
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003902:	e0eb      	b.n	8003adc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2204      	movs	r2, #4
 8003908:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800394e:	d908      	bls.n	8003962 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	e007      	b.n	8003972 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003970:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800397a:	d10f      	bne.n	800399c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800399a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b40      	cmp	r3, #64	@ 0x40
 80039a8:	d007      	beq.n	80039ba <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039c2:	d86f      	bhi.n	8003aa4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039c4:	e034      	b.n	8003a30 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d117      	bne.n	8003a04 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f103 020c 	add.w	r2, r3, #12
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a02:	e015      	b.n	8003a30 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a04:	f7fd fd62 	bl	80014cc <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d803      	bhi.n	8003a1c <HAL_SPI_Receive+0x19c>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d102      	bne.n	8003a22 <HAL_SPI_Receive+0x1a2>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003a2e:	e055      	b.n	8003adc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1c4      	bne.n	80039c6 <HAL_SPI_Receive+0x146>
 8003a3c:	e038      	b.n	8003ab0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d115      	bne.n	8003a78 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	b292      	uxth	r2, r2
 8003a58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	1c9a      	adds	r2, r3, #2
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a76:	e015      	b.n	8003aa4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a78:	f7fd fd28 	bl	80014cc <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d803      	bhi.n	8003a90 <HAL_SPI_Receive+0x210>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d102      	bne.n	8003a96 <HAL_SPI_Receive+0x216>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003aa2:	e01b      	b.n	8003adc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1c6      	bne.n	8003a3e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	6839      	ldr	r1, [r7, #0]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fb5b 	bl	8004170 <SPI_EndRxTransaction>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
 8003ad2:	e003      	b.n	8003adc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b08a      	sub	sp, #40	@ 0x28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003afc:	2301      	movs	r3, #1
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x26>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e20a      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x43c>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b1c:	f7fd fcd6 	bl	80014cc <HAL_GetTick>
 8003b20:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b28:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b30:	887b      	ldrh	r3, [r7, #2]
 8003b32:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b34:	887b      	ldrh	r3, [r7, #2]
 8003b36:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b38:	7efb      	ldrb	r3, [r7, #27]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d00e      	beq.n	8003b5c <HAL_SPI_TransmitReceive+0x6e>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b44:	d106      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x66>
 8003b4e:	7efb      	ldrb	r3, [r7, #27]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d003      	beq.n	8003b5c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b5a:	e1e0      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_SPI_TransmitReceive+0x80>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_SPI_TransmitReceive+0x80>
 8003b68:	887b      	ldrh	r3, [r7, #2]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b74:	e1d3      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d003      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2205      	movs	r2, #5
 8003b86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	887a      	ldrh	r2, [r7, #2]
 8003b9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	887a      	ldrh	r2, [r7, #2]
 8003ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	887a      	ldrh	r2, [r7, #2]
 8003bb6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bcc:	d802      	bhi.n	8003bd4 <HAL_SPI_TransmitReceive+0xe6>
 8003bce:	8a3b      	ldrh	r3, [r7, #16]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d908      	bls.n	8003be6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003be2:	605a      	str	r2, [r3, #4]
 8003be4:	e007      	b.n	8003bf6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bf4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c00:	2b40      	cmp	r3, #64	@ 0x40
 8003c02:	d007      	beq.n	8003c14 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c1c:	f240 8081 	bls.w	8003d22 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_SPI_TransmitReceive+0x140>
 8003c28:	8a7b      	ldrh	r3, [r7, #18]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d16d      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c32:	881a      	ldrh	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3e:	1c9a      	adds	r2, r3, #2
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c52:	e05a      	b.n	8003d0a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d11b      	bne.n	8003c9a <HAL_SPI_TransmitReceive+0x1ac>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d016      	beq.n	8003c9a <HAL_SPI_TransmitReceive+0x1ac>
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d113      	bne.n	8003c9a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	881a      	ldrh	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d11c      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x1f4>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d016      	beq.n	8003ce2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	b292      	uxth	r2, r2
 8003cc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	1c9a      	adds	r2, r3, #2
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ce2:	f7fd fbf3 	bl	80014cc <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d80b      	bhi.n	8003d0a <HAL_SPI_TransmitReceive+0x21c>
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d007      	beq.n	8003d0a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003d08:	e109      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d19f      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x166>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d199      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x166>
 8003d20:	e0e3      	b.n	8003eea <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x244>
 8003d2a:	8a7b      	ldrh	r3, [r7, #18]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	f040 80cf 	bne.w	8003ed0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d912      	bls.n	8003d62 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d40:	881a      	ldrh	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	1c9a      	adds	r2, r3, #2
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b02      	subs	r3, #2
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d60:	e0b6      	b.n	8003ed0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d88:	e0a2      	b.n	8003ed0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d134      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x314>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d02f      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x314>
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d12c      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d912      	bls.n	8003dd8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	881a      	ldrh	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	1c9a      	adds	r2, r3, #2
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b02      	subs	r3, #2
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dd6:	e012      	b.n	8003dfe <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d148      	bne.n	8003ea2 <HAL_SPI_TransmitReceive+0x3b4>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d042      	beq.n	8003ea2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d923      	bls.n	8003e70 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	b292      	uxth	r2, r2
 8003e34:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	1c9a      	adds	r2, r3, #2
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b02      	subs	r3, #2
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d81f      	bhi.n	8003e9e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	e016      	b.n	8003e9e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f103 020c 	add.w	r2, r3, #12
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	7812      	ldrb	r2, [r2, #0]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ea2:	f7fd fb13 	bl	80014cc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d803      	bhi.n	8003eba <HAL_SPI_TransmitReceive+0x3cc>
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d102      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x3d2>
 8003eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d107      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ece:	e026      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f47f af57 	bne.w	8003d8a <HAL_SPI_TransmitReceive+0x29c>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f af50 	bne.w	8003d8a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f9ba 	bl	8004268 <SPI_EndRxTxTransaction>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f14:	e003      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003f26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3728      	adds	r7, #40	@ 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f44:	f7fd fac2 	bl	80014cc <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	4413      	add	r3, r2
 8003f52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f54:	f7fd faba 	bl	80014cc <HAL_GetTick>
 8003f58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f5a:	4b39      	ldr	r3, [pc, #228]	@ (8004040 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	015b      	lsls	r3, r3, #5
 8003f60:	0d1b      	lsrs	r3, r3, #20
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f6a:	e054      	b.n	8004016 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d050      	beq.n	8004016 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f74:	f7fd faaa 	bl	80014cc <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d902      	bls.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d13d      	bne.n	8004006 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fa2:	d111      	bne.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fac:	d004      	beq.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb6:	d107      	bne.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd0:	d10f      	bne.n	8003ff2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ff0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e017      	b.n	8004036 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	3b01      	subs	r3, #1
 8004014:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4013      	ands	r3, r2
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	429a      	cmp	r2, r3
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	429a      	cmp	r2, r3
 8004032:	d19b      	bne.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000000 	.word	0x20000000

08004044 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	@ 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004056:	f7fd fa39 	bl	80014cc <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	4413      	add	r3, r2
 8004064:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004066:	f7fd fa31 	bl	80014cc <HAL_GetTick>
 800406a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004074:	4b3d      	ldr	r3, [pc, #244]	@ (800416c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	00da      	lsls	r2, r3, #3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	0d1b      	lsrs	r3, r3, #20
 8004084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800408c:	e060      	b.n	8004150 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004094:	d107      	bne.n	80040a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d104      	bne.n	80040a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d050      	beq.n	8004150 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040ae:	f7fd fa0d 	bl	80014cc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d902      	bls.n	80040c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d13d      	bne.n	8004140 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040dc:	d111      	bne.n	8004102 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e6:	d004      	beq.n	80040f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f0:	d107      	bne.n	8004102 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004100:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410a:	d10f      	bne.n	800412c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800412a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e010      	b.n	8004162 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	3b01      	subs	r3, #1
 800414e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	d196      	bne.n	800408e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3728      	adds	r7, #40	@ 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000000 	.word	0x20000000

08004170 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004184:	d111      	bne.n	80041aa <SPI_EndRxTransaction+0x3a>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800418e:	d004      	beq.n	800419a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004198:	d107      	bne.n	80041aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041b2:	d112      	bne.n	80041da <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2200      	movs	r2, #0
 80041bc:	2180      	movs	r1, #128	@ 0x80
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff feb8 	bl	8003f34 <SPI_WaitFlagStateUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d021      	beq.n	800420e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e03d      	b.n	8004256 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041da:	4b21      	ldr	r3, [pc, #132]	@ (8004260 <SPI_EndRxTransaction+0xf0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a21      	ldr	r2, [pc, #132]	@ (8004264 <SPI_EndRxTransaction+0xf4>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	0d5b      	lsrs	r3, r3, #21
 80041e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004206:	2b80      	cmp	r3, #128	@ 0x80
 8004208:	d0f2      	beq.n	80041f0 <SPI_EndRxTransaction+0x80>
 800420a:	e000      	b.n	800420e <SPI_EndRxTransaction+0x9e>
        break;
 800420c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004216:	d11d      	bne.n	8004254 <SPI_EndRxTransaction+0xe4>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004220:	d004      	beq.n	800422c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422a:	d113      	bne.n	8004254 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff ff03 	bl	8004044 <SPI_WaitFifoStateUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004248:	f043 0220 	orr.w	r2, r3, #32
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e000      	b.n	8004256 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000000 	.word	0x20000000
 8004264:	165e9f81 	.word	0x165e9f81

08004268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff fedf 	bl	8004044 <SPI_WaitFifoStateUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e046      	b.n	800432a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800429c:	4b25      	ldr	r3, [pc, #148]	@ (8004334 <SPI_EndRxTxTransaction+0xcc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a25      	ldr	r2, [pc, #148]	@ (8004338 <SPI_EndRxTxTransaction+0xd0>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	0d5b      	lsrs	r3, r3, #21
 80042a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ba:	d112      	bne.n	80042e2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2200      	movs	r2, #0
 80042c4:	2180      	movs	r1, #128	@ 0x80
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f7ff fe34 	bl	8003f34 <SPI_WaitFlagStateUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d016      	beq.n	8004300 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e023      	b.n	800432a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f8:	2b80      	cmp	r3, #128	@ 0x80
 80042fa:	d0f2      	beq.n	80042e2 <SPI_EndRxTxTransaction+0x7a>
 80042fc:	e000      	b.n	8004300 <SPI_EndRxTxTransaction+0x98>
        break;
 80042fe:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2200      	movs	r2, #0
 8004308:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff fe99 	bl	8004044 <SPI_WaitFifoStateUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e000      	b.n	800432a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000000 	.word	0x20000000
 8004338:	165e9f81 	.word	0x165e9f81

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e049      	b.n	80043e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc ff88 	bl	8001278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 fca8 	bl	8004cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e049      	b.n	8004490 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f841 	bl	8004498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f000 fc51 	bl	8004cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_TIM_PWM_Start+0x24>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e03c      	b.n	800454a <HAL_TIM_PWM_Start+0x9e>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d109      	bne.n	80044ea <HAL_TIM_PWM_Start+0x3e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e02f      	b.n	800454a <HAL_TIM_PWM_Start+0x9e>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d109      	bne.n	8004504 <HAL_TIM_PWM_Start+0x58>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e022      	b.n	800454a <HAL_TIM_PWM_Start+0x9e>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b0c      	cmp	r3, #12
 8004508:	d109      	bne.n	800451e <HAL_TIM_PWM_Start+0x72>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e015      	b.n	800454a <HAL_TIM_PWM_Start+0x9e>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b10      	cmp	r3, #16
 8004522:	d109      	bne.n	8004538 <HAL_TIM_PWM_Start+0x8c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e008      	b.n	800454a <HAL_TIM_PWM_Start+0x9e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e092      	b.n	8004678 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_TIM_PWM_Start+0xb6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004560:	e023      	b.n	80045aa <HAL_TIM_PWM_Start+0xfe>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Start+0xc6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004570:	e01b      	b.n	80045aa <HAL_TIM_PWM_Start+0xfe>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start+0xd6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004580:	e013      	b.n	80045aa <HAL_TIM_PWM_Start+0xfe>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	d104      	bne.n	8004592 <HAL_TIM_PWM_Start+0xe6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004590:	e00b      	b.n	80045aa <HAL_TIM_PWM_Start+0xfe>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b10      	cmp	r3, #16
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_PWM_Start+0xf6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a0:	e003      	b.n	80045aa <HAL_TIM_PWM_Start+0xfe>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2201      	movs	r2, #1
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 ff30 	bl	8005418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a30      	ldr	r2, [pc, #192]	@ (8004680 <HAL_TIM_PWM_Start+0x1d4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_TIM_PWM_Start+0x120>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004684 <HAL_TIM_PWM_Start+0x1d8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <HAL_TIM_PWM_Start+0x124>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_TIM_PWM_Start+0x126>
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a25      	ldr	r2, [pc, #148]	@ (8004680 <HAL_TIM_PWM_Start+0x1d4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_TIM_PWM_Start+0x18a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f8:	d01d      	beq.n	8004636 <HAL_TIM_PWM_Start+0x18a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a22      	ldr	r2, [pc, #136]	@ (8004688 <HAL_TIM_PWM_Start+0x1dc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_TIM_PWM_Start+0x18a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a20      	ldr	r2, [pc, #128]	@ (800468c <HAL_TIM_PWM_Start+0x1e0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_TIM_PWM_Start+0x18a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1f      	ldr	r2, [pc, #124]	@ (8004690 <HAL_TIM_PWM_Start+0x1e4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_TIM_PWM_Start+0x18a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a19      	ldr	r2, [pc, #100]	@ (8004684 <HAL_TIM_PWM_Start+0x1d8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_TIM_PWM_Start+0x18a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <HAL_TIM_PWM_Start+0x1e8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_TIM_PWM_Start+0x18a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a19      	ldr	r2, [pc, #100]	@ (8004698 <HAL_TIM_PWM_Start+0x1ec>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d115      	bne.n	8004662 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	4b17      	ldr	r3, [pc, #92]	@ (800469c <HAL_TIM_PWM_Start+0x1f0>)
 800463e:	4013      	ands	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b06      	cmp	r3, #6
 8004646:	d015      	beq.n	8004674 <HAL_TIM_PWM_Start+0x1c8>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800464e:	d011      	beq.n	8004674 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004660:	e008      	b.n	8004674 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e000      	b.n	8004676 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004674:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40010000 	.word	0x40010000
 8004684:	40010400 	.word	0x40010400
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40014000 	.word	0x40014000
 8004698:	40001800 	.word	0x40001800
 800469c:	00010007 	.word	0x00010007

080046a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d020      	beq.n	8004704 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0202 	mvn.w	r2, #2
 80046d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fad2 	bl	8004c94 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fac4 	bl	8004c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fad5 	bl	8004ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d020      	beq.n	8004750 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01b      	beq.n	8004750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0204 	mvn.w	r2, #4
 8004720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 faac 	bl	8004c94 <HAL_TIM_IC_CaptureCallback>
 800473c:	e005      	b.n	800474a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fa9e 	bl	8004c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 faaf 	bl	8004ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d020      	beq.n	800479c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01b      	beq.n	800479c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0208 	mvn.w	r2, #8
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2204      	movs	r2, #4
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa86 	bl	8004c94 <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa78 	bl	8004c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fa89 	bl	8004ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d020      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01b      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0210 	mvn.w	r2, #16
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2208      	movs	r2, #8
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa60 	bl	8004c94 <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa52 	bl	8004c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fa63 	bl	8004ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0201 	mvn.w	r2, #1
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa30 	bl	8004c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00c      	beq.n	800483a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fead 	bl	8005594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00c      	beq.n	800485e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fea5 	bl	80055a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00c      	beq.n	8004882 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800487a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fa1d 	bl	8004cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00c      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0220 	mvn.w	r2, #32
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fe6d 	bl	8005580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e0ff      	b.n	8004ace <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b14      	cmp	r3, #20
 80048da:	f200 80f0 	bhi.w	8004abe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048de:	a201      	add	r2, pc, #4	@ (adr r2, 80048e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004939 	.word	0x08004939
 80048e8:	08004abf 	.word	0x08004abf
 80048ec:	08004abf 	.word	0x08004abf
 80048f0:	08004abf 	.word	0x08004abf
 80048f4:	08004979 	.word	0x08004979
 80048f8:	08004abf 	.word	0x08004abf
 80048fc:	08004abf 	.word	0x08004abf
 8004900:	08004abf 	.word	0x08004abf
 8004904:	080049bb 	.word	0x080049bb
 8004908:	08004abf 	.word	0x08004abf
 800490c:	08004abf 	.word	0x08004abf
 8004910:	08004abf 	.word	0x08004abf
 8004914:	080049fb 	.word	0x080049fb
 8004918:	08004abf 	.word	0x08004abf
 800491c:	08004abf 	.word	0x08004abf
 8004920:	08004abf 	.word	0x08004abf
 8004924:	08004a3d 	.word	0x08004a3d
 8004928:	08004abf 	.word	0x08004abf
 800492c:	08004abf 	.word	0x08004abf
 8004930:	08004abf 	.word	0x08004abf
 8004934:	08004a7d 	.word	0x08004a7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fa72 	bl	8004e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0208 	orr.w	r2, r2, #8
 8004952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0204 	bic.w	r2, r2, #4
 8004962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6999      	ldr	r1, [r3, #24]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	619a      	str	r2, [r3, #24]
      break;
 8004976:	e0a5      	b.n	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fac4 	bl	8004f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6999      	ldr	r1, [r3, #24]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	619a      	str	r2, [r3, #24]
      break;
 80049b8:	e084      	b.n	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fb1b 	bl	8004ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0208 	orr.w	r2, r2, #8
 80049d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0204 	bic.w	r2, r2, #4
 80049e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69d9      	ldr	r1, [r3, #28]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	61da      	str	r2, [r3, #28]
      break;
 80049f8:	e064      	b.n	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fb71 	bl	80050e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69d9      	ldr	r1, [r3, #28]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	021a      	lsls	r2, r3, #8
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	61da      	str	r2, [r3, #28]
      break;
 8004a3a:	e043      	b.n	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fba8 	bl	8005198 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0208 	orr.w	r2, r2, #8
 8004a56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0204 	bic.w	r2, r2, #4
 8004a66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a7a:	e023      	b.n	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fbda 	bl	800523c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	021a      	lsls	r2, r3, #8
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004abc:	e002      	b.n	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop

08004ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_TIM_ConfigClockSource+0x1c>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e0b4      	b.n	8004c5e <HAL_TIM_ConfigClockSource+0x186>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4b56      	ldr	r3, [pc, #344]	@ (8004c68 <HAL_TIM_ConfigClockSource+0x190>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b2c:	d03e      	beq.n	8004bac <HAL_TIM_ConfigClockSource+0xd4>
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b32:	f200 8087 	bhi.w	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3a:	f000 8086 	beq.w	8004c4a <HAL_TIM_ConfigClockSource+0x172>
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b42:	d87f      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b70      	cmp	r3, #112	@ 0x70
 8004b46:	d01a      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0xa6>
 8004b48:	2b70      	cmp	r3, #112	@ 0x70
 8004b4a:	d87b      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b60      	cmp	r3, #96	@ 0x60
 8004b4e:	d050      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b50:	2b60      	cmp	r3, #96	@ 0x60
 8004b52:	d877      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b50      	cmp	r3, #80	@ 0x50
 8004b56:	d03c      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b58:	2b50      	cmp	r3, #80	@ 0x50
 8004b5a:	d873      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b40      	cmp	r3, #64	@ 0x40
 8004b5e:	d058      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x13a>
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d86f      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b30      	cmp	r3, #48	@ 0x30
 8004b66:	d064      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	2b30      	cmp	r3, #48	@ 0x30
 8004b6a:	d86b      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d060      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d867      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d05c      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d05a      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	e062      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b8e:	f000 fc23 	bl	80053d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	609a      	str	r2, [r3, #8]
      break;
 8004baa:	e04f      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	f000 fc0c 	bl	80053d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bce:	609a      	str	r2, [r3, #8]
      break;
 8004bd0:	e03c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	461a      	mov	r2, r3
 8004be0:	f000 fb80 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2150      	movs	r1, #80	@ 0x50
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fbd9 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e02c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f000 fb9f 	bl	8005342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2160      	movs	r1, #96	@ 0x60
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fbc9 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004c10:	e01c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f000 fb60 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2140      	movs	r1, #64	@ 0x40
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fbb9 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004c30:	e00c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f000 fbb0 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004c42:	e003      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
      break;
 8004c48:	e000      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	fffeff88 	.word	0xfffeff88

08004c6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a46      	ldr	r2, [pc, #280]	@ (8004dfc <TIM_Base_SetConfig+0x12c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cee:	d00f      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a43      	ldr	r2, [pc, #268]	@ (8004e00 <TIM_Base_SetConfig+0x130>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a42      	ldr	r2, [pc, #264]	@ (8004e04 <TIM_Base_SetConfig+0x134>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a41      	ldr	r2, [pc, #260]	@ (8004e08 <TIM_Base_SetConfig+0x138>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a40      	ldr	r2, [pc, #256]	@ (8004e0c <TIM_Base_SetConfig+0x13c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d108      	bne.n	8004d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a35      	ldr	r2, [pc, #212]	@ (8004dfc <TIM_Base_SetConfig+0x12c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d02b      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d30:	d027      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a32      	ldr	r2, [pc, #200]	@ (8004e00 <TIM_Base_SetConfig+0x130>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d023      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a31      	ldr	r2, [pc, #196]	@ (8004e04 <TIM_Base_SetConfig+0x134>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01f      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a30      	ldr	r2, [pc, #192]	@ (8004e08 <TIM_Base_SetConfig+0x138>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01b      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8004e0c <TIM_Base_SetConfig+0x13c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d017      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2e      	ldr	r2, [pc, #184]	@ (8004e10 <TIM_Base_SetConfig+0x140>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e14 <TIM_Base_SetConfig+0x144>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2c      	ldr	r2, [pc, #176]	@ (8004e18 <TIM_Base_SetConfig+0x148>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e1c <TIM_Base_SetConfig+0x14c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2a      	ldr	r2, [pc, #168]	@ (8004e20 <TIM_Base_SetConfig+0x150>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a29      	ldr	r2, [pc, #164]	@ (8004e24 <TIM_Base_SetConfig+0x154>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d108      	bne.n	8004d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a10      	ldr	r2, [pc, #64]	@ (8004dfc <TIM_Base_SetConfig+0x12c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_Base_SetConfig+0xf8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	@ (8004e0c <TIM_Base_SetConfig+0x13c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d103      	bne.n	8004dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d105      	bne.n	8004dee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f023 0201 	bic.w	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	611a      	str	r2, [r3, #16]
  }
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800
 8004e08:	40000c00 	.word	0x40000c00
 8004e0c:	40010400 	.word	0x40010400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800
 8004e1c:	40001800 	.word	0x40001800
 8004e20:	40001c00 	.word	0x40001c00
 8004e24:	40002000 	.word	0x40002000

08004e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f023 0201 	bic.w	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4b2b      	ldr	r3, [pc, #172]	@ (8004f00 <TIM_OC1_SetConfig+0xd8>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 0302 	bic.w	r3, r3, #2
 8004e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a21      	ldr	r2, [pc, #132]	@ (8004f04 <TIM_OC1_SetConfig+0xdc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_OC1_SetConfig+0x64>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a20      	ldr	r2, [pc, #128]	@ (8004f08 <TIM_OC1_SetConfig+0xe0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d10c      	bne.n	8004ea6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0308 	bic.w	r3, r3, #8
 8004e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f023 0304 	bic.w	r3, r3, #4
 8004ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a16      	ldr	r2, [pc, #88]	@ (8004f04 <TIM_OC1_SetConfig+0xdc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <TIM_OC1_SetConfig+0x8e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a15      	ldr	r2, [pc, #84]	@ (8004f08 <TIM_OC1_SetConfig+0xe0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d111      	bne.n	8004eda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	621a      	str	r2, [r3, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	fffeff8f 	.word	0xfffeff8f
 8004f04:	40010000 	.word	0x40010000
 8004f08:	40010400 	.word	0x40010400

08004f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f023 0210 	bic.w	r2, r3, #16
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4b2e      	ldr	r3, [pc, #184]	@ (8004ff0 <TIM_OC2_SetConfig+0xe4>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0320 	bic.w	r3, r3, #32
 8004f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a23      	ldr	r2, [pc, #140]	@ (8004ff4 <TIM_OC2_SetConfig+0xe8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_OC2_SetConfig+0x68>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a22      	ldr	r2, [pc, #136]	@ (8004ff8 <TIM_OC2_SetConfig+0xec>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d10d      	bne.n	8004f90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a18      	ldr	r2, [pc, #96]	@ (8004ff4 <TIM_OC2_SetConfig+0xe8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC2_SetConfig+0x94>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a17      	ldr	r2, [pc, #92]	@ (8004ff8 <TIM_OC2_SetConfig+0xec>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d113      	bne.n	8004fc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	feff8fff 	.word	0xfeff8fff
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40010400 	.word	0x40010400

08004ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4b2d      	ldr	r3, [pc, #180]	@ (80050dc <TIM_OC3_SetConfig+0xe0>)
 8005028:	4013      	ands	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0303 	bic.w	r3, r3, #3
 8005032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a22      	ldr	r2, [pc, #136]	@ (80050e0 <TIM_OC3_SetConfig+0xe4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_OC3_SetConfig+0x66>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a21      	ldr	r2, [pc, #132]	@ (80050e4 <TIM_OC3_SetConfig+0xe8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10d      	bne.n	800507e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800507c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a17      	ldr	r2, [pc, #92]	@ (80050e0 <TIM_OC3_SetConfig+0xe4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_OC3_SetConfig+0x92>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a16      	ldr	r2, [pc, #88]	@ (80050e4 <TIM_OC3_SetConfig+0xe8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d113      	bne.n	80050b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	621a      	str	r2, [r3, #32]
}
 80050d0:	bf00      	nop
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	fffeff8f 	.word	0xfffeff8f
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40010400 	.word	0x40010400

080050e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4b1e      	ldr	r3, [pc, #120]	@ (800518c <TIM_OC4_SetConfig+0xa4>)
 8005114:	4013      	ands	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800511e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	031b      	lsls	r3, r3, #12
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a13      	ldr	r2, [pc, #76]	@ (8005190 <TIM_OC4_SetConfig+0xa8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_OC4_SetConfig+0x68>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a12      	ldr	r2, [pc, #72]	@ (8005194 <TIM_OC4_SetConfig+0xac>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d109      	bne.n	8005164 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	feff8fff 	.word	0xfeff8fff
 8005190:	40010000 	.word	0x40010000
 8005194:	40010400 	.word	0x40010400

08005198 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005230 <TIM_OC5_SetConfig+0x98>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a12      	ldr	r2, [pc, #72]	@ (8005234 <TIM_OC5_SetConfig+0x9c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC5_SetConfig+0x5e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a11      	ldr	r2, [pc, #68]	@ (8005238 <TIM_OC5_SetConfig+0xa0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d109      	bne.n	800520a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	621a      	str	r2, [r3, #32]
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	fffeff8f 	.word	0xfffeff8f
 8005234:	40010000 	.word	0x40010000
 8005238:	40010400 	.word	0x40010400

0800523c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4b1c      	ldr	r3, [pc, #112]	@ (80052d8 <TIM_OC6_SetConfig+0x9c>)
 8005268:	4013      	ands	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800527e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	051b      	lsls	r3, r3, #20
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a13      	ldr	r2, [pc, #76]	@ (80052dc <TIM_OC6_SetConfig+0xa0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_OC6_SetConfig+0x60>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <TIM_OC6_SetConfig+0xa4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d109      	bne.n	80052b0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	feff8fff 	.word	0xfeff8fff
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400

080052e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800530e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 030a 	bic.w	r3, r3, #10
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 0210 	bic.w	r2, r3, #16
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800536c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	031b      	lsls	r3, r3, #12
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800537e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f043 0307 	orr.w	r3, r3, #7
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4313      	orrs	r3, r2
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	2201      	movs	r2, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005478:	2302      	movs	r3, #2
 800547a:	e06d      	b.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a30      	ldr	r2, [pc, #192]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2f      	ldr	r2, [pc, #188]	@ (8005568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a20      	ldr	r2, [pc, #128]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d022      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ee:	d01d      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	@ (800556c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d018      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005570 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1a      	ldr	r2, [pc, #104]	@ (8005574 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a15      	ldr	r2, [pc, #84]	@ (8005568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a16      	ldr	r2, [pc, #88]	@ (8005578 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a15      	ldr	r2, [pc, #84]	@ (800557c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d10c      	bne.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005532:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	4313      	orrs	r3, r2
 800553c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40010000 	.word	0x40010000
 8005568:	40010400 	.word	0x40010400
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40000c00 	.word	0x40000c00
 8005578:	40014000 	.word	0x40014000
 800557c:	40001800 	.word	0x40001800

08005580 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <memset>:
 80055bc:	4402      	add	r2, r0
 80055be:	4603      	mov	r3, r0
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d100      	bne.n	80055c6 <memset+0xa>
 80055c4:	4770      	bx	lr
 80055c6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ca:	e7f9      	b.n	80055c0 <memset+0x4>

080055cc <__libc_init_array>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005604 <__libc_init_array+0x38>)
 80055d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005608 <__libc_init_array+0x3c>)
 80055d2:	1b64      	subs	r4, r4, r5
 80055d4:	10a4      	asrs	r4, r4, #2
 80055d6:	2600      	movs	r6, #0
 80055d8:	42a6      	cmp	r6, r4
 80055da:	d109      	bne.n	80055f0 <__libc_init_array+0x24>
 80055dc:	4d0b      	ldr	r5, [pc, #44]	@ (800560c <__libc_init_array+0x40>)
 80055de:	4c0c      	ldr	r4, [pc, #48]	@ (8005610 <__libc_init_array+0x44>)
 80055e0:	f000 f818 	bl	8005614 <_init>
 80055e4:	1b64      	subs	r4, r4, r5
 80055e6:	10a4      	asrs	r4, r4, #2
 80055e8:	2600      	movs	r6, #0
 80055ea:	42a6      	cmp	r6, r4
 80055ec:	d105      	bne.n	80055fa <__libc_init_array+0x2e>
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f4:	4798      	blx	r3
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7ee      	b.n	80055d8 <__libc_init_array+0xc>
 80055fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fe:	4798      	blx	r3
 8005600:	3601      	adds	r6, #1
 8005602:	e7f2      	b.n	80055ea <__libc_init_array+0x1e>
 8005604:	08005644 	.word	0x08005644
 8005608:	08005644 	.word	0x08005644
 800560c:	08005644 	.word	0x08005644
 8005610:	08005648 	.word	0x08005648

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
